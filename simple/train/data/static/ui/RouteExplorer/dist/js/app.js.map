{"version":3,"sources":["RouteExplorer.js","polyfills.js","controllers/AppController.js","controllers/RouteDetailsController.js","controllers/SelectRoutesController.js","controllers/SelectStopsController.js","directives/PercentBar.js","filters/duration.js","services/Layout.js","services/Locale.js","services/LocationBinder.js"],"names":["app","angular","module","constant","baseDir","config","$routeProvider","env","templateUrl","templateName","when","pageId","controller","resolve","Layout","reloadOnSearch","otherwise","redirectTo","String","prototype","repeat","count","this","TypeError","str","RangeError","Infinity","Math","floor","length","rpt","$scope","$location","share","prefix","url","encodeURIComponent","window","open","$on","e","route","bodyClass","$route","$http","LocationBinder","Locale","getStats","dayId","timeId","statsMap","selectedStats","stats","selectedDay","selectedTime","stops","loadStats","data","formatHour","hour","slice","times","timesMap","i","statGroup","info","hours","week_day","time","id","from","to","push","parsePeriod","periodString","parseMonth","monthString","year","Number","substr","month","Date","parts","split","formatMonth","date","months","getMonth","name","getFullYear","routeParams","current","params","period","startDate","endDate","routeId","stopIds","findRoute","loaded","origin","destination","selectedPeriod","days","get","route_id","from_date","getTime","to_date","success","bind","val","stopStats","stopId","stop_id","stopName","stop","findStop","isDayEmpty","day","dayTimes","num_trips","isTimeEmpty","timeStats","tripCount","collapseRoutes","routes","countStopFrequencies","stopFrequencies","routeIndex","findCommonStops","routesCount","commonStops","collapseStops","collapsibleStops","accumulator","collapsed","getStops","findRoutesByDate","then","isCollapsed","value","isArray","isOrigin","isDestination","stopText","stopTooltip","map","join","barWidth","percentWidth","routeUrl","$rootScope","generatePeriods","fromDate","toDate","periods","getDate","reverse","dateRange","getRoutesDateRange","min","max","formValid","goToRoutes","noRoutes","loading","path","dismissError","directive","restrict","scope","type","filter","seconds","negative","trunc","minutes","res","factory","$q","stopsMap","routesMap","loadedPromise","all","response","s","heb_stop_names","names","forEach","r","stop_ids","minDate","min_date","maxDate","max_date","reduce","m","findRoutes","originId","destinationId","matchingRoutes","originIndex","indexOf","destinationIndex","routeStops","Object","keys","sort","r1","r2","d","defer","routesInDate","reject","msg","promise","service","getRoutes","v","abbr","scopeProperty","locationProperty","parser","formatter","search","$watch"],"mappings":"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","file":"app.js","sourcesContent":["(function() {\n  var app = angular.module('RouteExplorer', ['ngRoute', 'ui.bootstrap', 'ui.bootstrap.buttons']);\n\n  app.constant('env', {\n    baseDir: '/static/ui/RouteExplorer'\n  });\n\n  app.config(['$routeProvider', 'env',\n  function($routeProvider, env) {\n\n      var templateUrl = function(templateName) {\n          return env.baseDir + '/tpls/' + templateName + '.html';\n      };\n\n      $routeProvider\n          .when('/', {\n              pageId: 'welcome',\n              templateUrl: templateUrl('SelectStops'),\n              controller: 'SelectStopsController',\n              resolve: { 'Layout': 'Layout' }\n          })\n          .when('/about', {\n              pageId: 'about',\n              templateUrl: templateUrl('About'),\n          })\n          .when('/:year/:month/select-route/:origin/:destination', {\n              pageId: 'routes',\n              templateUrl: templateUrl('SelectRoute'),\n              controller: 'SelectRouteController',\n              resolve: { 'Layout': 'Layout' }\n          })\n          .when('/:period/routes/:routeId', {\n              pageId: 'route',\n              templateUrl: templateUrl('RouteDetails'),\n              controller: 'RouteDetailsController',\n              resolve: { 'Layout': 'Layout' },\n              reloadOnSearch: false\n          })\n          .otherwise({\n              redirectTo: '/'\n          });\n  }]);\n})();\n","// String.repeat polyfill\n// taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Polyfill\nif (!String.prototype.repeat) {\n  String.prototype.repeat = function(count) {\n    'use strict';\n    if (this === null) {\n      throw new TypeError('can\\'t convert ' + this + ' to object');\n    }\n    var str = '' + this;\n    count = +count;\n    if (count != count) {\n      count = 0;\n    }\n    if (count < 0) {\n      throw new RangeError('repeat count must be non-negative');\n    }\n    if (count == Infinity) {\n      throw new RangeError('repeat count must be less than infinity');\n    }\n    count = Math.floor(count);\n    if (str.length === 0 || count === 0) {\n      return '';\n    }\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\n    // main part. But anyway, most current (August 2014) browsers can't handle\n    // strings 1 << 28 chars or longer, so:\n    if (str.length * count >= 1 << 28) {\n      throw new RangeError('repeat count must not overflow maximum string size');\n    }\n    var rpt = '';\n    for (;;) {\n      if ((count & 1) == 1) {\n        rpt += str;\n      }\n      count >>>= 1;\n      if (count === 0) {\n        break;\n      }\n      str += str;\n    }\n    return rpt;\n  };\n}\n","angular.module('RouteExplorer').controller('AppController',\n['$scope', '$location',\nfunction($scope, $location) {\n    $scope.share = function(prefix) {\n        var url = prefix + encodeURIComponent('http://otrain.org/#' + $location.url());\n        window.open(url, 'sharePopup', 'width=600,height=550,top=100,left=100,location=no,scrollbar=no,status=no,menubar=no');\n    };\n\n    $scope.$on('$routeChangeSuccess', function(e, route) {\n        $scope.bodyClass = route.pageId ? 'rex-page-' + route.pageId : null;\n    });\n}]);\n","angular.module('RouteExplorer').controller('RouteDetailsController',\n['$scope', '$route', '$http', '$location', 'LocationBinder', 'Layout', 'Locale',\nfunction($scope, $route, $http, $location, LocationBinder, Layout, Locale) {\n    var routeParams = $route.current.params;\n\n    var period = parsePeriod(routeParams.period);\n    var startDate = period.from;\n    var endDate = new Date(period.to.getFullYear(), period.to.getMonth() + 1, 1);\n\n    var routeId = routeParams.routeId;\n    var stopIds = Layout.findRoute(routeId).stops;\n    var statsMap = {};\n\n    $scope.loaded = false;\n    $scope.stopIds = stopIds;\n    $scope.origin = stopIds[0];\n    $scope.destination = stopIds[stopIds.length - 1];\n    $scope.selectedPeriod = formatMonth(period.from);\n    if (period.to > period.from) {\n        $scope.selectedPeriod += \" \\u2014 \" + formatMonth(period.to)\n    }\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    $http.get('/api/route-info-full', { params: { route_id: routeId, from_date: startDate.getTime(), to_date: endDate.getTime() } })\n        .success(function(data) {\n            loadStats(data);\n            $scope.loaded = true;\n        });\n\n    LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n\n    $scope.stopStats = function(stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId)\n                return stats[i];\n        }\n        return null;\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n            return stop.name;\n    };\n\n    $scope.isDayEmpty = function(day) {\n        var dayId = day.id;\n        var dayTimes = statsMap[dayId];\n\n        if (!dayTimes)\n            return true;\n\n        for (var time in dayTimes)\n            if (dayTimes[time].info.num_trips > 0)\n                return false;\n\n        return true;\n    };\n\n    $scope.isTimeEmpty = function(time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0)\n            return false;\n\n        return true;\n    };\n\n    $scope.tripCount = function(dayId, timeId) {\n      var stats = getStats(dayId, timeId);\n      if (!stats)\n        return 0;\n\n      return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n      dayId = dayId || 'all';\n      timeId = timeId || 'all';\n      return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats)\n          return stats.stops;\n\n        return [];\n    }\n\n    function loadStats(data) {\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId])\n                statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n\n        function formatHour(hour) {\n            return ('0' + hour % 24 + '').slice(-2) + ':00';\n        }\n    }\n\n    function parsePeriod(periodString) {\n        function parseMonth(monthString) {\n            var year = Number(monthString.substr(0, 4));\n            var month = Number(monthString.substr(5, 2));\n            return new Date(year, month - 1, 1);\n        }\n\n        var parts = periodString.split('-', 2);\n        var from = parseMonth(parts[0]);\n        var to = parts.length > 1 ? parseMonth(parts[1]) : from;\n        return { from: from, to: to };\n    }\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n}]);\n","angular.module('RouteExplorer').controller('SelectRouteController',\n['$scope', '$location', '$route', 'Layout',\nfunction($scope, $location, $route, Layout) {\n    $scope.stops = Layout.getStops();\n    var year = $route.current.params.year;\n    var month = $route.current.params.month;\n    var origin = Layout.findStop($route.current.params.origin);\n    var destination = Layout.findStop($route.current.params.destination);\n\n    Layout.findRoutesByDate(origin.id, destination.id, year, month).then(function(routes) {\n        if (routes.length > 1)\n            collapseRoutes(routes);\n        $scope.routes = routes;\n    });\n\n    function stopName(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    }\n\n    $scope.isCollapsed = function(value) {\n        return angular.isArray(value);\n    };\n\n    $scope.isOrigin = function(stopId) {\n        return stopId == origin.id;\n    };\n\n    $scope.isDestination = function(stopId) {\n        return stopId == destination.id;\n    };\n\n    $scope.stopText = function(stopId) {\n        if ($scope.isCollapsed(stopId))\n            return \"\\u2022\".repeat(stopId.length);\n\n        return stopName(stopId);\n    };\n\n    $scope.stopTooltip = function(stopId) {\n        if (!$scope.isCollapsed(stopId))\n            return null;\n\n        return stopId.map(stopName).join(\", \");\n    };\n\n    $scope.barWidth = function(route) {\n        var percentWidth = route.count * 100.0 / $scope.routes[0].count;\n\n        if (percentWidth < 1.0)\n            return \"1px\";\n\n        return percentWidth + \"%\";\n    };\n\n    $scope.routeUrl = function(route) {\n        return '/#/' + year + (\"0\" + month).slice(-2) + '/routes/' + route.id;\n    };\n\n    function collapseRoutes(routes) {\n        var collapsibleStops = findCommonStops(countStopFrequencies(routes), routes.length);\n        delete collapsibleStops[origin.id];\n        delete collapsibleStops[destination.id];\n\n        for (var routeIndex in routes) {\n            routes[routeIndex].stops = collapseStops(routes[routeIndex].stops, collapsibleStops);\n        }\n\n        function countStopFrequencies(routes) {\n            var stopFrequencies = {};\n            for (var routeIndex in routes) {\n                var route = routes[routeIndex];\n                for (var i in route.stops) {\n                    var stopId = route.stops[i];\n                    if (!stopFrequencies[stopId])\n                        stopFrequencies[stopId] = 0;\n                    stopFrequencies[stopId]++;\n                }\n            }\n\n            return stopFrequencies;\n        }\n\n        function findCommonStops(stopFrequencies, routesCount) {\n            var commonStops = {};\n            for (var stopId in stopFrequencies)\n                if (stopFrequencies[stopId] == routesCount)\n                    commonStops[stopId] = true;\n\n            return commonStops;\n        }\n\n        function collapseStops(stops, collapsibleStops) {\n            var collapsed = [];\n            var accumulator;\n\n            for (var i in stops) {\n                var stopId = stops[i];\n                if (i > 0 && i < stops.length - 1 && collapsibleStops[stopId]) {\n                    if (!accumulator) {\n                        accumulator = [];\n                        collapsed.push(accumulator);\n                    }\n                    accumulator.push(stopId);\n                } else {\n                    accumulator = null;\n                    collapsed.push(stopId);\n                }\n            }\n\n            return collapsed;\n        }\n    }\n}]);\n","angular.module('RouteExplorer').controller('SelectStopsController',\n['$scope', '$rootScope', '$location', 'Layout', 'Locale',\nfunction($scope, $rootScope, $location, Layout, Locale) {\n    $scope.stops = Layout.getStops();\n    $scope.origin = null;\n    $scope.destination = null;\n    $scope.months = Locale.months;\n\n    var dateRange = Layout.getRoutesDateRange();\n    $scope.periods = generatePeriods(dateRange.min, dateRange.max);\n    $scope.period = $scope.periods[0];\n\n    $scope.formValid = function() {\n        return (\n            !!$scope.origin &&\n            !!$scope.destination &&\n            $scope.origin != $scope.destination\n        );\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    };\n\n    $scope.goToRoutes = function() {\n        $scope.noRoutes = false;\n        $scope.loading = true;\n        var year = $scope.period.from.getFullYear();\n        var month = $scope.period.from.getMonth() + 1;\n        Layout.findRoutesByDate($scope.origin.id, $scope.destination.id, year, month)\n            .then(function(routes) {\n                if (routes.length === 0) {\n                    $scope.noRoutes = true;\n                } else if (routes.length == 1) {\n                    $location.path('/' + year + (\"0\" + month).slice(-2) + '/routes/' + routes[0].id);\n                } else {\n                    $location.path('/' + year + '/' + month + '/select-route/' + $scope.origin.id + '/' + $scope.destination.id);\n                }\n            })\n            .finally(function() {\n                $scope.loading = false;\n            });\n    };\n\n    $scope.dismissError = function() {\n        $scope.noRoutes = false;\n    };\n\n    function generatePeriods(fromDate, toDate) {\n      // fromDate=1970-1-1 due to a data bug. This is a quick temporary workaround\n      if (fromDate.getFullYear() < 2013) fromDate = new Date(2013, 0, 1);\n\n      var periods = [];\n      var from = new Date(fromDate.getFullYear(), fromDate.getMonth(), 1);\n      while (from < toDate) {\n        to = new Date(from.getFullYear(), from.getMonth() + 1, from.getDate());\n        var period = {\n          from: from,\n          to: to,\n          name: Locale.months[from.getMonth()].name + \" \" + from.getFullYear()\n        };\n        periods.push(period);\n        from = to;\n      }\n      periods.reverse();\n      return periods;\n    }\n}]);\n","angular.module('RouteExplorer').directive(\"rexPercentBar\",\n['env',\nfunction(env) {\n    return {\n        restrict: 'E',\n        scope: {\n          value: '=value',\n          type: '=type'\n        },\n        templateUrl: env.baseDir + '/tpls/PercentBar.html'\n      };\n}]);\n","angular.module('RouteExplorer').filter('duration', function() {\n    return function(seconds) {\n        var negative = false;\n        seconds = Math.trunc(seconds);\n        if (seconds < 0) {\n            negative = true;\n            seconds = -seconds;\n        }\n\n        var minutes = Math.trunc(seconds / 60);\n        seconds -= minutes * 60;\n        var hours = Math.trunc(minutes / 60);\n        minutes -= hours * 60;\n\n        if (seconds < 10) seconds = '0' + seconds;\n        if (minutes < 10 && hours !== 0) minutes = '0' + minutes;\n\n        var res = minutes + ':' + seconds;\n        if (hours !== 0)\n            res = hours + ':' + res;\n\n        if (negative)\n            res = '-' + res;\n\n        return res;\n    };\n});\n","angular.module('RouteExplorer').factory('Layout',\n['$http', '$q',\nfunction($http, $q) {\n    var self = this;\n    var stops = [];\n    var stopsMap = {};\n    var routes = [];\n    var routesMap = {};\n\n    var loadedPromise = $q.all([\n        $http.get('/api/stops')\n            .then(function(response) {\n                stops = response.data.map(function(s) { return { id: s.stop_id, name: s.heb_stop_names[0], names: s.heb_stop_names }; });\n                stops.forEach(function(s) { stopsMap[s.id] = s; });\n            }),\n\n        $http.get('/api/all-routes')\n            .then(function(response) {\n                routes = response.data.map(function(r) { return {\n                    id: r.id,\n                    stops: r.stop_ids,\n                    count: r.count,\n                    minDate: new Date(r.min_date),\n                    maxDate: new Date(r.max_date)\n                }; });\n\n                routesMap = routes.reduce(function(m, r) { m[r.id] = r; return m; }, {});\n            })\n    ]);\n\n    var findStop = function(stopId) {\n        return stopsMap[stopId] || null;\n    };\n\n    var findRoutes = function(routes, originId, destinationId) {\n        var matchingRoutes = {};\n\n        routes.forEach(function(r) {\n            var originIndex = r.stops.indexOf(originId);\n            var destinationIndex = r.stops.indexOf(destinationId);\n\n            if (originIndex < 0 || destinationIndex < 0)\n                return;\n\n            if (originIndex > destinationIndex)\n                return;\n\n            var routeStops = r.stops;\n            var routeId = r.id;\n\n            if (routeId in matchingRoutes)\n                matchingRoutes[routeId].count += r.count;\n            else {\n                matchingRoutes[routeId] = {\n                    id: routeId,\n                    stops: routeStops,\n                    count: r.count\n                };\n            }\n        });\n\n        matchingRoutes = Object.keys(matchingRoutes).map(function(routeId) { return matchingRoutes[routeId]; });\n        matchingRoutes.sort(function(r1, r2) { return r2.count - r1.count; });\n        return matchingRoutes;\n    };\n\n    var findRoutesByDate = function(origin, destination, year, month) {\n        // TODO use minDate and maxDate from our cached routes to avoid the http request\n\n        var d = $q.defer();\n        var matchingRoutes = findRoutes(routes, origin, destination);\n        if (matchingRoutes.length === 0) {\n            d.resolve([]);\n        } else {\n            var fromDate = new Date(year, month - 1, 1);\n            var toDate = new Date(year, month, 1);\n\n            $http.get('/api/all-routes-by-date', {\n                params: {\n                    from_date: fromDate.getTime(),\n                    to_date: toDate.getTime()\n                }\n            }).then(function(response) {\n                var routesInDate = response.data.map(function(r) {\n                    return {\n                        id: r.id,\n                        stops: r.stop_ids,\n                        count: r.count\n                    };\n                });\n                d.resolve(findRoutes(routesInDate, origin, destination));\n            }, function(response) { d.reject({ 'msg': 'Error fetching routes', 'response': response }); });\n        }\n\n        return d.promise;\n    };\n\n    var findRoute = function(routeId) {\n        return routesMap[routeId] || null;\n    };\n\n    var getRoutesDateRange = function() {\n        var max = new Date(1900, 0, 1);\n        var min = new Date(2100, 0, 1);\n\n        for (var i in routes) {\n            route = routes[i];\n            if (route.count === 0)\n              continue;\n\n            if (route.minDate && route.minDate < min) min = route.minDate;\n            if (route.maxDate && route.maxDate > max) max = route.maxDate;\n        }\n        return {\n          min: min,\n          max: max\n        };\n    };\n\n    service = {\n        getStops: function() { return stops; },\n        getRoutes: function() { return routes; },\n        findRoute: findRoute,\n        findStop: findStop,\n        findRoutes: function(origin, destination) { return findRoutes(routes, origin, destination); },\n        findRoutesByDate: findRoutesByDate,\n        getRoutesDateRange: getRoutesDateRange\n    };\n\n    return loadedPromise.then(function() { return service; });\n}]);\n","angular.module('RouteExplorer').constant('Locale', {\n  months: [\n      'ינואר',\n      'פברואר',\n      'מרץ',\n      'אפריל',\n      'מאי',\n      'יוני',\n      'יולי',\n      'אוגוסט',\n      'ספטמבר',\n      'אוקטובר',\n      'נובמבר',\n      'דצמבר'\n  ].map(function(v, i) { return { id: i + 1, name: v }; }),\n\n  days: [\n      { abbr: 'א', name: 'ראשון', id: 1 },\n      { abbr: 'ב', name: 'שני', id: 2 },\n      { abbr: 'ג', name: 'שלישי', id: 3 },\n      { abbr: 'ד', name: 'רביעי', id: 4 },\n      { abbr: 'ה', name: 'חמישי', id: 5 },\n      { abbr: 'ו', name: 'שישי', id: 6 },\n      { abbr: 'ש', name: 'שבת', id: 7 }\n  ]\n});\n","angular.module('RouteExplorer').factory('LocationBinder',\n['$location',\nfunction($location) {\n    return {\n        bind: function(scope, scopeProperty, locationProperty, parser, formatter) {\n            scope[scopeProperty] = $location.search()[locationProperty] || null;\n\n            scope.$watch(scopeProperty, function(value) {\n                if (formatter)\n                    value = formatter(value);\n\n                $location.search(locationProperty, value);\n            });\n\n            scope.$watch(function() { return $location.search()[locationProperty] || null; }, function(value) {\n                if (parser)\n                    value = parser(value);\n\n                scope[scopeProperty] = value;\n            });\n        }\n    };\n}]);\n"],"sourceRoot":"/source/"}