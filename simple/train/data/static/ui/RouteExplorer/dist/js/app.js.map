{"version":3,"sources":["RouteExplorer.js","polyfills.js","controllers/AppController.js","controllers/RouteDetailsController.js","controllers/SelectRoutesController.js","controllers/SelectStopsController.js","directives/PercentBar.js","filters/duration.js","services/Layout.js","services/Locale.js","services/LocationBinder.js","services/TimeParser.js"],"names":["app","angular","module","constant","baseDir","config","$routeProvider","env","templateUrl","templateName","when","pageId","controller","resolve","Layout","reloadOnSearch","otherwise","redirectTo","String","prototype","repeat","count","this","TypeError","str","RangeError","Infinity","Math","floor","length","rpt","$scope","$location","share","prefix","url","encodeURIComponent","window","open","$on","e","route","bodyClass","$route","$http","LocationBinder","Locale","TimeParser","getStats","dayId","timeId","statsMap","selectedStats","stats","selectedDay","selectedTime","stops","loadStats","data","formatHour","hour","slice","times","timesMap","i","statGroup","info","hours","week_day","time","id","from","to","push","formatMonth","date","months","getMonth","name","getFullYear","routeParams","current","params","period","parsePeriod","startDate","endDate","end","routeId","stopIds","findRoute","loaded","origin","destination","selectedPeriod","days","selectRouteUrl","get","route_id","from_date","getTime","to_date","success","bind","val","Number","stopStats","stopId","stop_id","stopName","stop","findStop","isDayEmpty","day","dayTimes","num_trips","isTimeEmpty","timeStats","tripCount","collapseRoutes","routes","countStopFrequencies","stopFrequencies","routeIndex","findCommonStops","routesCount","commonStops","collapseStops","collapsibleStops","accumulator","collapsed","getStops","findRoutesByPeriod","then","isCollapsed","value","isArray","isOrigin","isDestination","stopText","stopTooltip","map","join","barWidth","percentWidth","routeUrl","$rootScope","generatePeriods","fromDate","toDate","Date","periods","getDate","reverse","dateRange","getRoutesDateRange","min","max","formValid","goToRoutes","noRoutes","loading","periodStr","path","dismissError","directive","restrict","scope","type","filter","seconds","negative","trunc","minutes","res","factory","$q","stopsMap","routesMap","loadedPromise","all","response","s","heb_stop_names","names","forEach","r","stop_ids","minDate","min_date","maxDate","max_date","reduce","m","findRoutes","originId","destinationId","matchingRoutes","originIndex","indexOf","destinationIndex","routeStops","Object","keys","sort","r1","r2","d","defer","routesInDate","reject","msg","promise","service","getRoutes","v","abbr","scopeProperty","locationProperty","parser","formatter","search","$watch","parseMonth","monthString","year","substr","month","periodString","parts","split"],"mappings":"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","file":"app.js","sourcesContent":["(function() {\n  var app = angular.module('RouteExplorer', ['ngRoute', 'ui.bootstrap', 'ui.bootstrap.buttons']);\n\n  app.constant('env', {\n    baseDir: '/static/ui/RouteExplorer'\n  });\n\n  app.config(['$routeProvider', 'env',\n  function($routeProvider, env) {\n\n      var templateUrl = function(templateName) {\n          return env.baseDir + '/tpls/' + templateName + '.html';\n      };\n\n      $routeProvider\n          .when('/', {\n              pageId: 'welcome',\n              templateUrl: templateUrl('SelectStops'),\n              controller: 'SelectStopsController',\n              resolve: { 'Layout': 'Layout' }\n          })\n          .when('/about', {\n              pageId: 'about',\n              templateUrl: templateUrl('About')\n          })\n          .when('/:period/select-route/:origin/:destination', {\n              pageId: 'routes',\n              templateUrl: templateUrl('SelectRoute'),\n              controller: 'SelectRouteController',\n              resolve: { 'Layout': 'Layout' }\n          })\n          .when('/:period/routes/:routeId', {\n              pageId: 'route',\n              templateUrl: templateUrl('RouteDetails'),\n              controller: 'RouteDetailsController',\n              resolve: { 'Layout': 'Layout' },\n              reloadOnSearch: false\n          })\n          .otherwise({\n              redirectTo: '/'\n          });\n  }]);\n})();\n","// String.repeat polyfill\n// taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Polyfill\nif (!String.prototype.repeat) {\n  String.prototype.repeat = function(count) {\n    'use strict';\n    if (this === null) {\n      throw new TypeError('can\\'t convert ' + this + ' to object');\n    }\n    var str = '' + this;\n    count = +count;\n    if (count != count) {\n      count = 0;\n    }\n    if (count < 0) {\n      throw new RangeError('repeat count must be non-negative');\n    }\n    if (count == Infinity) {\n      throw new RangeError('repeat count must be less than infinity');\n    }\n    count = Math.floor(count);\n    if (str.length === 0 || count === 0) {\n      return '';\n    }\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\n    // main part. But anyway, most current (August 2014) browsers can't handle\n    // strings 1 << 28 chars or longer, so:\n    if (str.length * count >= 1 << 28) {\n      throw new RangeError('repeat count must not overflow maximum string size');\n    }\n    var rpt = '';\n    for (;;) {\n      if ((count & 1) == 1) {\n        rpt += str;\n      }\n      count >>>= 1;\n      if (count === 0) {\n        break;\n      }\n      str += str;\n    }\n    return rpt;\n  };\n}\n","angular.module('RouteExplorer').controller('AppController',\n['$scope', '$location',\nfunction($scope, $location) {\n    $scope.share = function(prefix) {\n        var url = prefix + encodeURIComponent('http://otrain.org/#' + $location.url());\n        window.open(url, 'sharePopup', 'width=600,height=550,top=100,left=100,location=no,scrollbar=no,status=no,menubar=no');\n    };\n\n    $scope.$on('$routeChangeSuccess', function(e, route) {\n        $scope.bodyClass = route.pageId ? 'rex-page-' + route.pageId : null;\n    });\n}]);\n","angular.module('RouteExplorer').controller('RouteDetailsController',\n['$scope', '$route', '$http', '$location', 'LocationBinder', 'Layout', 'Locale', 'TimeParser',\nfunction($scope, $route, $http, $location, LocationBinder, Layout, Locale, TimeParser) {\n    var routeParams = $route.current.params;\n\n    var period = TimeParser.parsePeriod(routeParams.period);\n    var startDate = period.from;\n    var endDate = period.end;\n\n    var routeId = routeParams.routeId;\n    var stopIds = Layout.findRoute(routeId).stops;\n    var statsMap = {};\n\n    $scope.loaded = false;\n    $scope.stopIds = stopIds;\n    $scope.origin = stopIds[0];\n    $scope.destination = stopIds[stopIds.length - 1];\n    $scope.selectedPeriod = formatMonth(period.from);\n    if (period.to > period.from) {\n        $scope.selectedPeriod += \" \\u2014 \" + formatMonth(period.to)\n    }\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    $scope.selectRouteUrl = '#/' + routeParams.period + '/select-route/' + $scope.origin + '/' + $scope.destination;\n\n    $http.get('/api/route-info-full', { params: { route_id: routeId, from_date: startDate.getTime(), to_date: endDate.getTime() } })\n        .success(function(data) {\n            loadStats(data);\n            $scope.loaded = true;\n        });\n\n    LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n\n    $scope.stopStats = function(stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId)\n                return stats[i];\n        }\n        return null;\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n            return stop.name;\n    };\n\n    $scope.isDayEmpty = function(day) {\n        var dayId = day.id;\n        var dayTimes = statsMap[dayId];\n\n        if (!dayTimes)\n            return true;\n\n        for (var time in dayTimes)\n            if (dayTimes[time].info.num_trips > 0)\n                return false;\n\n        return true;\n    };\n\n    $scope.isTimeEmpty = function(time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0)\n            return false;\n\n        return true;\n    };\n\n    $scope.tripCount = function(dayId, timeId) {\n      var stats = getStats(dayId, timeId);\n      if (!stats)\n        return 0;\n\n      return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n      dayId = dayId || 'all';\n      timeId = timeId || 'all';\n      return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats)\n          return stats.stops;\n\n        return [];\n    }\n\n    function loadStats(data) {\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId])\n                statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n\n        function formatHour(hour) {\n            return ('0' + hour % 24 + '').slice(-2) + ':00';\n        }\n    }\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n}]);\n","angular.module('RouteExplorer').controller('SelectRouteController',\n['$scope', '$location', '$route', 'Layout', 'TimeParser',\nfunction($scope, $location, $route, Layout, TimeParser) {\n    $scope.stops = Layout.getStops();\n    var period = TimeParser.parsePeriod($route.current.params.period);\n    var origin = Layout.findStop($route.current.params.origin);\n    var destination = Layout.findStop($route.current.params.destination);\n\n    Layout.findRoutesByPeriod(origin.id, destination.id, period.from, period.end).then(function(routes) {\n        if (routes.length > 1)\n            collapseRoutes(routes);\n        $scope.routes = routes;\n    });\n\n    function stopName(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    }\n\n    $scope.isCollapsed = function(value) {\n        return angular.isArray(value);\n    };\n\n    $scope.isOrigin = function(stopId) {\n        return stopId == origin.id;\n    };\n\n    $scope.isDestination = function(stopId) {\n        return stopId == destination.id;\n    };\n\n    $scope.stopText = function(stopId) {\n        if ($scope.isCollapsed(stopId))\n            return \"\\u2022\".repeat(stopId.length);\n\n        return stopName(stopId);\n    };\n\n    $scope.stopTooltip = function(stopId) {\n        if (!$scope.isCollapsed(stopId))\n            return null;\n\n        return stopId.map(stopName).join(\", \");\n    };\n\n    $scope.barWidth = function(route) {\n        var percentWidth = route.count * 100.0 / $scope.routes[0].count;\n\n        if (percentWidth < 1.0)\n            return \"1px\";\n\n        return percentWidth + \"%\";\n    };\n\n    $scope.routeUrl = function(route) {\n        return '/#/' + $route.current.params.period + '/routes/' + route.id;\n    };\n\n    function collapseRoutes(routes) {\n        var collapsibleStops = findCommonStops(countStopFrequencies(routes), routes.length);\n        delete collapsibleStops[origin.id];\n        delete collapsibleStops[destination.id];\n\n        for (var routeIndex in routes) {\n            routes[routeIndex].stops = collapseStops(routes[routeIndex].stops, collapsibleStops);\n        }\n\n        function countStopFrequencies(routes) {\n            var stopFrequencies = {};\n            for (var routeIndex in routes) {\n                var route = routes[routeIndex];\n                for (var i in route.stops) {\n                    var stopId = route.stops[i];\n                    if (!stopFrequencies[stopId])\n                        stopFrequencies[stopId] = 0;\n                    stopFrequencies[stopId]++;\n                }\n            }\n\n            return stopFrequencies;\n        }\n\n        function findCommonStops(stopFrequencies, routesCount) {\n            var commonStops = {};\n            for (var stopId in stopFrequencies)\n                if (stopFrequencies[stopId] == routesCount)\n                    commonStops[stopId] = true;\n\n            return commonStops;\n        }\n\n        function collapseStops(stops, collapsibleStops) {\n            var collapsed = [];\n            var accumulator;\n\n            for (var i in stops) {\n                var stopId = stops[i];\n                if (i > 0 && i < stops.length - 1 && collapsibleStops[stopId]) {\n                    if (!accumulator) {\n                        accumulator = [];\n                        collapsed.push(accumulator);\n                    }\n                    accumulator.push(stopId);\n                } else {\n                    accumulator = null;\n                    collapsed.push(stopId);\n                }\n            }\n\n            return collapsed;\n        }\n    }\n}]);\n","angular.module('RouteExplorer').controller('SelectStopsController',\n['$scope', '$rootScope', '$location', 'Layout', 'Locale',\nfunction($scope, $rootScope, $location, Layout, Locale) {\n    $scope.stops = Layout.getStops();\n    $scope.origin = null;\n    $scope.destination = null;\n    $scope.months = Locale.months;\n\n    var dateRange = Layout.getRoutesDateRange();\n    $scope.periods = generatePeriods(dateRange.min, dateRange.max);\n    $scope.period = $scope.periods[0];\n\n    $scope.formValid = function() {\n        return (\n            !!$scope.origin &&\n            !!$scope.destination &&\n            $scope.origin != $scope.destination\n        );\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    };\n\n    $scope.goToRoutes = function() {\n        $scope.noRoutes = false;\n        $scope.loading = true;\n        var from = $scope.period.from;\n        var to = $scope.period.to;\n        var periodStr = from.getFullYear() + ('0' + (from.getMonth() + 1)).slice(-2);\n        Layout.findRoutesByPeriod($scope.origin.id, $scope.destination.id, from, to)\n            .then(function(routes) {\n                if (routes.length === 0) {\n                    $scope.noRoutes = true;\n                } else if (routes.length == 1) {\n                    $location.path('/' + periodStr + '/routes/' + routes[0].id);\n                } else {\n                    $location.path('/' + periodStr + '/select-route/' + $scope.origin.id + '/' + $scope.destination.id);\n                }\n            })\n            .finally(function() {\n                $scope.loading = false;\n            });\n    };\n\n    $scope.dismissError = function() {\n        $scope.noRoutes = false;\n    };\n\n    function generatePeriods(fromDate, toDate) {\n      // fromDate=1970-1-1 due to a data bug. This is a quick temporary workaround\n      if (fromDate.getFullYear() < 2013) fromDate = new Date(2013, 0, 1);\n\n      var periods = [];\n      var from = new Date(fromDate.getFullYear(), fromDate.getMonth(), 1);\n      while (from < toDate) {\n        to = new Date(from.getFullYear(), from.getMonth() + 1, from.getDate());\n        var period = {\n          from: from,\n          to: to,\n          name: Locale.months[from.getMonth()].name + \" \" + from.getFullYear()\n        };\n        periods.push(period);\n        from = to;\n      }\n      periods.reverse();\n      return periods;\n    }\n}]);\n","angular.module('RouteExplorer').directive(\"rexPercentBar\",\n['env',\nfunction(env) {\n    return {\n        restrict: 'E',\n        scope: {\n          value: '=value',\n          type: '=type'\n        },\n        templateUrl: env.baseDir + '/tpls/PercentBar.html'\n      };\n}]);\n","angular.module('RouteExplorer').filter('duration', function() {\n    return function(seconds) {\n        var negative = false;\n        seconds = Math.trunc(seconds);\n        if (seconds < 0) {\n            negative = true;\n            seconds = -seconds;\n        }\n\n        var minutes = Math.trunc(seconds / 60);\n        seconds -= minutes * 60;\n        var hours = Math.trunc(minutes / 60);\n        minutes -= hours * 60;\n\n        if (seconds < 10) seconds = '0' + seconds;\n        if (minutes < 10 && hours !== 0) minutes = '0' + minutes;\n\n        var res = minutes + ':' + seconds;\n        if (hours !== 0)\n            res = hours + ':' + res;\n\n        if (negative)\n            res = '-' + res;\n\n        return res;\n    };\n});\n","angular.module('RouteExplorer').factory('Layout',\n['$http', '$q',\nfunction($http, $q) {\n    var self = this;\n    var stops = [];\n    var stopsMap = {};\n    var routes = [];\n    var routesMap = {};\n\n    var loadedPromise = $q.all([\n        $http.get('/api/stops')\n            .then(function(response) {\n                stops = response.data.map(function(s) { return { id: s.stop_id, name: s.heb_stop_names[0], names: s.heb_stop_names }; });\n                stops.forEach(function(s) { stopsMap[s.id] = s; });\n            }),\n\n        $http.get('/api/all-routes')\n            .then(function(response) {\n                routes = response.data.map(function(r) { return {\n                    id: r.id,\n                    stops: r.stop_ids,\n                    count: r.count,\n                    minDate: new Date(r.min_date),\n                    maxDate: new Date(r.max_date)\n                }; });\n\n                routesMap = routes.reduce(function(m, r) { m[r.id] = r; return m; }, {});\n            })\n    ]);\n\n    var findStop = function(stopId) {\n        return stopsMap[stopId] || null;\n    };\n\n    var findRoutes = function(routes, originId, destinationId) {\n        var matchingRoutes = {};\n\n        routes.forEach(function(r) {\n            var originIndex = r.stops.indexOf(originId);\n            var destinationIndex = r.stops.indexOf(destinationId);\n\n            if (originIndex < 0 || destinationIndex < 0)\n                return;\n\n            if (originIndex > destinationIndex)\n                return;\n\n            var routeStops = r.stops;\n            var routeId = r.id;\n\n            if (routeId in matchingRoutes)\n                matchingRoutes[routeId].count += r.count;\n            else {\n                matchingRoutes[routeId] = {\n                    id: routeId,\n                    stops: routeStops,\n                    count: r.count\n                };\n            }\n        });\n\n        matchingRoutes = Object.keys(matchingRoutes).map(function(routeId) { return matchingRoutes[routeId]; });\n        matchingRoutes.sort(function(r1, r2) { return r2.count - r1.count; });\n        return matchingRoutes;\n    };\n\n    var findRoutesByPeriod = function(origin, destination, from, to) {\n        // TODO use minDate and maxDate from our cached routes to avoid the http request\n\n        var d = $q.defer();\n        var matchingRoutes = findRoutes(routes, origin, destination);\n        if (matchingRoutes.length === 0) {\n            d.resolve([]);\n        } else {\n            var fromDate = from;\n            var toDate = to;\n\n            $http.get('/api/all-routes-by-date', {\n                params: {\n                    from_date: fromDate.getTime(),\n                    to_date: toDate.getTime()\n                }\n            }).then(function(response) {\n                var routesInDate = response.data.map(function(r) {\n                    return {\n                        id: r.id,\n                        stops: r.stop_ids,\n                        count: r.count\n                    };\n                });\n                d.resolve(findRoutes(routesInDate, origin, destination));\n            }, function(response) { d.reject({ 'msg': 'Error fetching routes', 'response': response }); });\n        }\n\n        return d.promise;\n    };\n\n    var findRoute = function(routeId) {\n        return routesMap[routeId] || null;\n    };\n\n    var getRoutesDateRange = function() {\n        var max = new Date(1900, 0, 1);\n        var min = new Date(2100, 0, 1);\n\n        for (var i in routes) {\n            route = routes[i];\n            if (route.count === 0)\n              continue;\n\n            if (route.minDate && route.minDate < min) min = route.minDate;\n            if (route.maxDate && route.maxDate > max) max = route.maxDate;\n        }\n        return {\n          min: min,\n          max: max\n        };\n    };\n\n    service = {\n        getStops: function() { return stops; },\n        getRoutes: function() { return routes; },\n        findRoute: findRoute,\n        findStop: findStop,\n        findRoutes: function(origin, destination) { return findRoutes(routes, origin, destination); },\n        findRoutesByPeriod: findRoutesByPeriod,\n        getRoutesDateRange: getRoutesDateRange\n    };\n\n    return loadedPromise.then(function() { return service; });\n}]);\n","angular.module('RouteExplorer').constant('Locale', {\n  months: [\n      'ינואר',\n      'פברואר',\n      'מרץ',\n      'אפריל',\n      'מאי',\n      'יוני',\n      'יולי',\n      'אוגוסט',\n      'ספטמבר',\n      'אוקטובר',\n      'נובמבר',\n      'דצמבר'\n  ].map(function(v, i) { return { id: i + 1, name: v }; }),\n\n  days: [\n      { abbr: 'א', name: 'ראשון', id: 1 },\n      { abbr: 'ב', name: 'שני', id: 2 },\n      { abbr: 'ג', name: 'שלישי', id: 3 },\n      { abbr: 'ד', name: 'רביעי', id: 4 },\n      { abbr: 'ה', name: 'חמישי', id: 5 },\n      { abbr: 'ו', name: 'שישי', id: 6 },\n      { abbr: 'ש', name: 'שבת', id: 7 }\n  ]\n});\n","angular.module('RouteExplorer').factory('LocationBinder',\n['$location',\nfunction($location) {\n    return {\n        bind: function(scope, scopeProperty, locationProperty, parser, formatter) {\n            scope[scopeProperty] = $location.search()[locationProperty] || null;\n\n            scope.$watch(scopeProperty, function(value) {\n                if (formatter)\n                    value = formatter(value);\n\n                $location.search(locationProperty, value);\n            });\n\n            scope.$watch(function() { return $location.search()[locationProperty] || null; }, function(value) {\n                if (parser)\n                    value = parser(value);\n\n                scope[scopeProperty] = value;\n            });\n        }\n    };\n}]);\n","angular.module('RouteExplorer').factory('TimeParser',\n[\nfunction() {\n    function parseMonth(monthString) {\n        var year = Number(monthString.substr(0, 4));\n        var month = Number(monthString.substr(5, 2));\n        return new Date(year, month - 1, 1);\n    }\n\n    function parsePeriod(periodString) {\n        var parts = periodString.split('-', 2);\n        var from = parseMonth(parts[0]);\n        var to = parts.length > 1 ? parseMonth(parts[1]) : from;\n        var end = new Date(to.getFullYear(), to.getMonth() + 1, 1);\n        return { from: from, to: to, end: end };\n    }\n\n    return {\n        parseMonth: parseMonth,\n        parsePeriod: parsePeriod\n    }\n}]);\n"],"sourceRoot":"/source/"}