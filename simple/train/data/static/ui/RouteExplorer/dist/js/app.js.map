{"version":3,"sources":["RouteExplorer.js","polyfills.js","controllers/AppController.js","controllers/RouteDetailsController.js","controllers/SelectRoutesController.js","controllers/SelectStopsController.js","directives/PercentBar.js","filters/duration.js","services/Layout.js","services/Locale.js","services/LocationBinder.js","services/TimeParser.js"],"names":["app","angular","module","constant","baseDir","config","$routeProvider","env","templateUrl","templateName","when","pageId","controller","resolve","Layout","reloadOnSearch","otherwise","redirectTo","String","prototype","repeat","count","this","TypeError","str","RangeError","Infinity","Math","floor","length","rpt","$scope","$location","share","prefix","url","encodeURIComponent","window","open","$on","e","route","bodyClass","$route","$http","LocationBinder","Locale","TimeParser","getStats","dayId","timeId","statsMap","selectedStats","stats","selectedDay","selectedTime","stops","loadStats","data","formatHour","hour","slice","times","timesMap","i","statGroup","info","hours","week_day","time","id","from","to","push","formatMonth","date","months","getMonth","name","getFullYear","offsetMonth","offset","d","Date","setMonth","offsetPeriod","period","size","end","routeParams","current","params","parsePeriod","startDate","endDate","routeId","stopIds","findRoute","loaded","origin","destination","selectedPeriod","days","selectRouteUrl","previousPeriod","nextPeriod","bounds","getRoutesDateRange","previousPeriodUrl","min","formatPeriod","nextPeriodUrl","max","get","route_id","from_date","getTime","to_date","success","bind","val","Number","stopStats","stopId","stop_id","stopName","stop","findStop","isDayEmpty","day","dayTimes","num_trips","isTimeEmpty","timeStats","tripCount","collapseRoutes","routes","countStopFrequencies","stopFrequencies","routeIndex","findCommonStops","routesCount","commonStops","collapseStops","collapsibleStops","accumulator","collapsed","getStops","findRoutesByPeriod","then","isCollapsed","value","isArray","isOrigin","isDestination","stopText","stopTooltip","map","join","barWidth","percentWidth","routeUrl","$rootScope","generatePeriods","fromDate","toDate","periods","start","getDate","toName","until","reverse","dateRange","startPeriod","endPeriod","formValid","goToRoutes","noRoutes","loading","periodStr","path","dismissError","directive","restrict","scope","type","filter","seconds","negative","trunc","minutes","res","factory","$q","stopsMap","routesMap","loadedPromise","all","response","s","heb_stop_names","names","forEach","r","stop_ids","minDate","min_date","maxDate","max_date","reduce","m","findRoutes","originId","destinationId","matchingRoutes","originIndex","indexOf","destinationIndex","routeStops","Object","keys","sort","r1","r2","defer","routesInDate","reject","msg","promise","service","getRoutes","v","abbr","scopeProperty","locationProperty","parser","formatter","search","$watch","parseMonth","monthString","year","substr","month","periodString","parts","split","f"],"mappings":"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","file":"app.js","sourcesContent":["(function() {\n  var app = angular.module('RouteExplorer', ['ngRoute', 'ui.bootstrap', 'ui.bootstrap.buttons']);\n\n  app.constant('env', {\n    baseDir: '/static/ui/RouteExplorer'\n  });\n\n  app.config(['$routeProvider', 'env',\n  function($routeProvider, env) {\n\n      var templateUrl = function(templateName) {\n          return env.baseDir + '/tpls/' + templateName + '.html';\n      };\n\n      $routeProvider\n          .when('/', {\n              pageId: 'welcome',\n              templateUrl: templateUrl('SelectStops'),\n              controller: 'SelectStopsController',\n              resolve: { 'Layout': 'Layout' }\n          })\n          .when('/about', {\n              pageId: 'about',\n              templateUrl: templateUrl('About')\n          })\n          .when('/:period/select-route/:origin/:destination', {\n              pageId: 'routes',\n              templateUrl: templateUrl('SelectRoute'),\n              controller: 'SelectRouteController',\n              resolve: { 'Layout': 'Layout' }\n          })\n          .when('/:period/routes/:routeId', {\n              pageId: 'route',\n              templateUrl: templateUrl('RouteDetails'),\n              controller: 'RouteDetailsController',\n              resolve: { 'Layout': 'Layout' },\n              reloadOnSearch: false\n          })\n          .otherwise({\n              redirectTo: '/'\n          });\n  }]);\n})();\n","// String.repeat polyfill\n// taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Polyfill\nif (!String.prototype.repeat) {\n  String.prototype.repeat = function(count) {\n    'use strict';\n    if (this === null) {\n      throw new TypeError('can\\'t convert ' + this + ' to object');\n    }\n    var str = '' + this;\n    count = +count;\n    if (count != count) {\n      count = 0;\n    }\n    if (count < 0) {\n      throw new RangeError('repeat count must be non-negative');\n    }\n    if (count == Infinity) {\n      throw new RangeError('repeat count must be less than infinity');\n    }\n    count = Math.floor(count);\n    if (str.length === 0 || count === 0) {\n      return '';\n    }\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\n    // main part. But anyway, most current (August 2014) browsers can't handle\n    // strings 1 << 28 chars or longer, so:\n    if (str.length * count >= 1 << 28) {\n      throw new RangeError('repeat count must not overflow maximum string size');\n    }\n    var rpt = '';\n    for (;;) {\n      if ((count & 1) == 1) {\n        rpt += str;\n      }\n      count >>>= 1;\n      if (count === 0) {\n        break;\n      }\n      str += str;\n    }\n    return rpt;\n  };\n}\n","angular.module('RouteExplorer').controller('AppController',\n['$scope', '$location',\nfunction($scope, $location) {\n    $scope.share = function(prefix) {\n        var url = prefix + encodeURIComponent('http://otrain.org/#' + $location.url());\n        window.open(url, 'sharePopup', 'width=600,height=550,top=100,left=100,location=no,scrollbar=no,status=no,menubar=no');\n    };\n\n    $scope.$on('$routeChangeSuccess', function(e, route) {\n        $scope.bodyClass = route.pageId ? 'rex-page-' + route.pageId : null;\n    });\n}]);\n","angular.module('RouteExplorer').controller('RouteDetailsController',\n['$scope', '$route', '$http', '$location', 'LocationBinder', 'Layout', 'Locale', 'TimeParser',\nfunction($scope, $route, $http, $location, LocationBinder, Layout, Locale, TimeParser) {\n    var routeParams = $route.current.params;\n\n    var period = TimeParser.parsePeriod(routeParams.period);\n    var startDate = period.from;\n    var endDate = period.end;\n\n    var routeId = routeParams.routeId;\n    var stopIds = Layout.findRoute(routeId).stops;\n    var statsMap = {};\n\n    $scope.loaded = false;\n    $scope.stopIds = stopIds;\n    $scope.origin = stopIds[0];\n    $scope.destination = stopIds[stopIds.length - 1];\n\n    $scope.selectedPeriod = formatMonth(period.from);\n    if (period.to > period.from) {\n        $scope.selectedPeriod += \" \\u2014 \" + formatMonth(period.to)\n    }\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    $scope.selectRouteUrl = '#/' + routeParams.period + '/select-route/' + $scope.origin + '/' + $scope.destination;\n\n    var previousPeriod = offsetPeriod(period, -1);\n    var nextPeriod = offsetPeriod(period, +1);\n    var bounds = Layout.getRoutesDateRange();\n\n    $scope.previousPeriodUrl = bounds.min < previousPeriod.from ? '#/' + TimeParser.formatPeriod(previousPeriod) + '/routes/' + routeId : null;\n    $scope.nextPeriodUrl = bounds.max > nextPeriod.to ? '#/' + TimeParser.formatPeriod(nextPeriod) + '/routes/' + routeId : null;\n\n    $http.get('/api/route-info-full', { params: { route_id: routeId, from_date: startDate.getTime(), to_date: endDate.getTime() } })\n        .success(function(data) {\n            loadStats(data);\n            $scope.loaded = true;\n        });\n\n    LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n\n    $scope.stopStats = function(stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId)\n                return stats[i];\n        }\n        return null;\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n            return stop.name;\n    };\n\n    $scope.isDayEmpty = function(day) {\n        var dayId = day.id;\n        var dayTimes = statsMap[dayId];\n\n        if (!dayTimes)\n            return true;\n\n        for (var time in dayTimes)\n            if (dayTimes[time].info.num_trips > 0)\n                return false;\n\n        return true;\n    };\n\n    $scope.isTimeEmpty = function(time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0)\n            return false;\n\n        return true;\n    };\n\n    $scope.tripCount = function(dayId, timeId) {\n      var stats = getStats(dayId, timeId);\n      if (!stats)\n        return 0;\n\n      return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n      dayId = dayId || 'all';\n      timeId = timeId || 'all';\n      return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats)\n          return stats.stops;\n\n        return [];\n    }\n\n    function loadStats(data) {\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId])\n                statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n\n        function formatHour(hour) {\n            return ('0' + hour % 24 + '').slice(-2) + ':00';\n        }\n    }\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n\n    function offsetMonth(date, offset) {\n        var d = new Date(date);\n        d.setMonth(d.getMonth() + offset);\n        return d;\n    }\n\n    function offsetPeriod(period, offset) {\n        size =\n            (period.to.getFullYear() - period.from.getFullYear()) * 12 +\n            period.to.getMonth() - period.from.getMonth() + 1;\n\n        return {\n            from: offsetMonth(period.from, size * offset),\n            to: offsetMonth(period.to, size * offset),\n            end: offsetMonth(period.end, size * offset)\n        };\n    }\n}]);\n","angular.module('RouteExplorer').controller('SelectRouteController',\n['$scope', '$location', '$route', 'Layout', 'TimeParser',\nfunction($scope, $location, $route, Layout, TimeParser) {\n    $scope.stops = Layout.getStops();\n    var period = TimeParser.parsePeriod($route.current.params.period);\n    var origin = Layout.findStop($route.current.params.origin);\n    var destination = Layout.findStop($route.current.params.destination);\n\n    Layout.findRoutesByPeriod(origin.id, destination.id, period.from, period.end).then(function(routes) {\n        if (routes.length > 1)\n            collapseRoutes(routes);\n        $scope.routes = routes;\n    });\n\n    function stopName(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    }\n\n    $scope.isCollapsed = function(value) {\n        return angular.isArray(value);\n    };\n\n    $scope.isOrigin = function(stopId) {\n        return stopId == origin.id;\n    };\n\n    $scope.isDestination = function(stopId) {\n        return stopId == destination.id;\n    };\n\n    $scope.stopText = function(stopId) {\n        if ($scope.isCollapsed(stopId))\n            return \"\\u2022\".repeat(stopId.length);\n\n        return stopName(stopId);\n    };\n\n    $scope.stopTooltip = function(stopId) {\n        if (!$scope.isCollapsed(stopId))\n            return null;\n\n        return stopId.map(stopName).join(\", \");\n    };\n\n    $scope.barWidth = function(route) {\n        var percentWidth = route.count * 100.0 / $scope.routes[0].count;\n\n        if (percentWidth < 1.0)\n            return \"1px\";\n\n        return percentWidth + \"%\";\n    };\n\n    $scope.routeUrl = function(route) {\n        return '/#/' + $route.current.params.period + '/routes/' + route.id;\n    };\n\n    function collapseRoutes(routes) {\n        var collapsibleStops = findCommonStops(countStopFrequencies(routes), routes.length);\n        delete collapsibleStops[origin.id];\n        delete collapsibleStops[destination.id];\n\n        for (var routeIndex in routes) {\n            routes[routeIndex].stops = collapseStops(routes[routeIndex].stops, collapsibleStops);\n        }\n\n        function countStopFrequencies(routes) {\n            var stopFrequencies = {};\n            for (var routeIndex in routes) {\n                var route = routes[routeIndex];\n                for (var i in route.stops) {\n                    var stopId = route.stops[i];\n                    if (!stopFrequencies[stopId])\n                        stopFrequencies[stopId] = 0;\n                    stopFrequencies[stopId]++;\n                }\n            }\n\n            return stopFrequencies;\n        }\n\n        function findCommonStops(stopFrequencies, routesCount) {\n            var commonStops = {};\n            for (var stopId in stopFrequencies)\n                if (stopFrequencies[stopId] == routesCount)\n                    commonStops[stopId] = true;\n\n            return commonStops;\n        }\n\n        function collapseStops(stops, collapsibleStops) {\n            var collapsed = [];\n            var accumulator;\n\n            for (var i in stops) {\n                var stopId = stops[i];\n                if (i > 0 && i < stops.length - 1 && collapsibleStops[stopId]) {\n                    if (!accumulator) {\n                        accumulator = [];\n                        collapsed.push(accumulator);\n                    }\n                    accumulator.push(stopId);\n                } else {\n                    accumulator = null;\n                    collapsed.push(stopId);\n                }\n            }\n\n            return collapsed;\n        }\n    }\n}]);\n","angular.module('RouteExplorer').controller('SelectStopsController',\n['$scope', '$rootScope', '$location', 'Layout', 'Locale', 'TimeParser',\nfunction($scope, $rootScope, $location, Layout, Locale, TimeParser) {\n    $scope.stops = Layout.getStops();\n    $scope.origin = null;\n    $scope.destination = null;\n    $scope.months = Locale.months;\n\n    var dateRange = Layout.getRoutesDateRange();\n    $scope.periods = generatePeriods(dateRange.min, dateRange.max);\n    $scope.startPeriod = $scope.periods[0];\n    $scope.endPeriod = $scope.periods[0];\n\n    $scope.formValid = function() {\n        return (\n            !!$scope.origin &&\n            !!$scope.destination &&\n            $scope.origin != $scope.destination &&\n            $scope.startPeriod.from <= $scope.endPeriod.to\n        );\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    };\n\n    $scope.goToRoutes = function() {\n        $scope.noRoutes = false;\n        $scope.loading = true;\n        var period = {\n            from: $scope.startPeriod.from,\n            to: $scope.endPeriod.to,\n            end: $scope.endPeriod.end,\n        };\n        var fromDate = period.from;\n        var toDate = period.end;\n        var periodStr = TimeParser.formatPeriod(period);\n        Layout.findRoutesByPeriod($scope.origin.id, $scope.destination.id, fromDate, toDate)\n            .then(function(routes) {\n                if (routes.length === 0) {\n                    $scope.noRoutes = true;\n                } else if (routes.length == 1) {\n                    $location.path('/' + periodStr + '/routes/' + routes[0].id);\n                } else {\n                    $location.path('/' + periodStr + '/select-route/' + $scope.origin.id + '/' + $scope.destination.id);\n                }\n            })\n            .finally(function() {\n                $scope.loading = false;\n            });\n    };\n\n    $scope.dismissError = function() {\n        $scope.noRoutes = false;\n    };\n\n    function generatePeriods(fromDate, toDate) {\n      // fromDate=1970-1-1 due to a data bug. This is a quick temporary workaround\n      if (fromDate.getFullYear() < 2013) fromDate = new Date(2013, 0, 1);\n\n      var periods = [];\n      var start = new Date(fromDate.getFullYear(), fromDate.getMonth(), 1);\n      while (start < toDate) {\n        end = new Date(start.getFullYear(), start.getMonth() + 1, start.getDate());\n        var period = {\n          from: start,\n          to: start,\n          end: end,\n          name: Locale.months[start.getMonth()].name + \" \" + start.getFullYear()\n        };\n        period.toName = Locale.until + period.name;\n        periods.push(period);\n        start = end;\n      }\n      periods.reverse();\n      return periods;\n    }\n}]);\n","angular.module('RouteExplorer').directive(\"rexPercentBar\",\n['env',\nfunction(env) {\n    return {\n        restrict: 'E',\n        scope: {\n          value: '=value',\n          type: '=type'\n        },\n        templateUrl: env.baseDir + '/tpls/PercentBar.html'\n      };\n}]);\n","angular.module('RouteExplorer').filter('duration', function() {\n    return function(seconds) {\n        var negative = false;\n        seconds = Math.trunc(seconds);\n        if (seconds < 0) {\n            negative = true;\n            seconds = -seconds;\n        }\n\n        var minutes = Math.trunc(seconds / 60);\n        seconds -= minutes * 60;\n        var hours = Math.trunc(minutes / 60);\n        minutes -= hours * 60;\n\n        if (seconds < 10) seconds = '0' + seconds;\n        if (minutes < 10 && hours !== 0) minutes = '0' + minutes;\n\n        var res = minutes + ':' + seconds;\n        if (hours !== 0)\n            res = hours + ':' + res;\n\n        if (negative)\n            res = '-' + res;\n\n        return res;\n    };\n});\n","angular.module('RouteExplorer').factory('Layout',\n['$http', '$q',\nfunction($http, $q) {\n    var self = this;\n    var stops = [];\n    var stopsMap = {};\n    var routes = [];\n    var routesMap = {};\n\n    var loadedPromise = $q.all([\n        $http.get('/api/stops')\n            .then(function(response) {\n                stops = response.data.map(function(s) { return { id: s.stop_id, name: s.heb_stop_names[0], names: s.heb_stop_names }; });\n                stops.forEach(function(s) { stopsMap[s.id] = s; });\n            }),\n\n        $http.get('/api/all-routes')\n            .then(function(response) {\n                routes = response.data.map(function(r) { return {\n                    id: r.id,\n                    stops: r.stop_ids,\n                    count: r.count,\n                    minDate: new Date(r.min_date),\n                    maxDate: new Date(r.max_date)\n                }; });\n\n                routesMap = routes.reduce(function(m, r) { m[r.id] = r; return m; }, {});\n            })\n    ]);\n\n    var findStop = function(stopId) {\n        return stopsMap[stopId] || null;\n    };\n\n    var findRoutes = function(routes, originId, destinationId) {\n        var matchingRoutes = {};\n\n        routes.forEach(function(r) {\n            var originIndex = r.stops.indexOf(originId);\n            var destinationIndex = r.stops.indexOf(destinationId);\n\n            if (originIndex < 0 || destinationIndex < 0)\n                return;\n\n            if (originIndex > destinationIndex)\n                return;\n\n            var routeStops = r.stops;\n            var routeId = r.id;\n\n            if (routeId in matchingRoutes)\n                matchingRoutes[routeId].count += r.count;\n            else {\n                matchingRoutes[routeId] = {\n                    id: routeId,\n                    stops: routeStops,\n                    count: r.count\n                };\n            }\n        });\n\n        matchingRoutes = Object.keys(matchingRoutes).map(function(routeId) { return matchingRoutes[routeId]; });\n        matchingRoutes.sort(function(r1, r2) { return r2.count - r1.count; });\n        return matchingRoutes;\n    };\n\n    var findRoutesByPeriod = function(origin, destination, from, to) {\n        // TODO use minDate and maxDate from our cached routes to avoid the http request\n\n        var d = $q.defer();\n        var matchingRoutes = findRoutes(routes, origin, destination);\n        if (matchingRoutes.length === 0) {\n            d.resolve([]);\n        } else {\n            var fromDate = from;\n            var toDate = to;\n\n            $http.get('/api/all-routes-by-date', {\n                params: {\n                    from_date: fromDate.getTime(),\n                    to_date: toDate.getTime()\n                }\n            }).then(function(response) {\n                var routesInDate = response.data.map(function(r) {\n                    return {\n                        id: r.id,\n                        stops: r.stop_ids,\n                        count: r.count\n                    };\n                });\n                d.resolve(findRoutes(routesInDate, origin, destination));\n            }, function(response) { d.reject({ 'msg': 'Error fetching routes', 'response': response }); });\n        }\n\n        return d.promise;\n    };\n\n    var findRoute = function(routeId) {\n        return routesMap[routeId] || null;\n    };\n\n    var getRoutesDateRange = function() {\n        var max = new Date(1900, 0, 1);\n        var min = new Date(2100, 0, 1);\n\n        for (var i in routes) {\n            route = routes[i];\n            if (route.count === 0)\n              continue;\n\n            if (route.minDate && route.minDate < min) min = route.minDate;\n            if (route.maxDate && route.maxDate > max) max = route.maxDate;\n        }\n        return {\n          min: min,\n          max: max\n        };\n    };\n\n    service = {\n        getStops: function() { return stops; },\n        getRoutes: function() { return routes; },\n        findRoute: findRoute,\n        findStop: findStop,\n        findRoutes: function(origin, destination) { return findRoutes(routes, origin, destination); },\n        findRoutesByPeriod: findRoutesByPeriod,\n        getRoutesDateRange: getRoutesDateRange\n    };\n\n    return loadedPromise.then(function() { return service; });\n}]);\n","angular.module('RouteExplorer').constant('Locale', {\n  months: [\n      'ינואר',\n      'פברואר',\n      'מרץ',\n      'אפריל',\n      'מאי',\n      'יוני',\n      'יולי',\n      'אוגוסט',\n      'ספטמבר',\n      'אוקטובר',\n      'נובמבר',\n      'דצמבר'\n  ].map(function(v, i) { return { id: i + 1, name: v }; }),\n\n  days: [\n      { abbr: 'א', name: 'ראשון', id: 1 },\n      { abbr: 'ב', name: 'שני', id: 2 },\n      { abbr: 'ג', name: 'שלישי', id: 3 },\n      { abbr: 'ד', name: 'רביעי', id: 4 },\n      { abbr: 'ה', name: 'חמישי', id: 5 },\n      { abbr: 'ו', name: 'שישי', id: 6 },\n      { abbr: 'ש', name: 'שבת', id: 7 }\n  ],\n  until: 'עד ל'\n});\n","angular.module('RouteExplorer').factory('LocationBinder',\n['$location',\nfunction($location) {\n    return {\n        bind: function(scope, scopeProperty, locationProperty, parser, formatter) {\n            scope[scopeProperty] = $location.search()[locationProperty] || null;\n\n            scope.$watch(scopeProperty, function(value) {\n                if (formatter)\n                    value = formatter(value);\n\n                $location.search(locationProperty, value);\n            });\n\n            scope.$watch(function() { return $location.search()[locationProperty] || null; }, function(value) {\n                if (parser)\n                    value = parser(value);\n\n                scope[scopeProperty] = value;\n            });\n        }\n    };\n}]);\n","angular.module('RouteExplorer').factory('TimeParser',\n[\nfunction() {\n    function parseMonth(monthString) {\n        var year = Number(monthString.substr(0, 4));\n        var month = Number(monthString.substr(4, 2));\n        return new Date(year, month - 1, 1);\n    }\n\n    function parsePeriod(periodString) {\n        var parts = periodString.split('-', 2);\n        var from = parseMonth(parts[0]);\n        var to = parts.length > 1 ? parseMonth(parts[1]) : from;\n        var end = new Date(to.getFullYear(), to.getMonth() + 1, 1);\n        return { from: from, to: to, end: end };\n    }\n\n    function formatMonth(date) {\n        return date.getFullYear() + ('0' + (date.getMonth() + 1)).slice(-2);\n    }\n\n    function formatPeriod(period) {\n        var f = formatMonth(period.from);\n        if (period.from < period.to)\n            f += '-' + formatMonth(period.to);\n\n        return f;\n    }\n\n    return {\n        parseMonth: parseMonth,\n        parsePeriod: parsePeriod,\n        formatMonth: formatMonth,\n        formatPeriod: formatPeriod\n    }\n}]);\n"],"sourceRoot":"/source/"}