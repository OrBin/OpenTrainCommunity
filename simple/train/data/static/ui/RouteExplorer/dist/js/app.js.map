{"version":3,"sources":["polyfills.js","RouteExplorer.js","directives/PercentBar.js","controllers/AppController.js","controllers/RouteDetailsController.js","controllers/SelectRoutesController.js","controllers/SelectStopsController.js","filters/duration.js","services/Layout.js","services/LocationBinder.js"],"names":["String","prototype","repeat","count","this","TypeError","str","RangeError","Infinity","Math","floor","length","rpt","app","angular","module","constant","baseDir","config","$routeProvider","env","templateUrl","templateName","when","pageId","controller","resolve","Layout","reloadOnSearch","otherwise","redirectTo","directive","restrict","scope","value","type","$scope","$location","share","prefix","url","encodeURIComponent","window","open","$on","e","route","bodyClass","$route","$http","LocationBinder","selectedStats","dayId","selectedDay","timeId","selectedTime","stats","statsMap","stops","loadStats","data","formatHour","hour","slice","times","timesMap","i","statGroup","info","hours","week_day","time","id","from","to","push","year","current","params","month","routeId","stopIds","findRoute","loaded","origin","destination","days","abbr","title","fromDate","Date","toDate","get","route_id","from_date","getTime","to_date","success","bind","val","Number","stopStats","stopId","stop_id","stopName","stop","findStop","name","isDayEmpty","day","dayTimes","num_trips","isTimeEmpty","timeStats","collapseRoutes","routes","countStopFrequencies","stopFrequencies","routeIndex","findCommonStops","routesCount","commonStops","collapseStops","collapsibleStops","accumulator","collapsed","getStops","findRoutesByDate","then","isCollapsed","isArray","isOrigin","isDestination","stopText","stopTooltip","map","join","barWidth","percentWidth","routeUrl","$rootScope","months","v","today","lastMonth","getFullYear","getMonth","minYear","maxYear","formValid","goToRoutes","noRoutes","loading","path","dismissError","filter","seconds","negative","trunc","minutes","res","factory","$q","stopsMap","routesMap","loadedPromise","all","response","s","heb_stop_names","names","forEach","r","stop_ids","reduce","m","findRoutes","originId","destinationId","matchingRoutes","originIndex","indexOf","destinationIndex","routeStops","Object","keys","sort","r1","r2","d","defer","routesInDate","reject","msg","promise","service","getRoutes","scopeProperty","locationProperty","parser","formatter","search","$watch"],"mappings":"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","file":"app.js","sourcesContent":["// String.repeat polyfill\r\n// taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Polyfill\r\nif (!String.prototype.repeat) {\r\n  String.prototype.repeat = function(count) {\r\n    'use strict';\r\n    if (this === null) {\r\n      throw new TypeError('can\\'t convert ' + this + ' to object');\r\n    }\r\n    var str = '' + this;\r\n    count = +count;\r\n    if (count != count) {\r\n      count = 0;\r\n    }\r\n    if (count < 0) {\r\n      throw new RangeError('repeat count must be non-negative');\r\n    }\r\n    if (count == Infinity) {\r\n      throw new RangeError('repeat count must be less than infinity');\r\n    }\r\n    count = Math.floor(count);\r\n    if (str.length === 0 || count === 0) {\r\n      return '';\r\n    }\r\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\r\n    // main part. But anyway, most current (August 2014) browsers can't handle\r\n    // strings 1 << 28 chars or longer, so:\r\n    if (str.length * count >= 1 << 28) {\r\n      throw new RangeError('repeat count must not overflow maximum string size');\r\n    }\r\n    var rpt = '';\r\n    for (;;) {\r\n      if ((count & 1) == 1) {\r\n        rpt += str;\r\n      }\r\n      count >>>= 1;\r\n      if (count === 0) {\r\n        break;\r\n      }\r\n      str += str;\r\n    }\r\n    return rpt;\r\n  };\r\n}\r\n","(function() {\r\n  var app = angular.module('RouteExplorer', ['ngRoute', 'ui.bootstrap', 'ui.bootstrap.buttons']);\r\n\r\n  app.constant('env', {\r\n    baseDir: '/static/ui/RouteExplorer'\r\n  });\r\n\r\n  app.config(['$routeProvider', 'env',\r\n  function($routeProvider, env) {\r\n\r\n      var templateUrl = function(templateName) {\r\n          return env.baseDir + '/tpls/' + templateName + '.html';\r\n      };\r\n\r\n      $routeProvider\r\n          .when('/', {\r\n              pageId: 'welcome',\r\n              templateUrl: templateUrl('SelectStops'),\r\n              controller: 'SelectStopsController',\r\n              resolve: { 'Layout': 'Layout' }\r\n          })\r\n          .when('/about', {\r\n              pageId: 'about',\r\n              templateUrl: templateUrl('About'),\r\n          })\r\n          .when('/:year/:month/select-route/:origin/:destination', {\r\n              pageId: 'routes',\r\n              templateUrl: templateUrl('SelectRoute'),\r\n              controller: 'SelectRouteController',\r\n              resolve: { 'Layout': 'Layout' }\r\n          })\r\n          .when('/:year/:month/routes/:routeId', {\r\n              pageId: 'route',\r\n              templateUrl: templateUrl('RouteDetails'),\r\n              controller: 'RouteDetailsController',\r\n              resolve: { 'Layout': 'Layout' },\r\n              reloadOnSearch: false\r\n          })\r\n          .otherwise({\r\n              redirectTo: '/'\r\n          });\r\n  }]);\r\n})();\r\n","angular.module('RouteExplorer').directive(\"rexPercentBar\",\r\n['env',\r\nfunction(env) {\r\n    return {\r\n        restrict: 'E',\r\n        scope: {\r\n          value: '=value',\r\n          type: '=type'\r\n        },\r\n        templateUrl: env.baseDir + '/tpls/PercentBar.html'\r\n      };\r\n}]);\r\n","angular.module('RouteExplorer').controller('AppController',\r\n['$scope', '$location',\r\nfunction($scope, $location) {\r\n    $scope.share = function(prefix) {\r\n        var url = prefix + encodeURIComponent('http://otrain.org/#' + $location.url());\r\n        window.open(url, 'sharePopup', 'width=600,height=550,top=100,left=100,location=no,scrollbar=no,status=no,menubar=no');\r\n    };\r\n\r\n    $scope.$on('$routeChangeSuccess', function(e, route) {\r\n        $scope.bodyClass = route.pageId ? 'rex-page-' + route.pageId : null;\r\n    });\r\n}]);\r\n","angular.module('RouteExplorer').controller('RouteDetailsController',\r\n['$scope', '$route', '$http', '$location', 'LocationBinder', 'Layout',\r\nfunction($scope, $route, $http, $location, LocationBinder, Layout) {\r\n    var year = $route.current.params.year;\r\n    var month = $route.current.params.month;\r\n    var routeId = $route.current.params.routeId;\r\n    var stopIds = Layout.findRoute(routeId).stops;\r\n    var statsMap = {};\r\n\r\n    $scope.loaded = false;\r\n    $scope.stopIds = stopIds;\r\n    $scope.origin = stopIds[0];\r\n    $scope.destination = stopIds[stopIds.length - 1];\r\n    $scope.year = year;\r\n    $scope.month = month;\r\n\r\n    $scope.selectedDay = null;\r\n    $scope.days = [\r\n        { abbr: 'א', title: 'ראשון', id: 1 },\r\n        { abbr: 'ב', title: 'שני', id: 2 },\r\n        { abbr: 'ג', title: 'שלישי', id: 3 },\r\n        { abbr: 'ד', title: 'רביעי', id: 4 },\r\n        { abbr: 'ה', title: 'חמישי', id: 5 },\r\n        { abbr: 'ו', title: 'שישי', id: 6 },\r\n        { abbr: 'ש', title: 'שבת', id: 7 }\r\n    ];\r\n\r\n    $scope.selectedTime = null;\r\n    $scope.times = [];\r\n\r\n    var fromDate = new Date(year, month - 1, 1);\r\n    var toDate = new Date(year, month, 1); // Date constructor wraps around so this works on December as well\r\n\r\n    $http.get('/api/route-info-full', { params: { route_id: routeId, from_date: fromDate.getTime(), to_date: toDate.getTime() } })\r\n        .success(function(data) {\r\n            loadStats(data);\r\n            $scope.loaded = true;\r\n        });\r\n\r\n    LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\r\n    LocationBinder.bind($scope, 'selectedTime', 'time');\r\n\r\n    $scope.stopStats = function(stopId) {\r\n        var stats = selectedStats();\r\n        for (var i in stats) {\r\n            if (stats[i].stop_id == stopId)\r\n                return stats[i];\r\n        }\r\n        return null;\r\n    };\r\n\r\n    $scope.stopName = function(stopId) {\r\n        var stop = Layout.findStop(stopId);\r\n        if (!stop)\r\n            return null;\r\n\r\n            return stop.name;\r\n    };\r\n\r\n    $scope.isDayEmpty = function(day) {\r\n        var dayId = day.id;\r\n        var dayTimes = statsMap[dayId];\r\n\r\n        if (!dayTimes)\r\n            return true;\r\n\r\n        for (var time in dayTimes)\r\n            if (dayTimes[time].info.num_trips > 0)\r\n                return false;\r\n\r\n        return true;\r\n    };\r\n\r\n    $scope.isTimeEmpty = function(time) {\r\n        var dayId = $scope.selectedDay || 'all';\r\n        var timeId = time.id;\r\n\r\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\r\n        if (timeStats && timeStats.info.num_trips > 0)\r\n            return false;\r\n\r\n        return true;\r\n    };\r\n\r\n    function selectedStats() {\r\n        var dayId = $scope.selectedDay || 'all';\r\n        var timeId = $scope.selectedTime || 'all';\r\n\r\n        var stats = statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId].stops : [];\r\n        return stats;\r\n    }\r\n\r\n    function loadStats(data) {\r\n        $scope.times = [];\r\n        var timesMap = {};\r\n\r\n        for (var i in data) {\r\n            var statGroup = data[i];\r\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\r\n            var dayId = statGroup.info.week_day;\r\n\r\n            if (!statsMap[dayId])\r\n                statsMap[dayId] = {};\r\n\r\n            statsMap[dayId][timeId] = statGroup;\r\n\r\n            if (timeId != 'all' && !timesMap[timeId]) {\r\n                var time = {\r\n                    id: timeId,\r\n                    from: formatHour(statGroup.info.hours[0]),\r\n                    to: formatHour(statGroup.info.hours[1])\r\n                };\r\n                timesMap[timeId] = time;\r\n                $scope.times.push(time);\r\n            }\r\n        }\r\n\r\n        function formatHour(hour) {\r\n            return ('0' + hour % 24 + '').slice(-2) + ':00';\r\n        }\r\n    }\r\n}]);\r\n","angular.module('RouteExplorer').controller('SelectRouteController',\r\n['$scope', '$location', '$route', 'Layout',\r\nfunction($scope, $location, $route, Layout) {\r\n    $scope.stops = Layout.getStops();\r\n    var year = $route.current.params.year;\r\n    var month = $route.current.params.month;\r\n    var origin = Layout.findStop($route.current.params.origin);\r\n    var destination = Layout.findStop($route.current.params.destination);\r\n\r\n    Layout.findRoutesByDate(origin.id, destination.id, year, month).then(function(routes) {\r\n        if (routes.length > 1)\r\n            collapseRoutes(routes);\r\n        $scope.routes = routes;\r\n    });\r\n\r\n    function stopName(stopId) {\r\n        var stop = Layout.findStop(stopId);\r\n        if (!stop)\r\n            return null;\r\n\r\n        return stop.name;\r\n    }\r\n\r\n    $scope.isCollapsed = function(value) {\r\n        return angular.isArray(value);\r\n    };\r\n\r\n    $scope.isOrigin = function(stopId) {\r\n        return stopId == origin.id;\r\n    };\r\n\r\n    $scope.isDestination = function(stopId) {\r\n        return stopId == destination.id;\r\n    };\r\n\r\n    $scope.stopText = function(stopId) {\r\n        if ($scope.isCollapsed(stopId))\r\n            return \"\\u2022\".repeat(stopId.length);\r\n\r\n        return stopName(stopId);\r\n    };\r\n\r\n    $scope.stopTooltip = function(stopId) {\r\n        if (!$scope.isCollapsed(stopId))\r\n            return null;\r\n\r\n        return stopId.map(stopName).join(\", \");\r\n    };\r\n\r\n    $scope.barWidth = function(route) {\r\n        var percentWidth = route.count * 100.0 / $scope.routes[0].count;\r\n\r\n        if (percentWidth < 1.0)\r\n            return \"1px\";\r\n\r\n        return percentWidth + \"%\";\r\n    };\r\n\r\n    $scope.routeUrl = function(route) {\r\n        return '/#/' + year + '/' + month + '/routes/' + route.id;\r\n    };\r\n\r\n    function collapseRoutes(routes) {\r\n        var collapsibleStops = findCommonStops(countStopFrequencies(routes), routes.length);\r\n        delete collapsibleStops[origin.id];\r\n        delete collapsibleStops[destination.id];\r\n\r\n        for (var routeIndex in routes) {\r\n            routes[routeIndex].stops = collapseStops(routes[routeIndex].stops, collapsibleStops);\r\n        }\r\n\r\n        function countStopFrequencies(routes) {\r\n            var stopFrequencies = {};\r\n            for (var routeIndex in routes) {\r\n                var route = routes[routeIndex];\r\n                for (var i in route.stops) {\r\n                    var stopId = route.stops[i];\r\n                    if (!stopFrequencies[stopId])\r\n                        stopFrequencies[stopId] = 0;\r\n                    stopFrequencies[stopId]++;\r\n                }\r\n            }\r\n\r\n            return stopFrequencies;\r\n        }\r\n\r\n        function findCommonStops(stopFrequencies, routesCount) {\r\n            var commonStops = {};\r\n            for (var stopId in stopFrequencies)\r\n                if (stopFrequencies[stopId] == routesCount)\r\n                    commonStops[stopId] = true;\r\n\r\n            return commonStops;\r\n        }\r\n\r\n        function collapseStops(stops, collapsibleStops) {\r\n            var collapsed = [];\r\n            var accumulator;\r\n\r\n            for (var i in stops) {\r\n                var stopId = stops[i];\r\n                if (i > 0 && i < stops.length - 1 && collapsibleStops[stopId]) {\r\n                    if (!accumulator) {\r\n                        accumulator = [];\r\n                        collapsed.push(accumulator);\r\n                    }\r\n                    accumulator.push(stopId);\r\n                } else {\r\n                    accumulator = null;\r\n                    collapsed.push(stopId);\r\n                }\r\n            }\r\n\r\n            return collapsed;\r\n        }\r\n    }\r\n}]);\r\n","angular.module('RouteExplorer').controller('SelectStopsController',\r\n['$scope', '$rootScope', '$location', 'Layout',\r\nfunction($scope, $rootScope, $location, Layout) {\r\n    $scope.stops = Layout.getStops();\r\n    $scope.origin = null;\r\n    $scope.destination = null;\r\n    $scope.months = [\r\n        'ינואר',\r\n        'פברואר',\r\n        'מרץ',\r\n        'אפריל',\r\n        'מאי',\r\n        'יוני',\r\n        'יולי',\r\n        'אוגוסט',\r\n        'ספטמבר',\r\n        'אוקטובר',\r\n        'נובמבר',\r\n        'דצמבר'\r\n    ].map(function(v, i) { return { value: i + 1, name: v }; });\r\n\r\n    var today = new Date();\r\n    var lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\r\n    $scope.month = lastMonth.getMonth() + 1; // We're using 1-based months vs JavaScript's 0-based\r\n    $scope.year = lastMonth.getFullYear();\r\n    $scope.minYear = 2013;\r\n    $scope.maxYear = $scope.year;\r\n\r\n    $scope.formValid = function() {\r\n        return (\r\n            !!$scope.origin &&\r\n            !!$scope.destination &&\r\n            $scope.origin != $scope.destination\r\n        );\r\n    };\r\n\r\n    $scope.stopName = function(stopId) {\r\n        var stop = Layout.findStop(stopId);\r\n        if (!stop)\r\n            return null;\r\n\r\n        return stop.name;\r\n    };\r\n\r\n    $scope.goToRoutes = function() {\r\n        $scope.noRoutes = false;\r\n        $scope.loading = true;\r\n        Layout.findRoutesByDate($scope.origin.id, $scope.destination.id, $scope.year, $scope.month)\r\n            .then(function(routes) {\r\n                if (routes.length === 0) {\r\n                    $scope.noRoutes = true;\r\n                } else if (routes.length == 1) {\r\n                    $location.path('/' + $scope.year + '/' + $scope.month + '/routes/' + routes[0].id);\r\n                } else {\r\n                    $location.path('/' + $scope.year + '/' + $scope.month + '/select-route/' + $scope.origin.id + '/' + $scope.destination.id);\r\n                }\r\n            })\r\n            .finally(function() {\r\n                $scope.loading = false;\r\n            });\r\n    };\r\n\r\n    $scope.dismissError = function() {\r\n        $scope.noRoutes = false;\r\n    };\r\n}]);\r\n","angular.module('RouteExplorer').filter('duration', function() {\r\n    return function(seconds) {\r\n        var negative = false;\r\n        seconds = Math.trunc(seconds);\r\n        if (seconds < 0) {\r\n            negative = true;\r\n            seconds = -seconds;\r\n        }\r\n\r\n        var minutes = Math.trunc(seconds / 60);\r\n        seconds -= minutes * 60;\r\n        var hours = Math.trunc(minutes / 60);\r\n        minutes -= hours * 60;\r\n\r\n        if (seconds < 10) seconds = '0' + seconds;\r\n        if (minutes < 10 && hours !== 0) minutes = '0' + minutes;\r\n\r\n        var res = minutes + ':' + seconds;\r\n        if (hours !== 0)\r\n            res = hours + ':' + res;\r\n\r\n        if (negative)\r\n            res = '-' + res;\r\n\r\n        return res;\r\n    };\r\n});\r\n","angular.module('RouteExplorer').factory('Layout',\r\n['$http', '$q',\r\nfunction($http, $q) {\r\n    var self = this;\r\n    var stops = [];\r\n    var stopsMap = {};\r\n    var routes = [];\r\n    var routesMap = {};\r\n\r\n    var loadedPromise = $q.all([\r\n        $http.get('/api/stops')\r\n            .then(function(response) {\r\n                stops = response.data.map(function(s) { return { id: s.stop_id, name: s.heb_stop_names[0], names: s.heb_stop_names }; });\r\n                stops.forEach(function(s) { stopsMap[s.id] = s; });\r\n            }),\r\n\r\n        $http.get('/api/all-routes')\r\n            .then(function(response) {\r\n                routes = response.data.map(function(r) { return {\r\n                    id: r.id,\r\n                    stops: r.stop_ids,\r\n                    count: r.count\r\n                }; });\r\n\r\n                routesMap = routes.reduce(function(m, r) { m[r.id] = r; return m; }, {});\r\n            })\r\n    ]);\r\n\r\n    var findStop = function(stopId) {\r\n        return stopsMap[stopId] || null;\r\n    };\r\n\r\n    var findRoutes = function(routes, originId, destinationId) {\r\n        var matchingRoutes = {};\r\n\r\n        routes.forEach(function(r) {\r\n            var originIndex = r.stops.indexOf(originId);\r\n            var destinationIndex = r.stops.indexOf(destinationId);\r\n\r\n            if (originIndex < 0 || destinationIndex < 0)\r\n                return;\r\n\r\n            if (originIndex > destinationIndex)\r\n                return;\r\n\r\n            var routeStops = r.stops;\r\n            var routeId = r.id;\r\n\r\n            if (routeId in matchingRoutes)\r\n                matchingRoutes[routeId].count += r.count;\r\n            else {\r\n                matchingRoutes[routeId] = {\r\n                    id: routeId,\r\n                    stops: routeStops,\r\n                    count: r.count\r\n                };\r\n            }\r\n        });\r\n\r\n        matchingRoutes = Object.keys(matchingRoutes).map(function(routeId) { return matchingRoutes[routeId]; });\r\n        matchingRoutes.sort(function(r1, r2) { return r2.count - r1.count; });\r\n        return matchingRoutes;\r\n    };\r\n\r\n    var findRoutesByDate = function(origin, destination, year, month) {\r\n        var d = $q.defer();\r\n        var matchingRoutes = findRoutes(routes, origin, destination);\r\n        if (matchingRoutes.length === 0) {\r\n            d.resolve([]);\r\n        } else {\r\n            var fromDate = new Date(year, month - 1, 1);\r\n            var toDate = new Date(year, month, 1);\r\n\r\n            $http.get('/api/all-routes-by-date', {\r\n                params: {\r\n                    from_date: fromDate.getTime(),\r\n                    to_date: toDate.getTime()\r\n                }\r\n            }).then(function(response) {\r\n                var routesInDate = response.data.map(function(r) {\r\n                    return {\r\n                        id: r.id,\r\n                        stops: r.stop_ids,\r\n                        count: r.count\r\n                    };\r\n                });\r\n                d.resolve(findRoutes(routesInDate, origin, destination));\r\n            }, function(response) { d.reject({ 'msg': 'Error fetching routes', 'response': response }); });\r\n        }\r\n\r\n        return d.promise;\r\n    };\r\n\r\n    var findRoute = function(routeId) {\r\n        return routesMap[routeId] || null;\r\n    };\r\n\r\n    service = {\r\n        getStops: function() { return stops; },\r\n        getRoutes: function() { return routes; },\r\n        findRoute: findRoute,\r\n        findStop: findStop,\r\n        findRoutes: function(origin, destination) { return findRoutes(routes, origin, destination); },\r\n        findRoutesByDate: findRoutesByDate\r\n    };\r\n\r\n    return loadedPromise.then(function() { return service; });\r\n}]);\r\n","angular.module('RouteExplorer').factory('LocationBinder',\r\n['$location',\r\nfunction($location) {\r\n    return {\r\n        bind: function(scope, scopeProperty, locationProperty, parser, formatter) {\r\n            scope[scopeProperty] = $location.search()[locationProperty] || null;\r\n\r\n            scope.$watch(scopeProperty, function(value) {\r\n                if (formatter)\r\n                    value = formatter(value);\r\n\r\n                $location.search(locationProperty, value);\r\n            });\r\n\r\n            scope.$watch(function() { return $location.search()[locationProperty] || null; }, function(value) {\r\n                if (parser)\r\n                    value = parser(value);\r\n\r\n                scope[scopeProperty] = value;\r\n            });\r\n        }\r\n    };\r\n}]);\r\n"],"sourceRoot":"/source/"}