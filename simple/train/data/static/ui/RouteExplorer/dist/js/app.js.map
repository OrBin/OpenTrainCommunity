{"version":3,"sources":["polyfills.js","RouteExplorer.js","services/Layout.js"],"names":[],"mappingsaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// String.repeat polyfill\r\n// taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Polyfill\r\nif (!String.prototype.repeat) {\r\n  String.prototype.repeat = function(count) {\r\n    'use strict';\r\n    if (this === null) {\r\n      throw new TypeError('can\\'t convert ' + this + ' to object');\r\n    }\r\n    var str = '' + this;\r\n    count = +count;\r\n    if (count != count) {\r\n      count = 0;\r\n    }\r\n    if (count < 0) {\r\n      throw new RangeError('repeat count must be non-negative');\r\n    }\r\n    if (count == Infinity) {\r\n      throw new RangeError('repeat count must be less than infinity');\r\n    }\r\n    count = Math.floor(count);\r\n    if (str.length === 0 || count === 0) {\r\n      return '';\r\n    }\r\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\r\n    // main part. But anyway, most current (August 2014) browsers can't handle\r\n    // strings 1 << 28 chars or longer, so:\r\n    if (str.length * count >= 1 << 28) {\r\n      throw new RangeError('repeat count must not overflow maximum string size');\r\n    }\r\n    var rpt = '';\r\n    for (;;) {\r\n      if ((count & 1) == 1) {\r\n        rpt += str;\r\n      }\r\n      count >>>= 1;\r\n      if (count === 0) {\r\n        break;\r\n      }\r\n      str += str;\r\n    }\r\n    return rpt;\r\n  };\r\n}\r\n","(function() {\r\n  var baseDir = '/static/ui/RouteExplorer';\r\n  var app = angular.module('RouteExplorer', ['ngRoute', 'ui.bootstrap', 'ui.bootstrap.buttons']);\r\n\r\n  app.config(['$routeProvider',\r\n  function($routeProvider) {\r\n\r\n      var templateUrl = function(templateName) {\r\n          return baseDir + '/tpls/' + templateName + '.html';\r\n      };\r\n\r\n      $routeProvider\r\n          .when('/', {\r\n              pageId: 'welcome',\r\n              templateUrl: templateUrl('SelectStops'),\r\n              controller: 'SelectStopsController',\r\n              resolve: {\r\n                  loaded: function(Layout) {\r\n                      return Layout.loaded;\r\n                  }\r\n              }\r\n          })\r\n          .when('/about', {\r\n              pageId: 'about',\r\n              templateUrl: templateUrl('About'),\r\n          })\r\n          .when('/:year/:month/select-route/:origin/:destination', {\r\n              pageId: 'routes',\r\n              templateUrl: templateUrl('SelectRoute'),\r\n              controller: 'SelectRouteController',\r\n              resolve: {\r\n                  loaded: function(Layout) {\r\n                      return Layout.loaded;\r\n                  }\r\n              }\r\n          })\r\n          .when('/:year/:month/routes/:routeId', {\r\n              pageId: 'route',\r\n              templateUrl: templateUrl('RouteDetails'),\r\n              controller: 'RouteDetailsController',\r\n              resolve: {\r\n                  loaded: function(Layout) {\r\n                      return Layout.loaded;\r\n                  }\r\n              },\r\n              reloadOnSearch: false\r\n          })\r\n          .otherwise({\r\n              redirectTo: '/'\r\n          });\r\n  }]);\r\n\r\n  app.controller('AppController', ['$scope', '$location',\r\n  function($scope, $location) {\r\n      $scope.share = function(prefix) {\r\n          var url = prefix + encodeURIComponent('http://otrain.org/#' + $location.url());\r\n          window.open(url, 'sharePopup', 'width=600,height=550,top=100,left=100,location=no,scrollbar=no,status=no,menubar=no');\r\n      };\r\n\r\n      $scope.$on('$routeChangeSuccess', function(e, route) {\r\n          $scope.bodyClass = route.pageId ? 'rex-page-' + route.pageId : null;\r\n      });\r\n  }]);\r\n\r\n  app.controller('SelectStopsController', ['$scope', '$rootScope', '$location', 'Layout',\r\n  function($scope, $rootScope, $location, Layout) {\r\n      $scope.stops = Layout.getStops();\r\n      $scope.origin = null;\r\n      $scope.destination = null;\r\n      $scope.months = [\r\n          'ינואר',\r\n          'פברואר',\r\n          'מרץ',\r\n          'אפריל',\r\n          'מאי',\r\n          'יוני',\r\n          'יולי',\r\n          'אוגוסט',\r\n          'ספטמבר',\r\n          'אוקטובר',\r\n          'נובמבר',\r\n          'דצמבר'\r\n      ].map(function(v, i) { return { value: i + 1, name: v }; });\r\n\r\n      var today = new Date();\r\n      var lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\r\n      $scope.month = lastMonth.getMonth() + 1; // We're using 1-based months vs JavaScript's 0-based\r\n      $scope.year = lastMonth.getFullYear();\r\n      $scope.minYear = 2013;\r\n      $scope.maxYear = $scope.year;\r\n\r\n      $scope.formValid = function() {\r\n          return (\r\n              !!$scope.origin &&\r\n              !!$scope.destination &&\r\n              $scope.origin != $scope.destination\r\n          );\r\n      };\r\n\r\n      $scope.stopName = function(stopId) {\r\n          var stop = Layout.findStop(stopId);\r\n          if (!stop)\r\n              return null;\r\n\r\n          return stop.name;\r\n      };\r\n\r\n      $scope.goToRoutes = function() {\r\n          $scope.noRoutes = false;\r\n          $scope.loading = true;\r\n          Layout.findRoutesByDate($scope.origin.id, $scope.destination.id, $scope.year, $scope.month)\r\n              .then(function(routes) {\r\n                  if (routes.length === 0) {\r\n                      $scope.noRoutes = true;\r\n                  } else if (routes.length == 1) {\r\n                      $location.path('/' + $scope.year + '/' + $scope.month + '/routes/' + routes[0].id);\r\n                  } else {\r\n                      $location.path('/' + $scope.year + '/' + $scope.month + '/select-route/' + $scope.origin.id + '/' + $scope.destination.id);\r\n                  }\r\n              })\r\n              .finally(function() {\r\n                  $scope.loading = false;\r\n              });\r\n      };\r\n\r\n      $scope.dismissError = function() {\r\n          $scope.noRoutes = false;\r\n      };\r\n  }]);\r\n\r\n  app.controller('SelectRouteController', ['$scope', '$location', '$route', 'Layout',\r\n  function($scope, $location, $route, Layout) {\r\n      $scope.stops = Layout.getStops();\r\n      var year = $route.current.params.year;\r\n      var month = $route.current.params.month;\r\n      var origin = Layout.findStop($route.current.params.origin);\r\n      var destination = Layout.findStop($route.current.params.destination);\r\n\r\n      Layout.findRoutesByDate(origin.id, destination.id, year, month).then(function(routes) {\r\n          if (routes.length > 1)\r\n              collapseRoutes(routes);\r\n          $scope.routes = routes;\r\n      });\r\n\r\n      function stopName(stopId) {\r\n          var stop = Layout.findStop(stopId);\r\n          if (!stop)\r\n              return null;\r\n\r\n          return stop.name;\r\n      }\r\n\r\n      $scope.isCollapsed = function(value) {\r\n          return angular.isArray(value);\r\n      };\r\n\r\n      $scope.isOrigin = function(stopId) {\r\n          return stopId == origin.id;\r\n      };\r\n\r\n      $scope.isDestination = function(stopId) {\r\n          return stopId == destination.id;\r\n      };\r\n\r\n      $scope.stopText = function(stopId) {\r\n          if ($scope.isCollapsed(stopId))\r\n              return \"\\u2022\".repeat(stopId.length);\r\n\r\n          return stopName(stopId);\r\n      };\r\n\r\n      $scope.stopTooltip = function(stopId) {\r\n          if (!$scope.isCollapsed(stopId))\r\n              return null;\r\n\r\n          return stopId.map(stopName).join(\", \");\r\n      };\r\n\r\n      $scope.barWidth = function(route) {\r\n          var percentWidth = route.count * 100.0 / $scope.routes[0].count;\r\n\r\n          if (percentWidth < 1.0)\r\n              return \"1px\";\r\n\r\n          return percentWidth + \"%\";\r\n      };\r\n\r\n      $scope.routeUrl = function(route) {\r\n          return '/#/' + year + '/' + month + '/routes/' + route.id;\r\n      };\r\n\r\n      function collapseRoutes(routes) {\r\n          var collapsibleStops = findCommonStops(countStopFrequencies(routes), routes.length);\r\n          delete collapsibleStops[origin.id];\r\n          delete collapsibleStops[destination.id];\r\n\r\n          for (var routeIndex in routes) {\r\n              routes[routeIndex].stops = collapseStops(routes[routeIndex].stops, collapsibleStops);\r\n          }\r\n\r\n          function countStopFrequencies(routes) {\r\n              var stopFrequencies = {};\r\n              for (var routeIndex in routes) {\r\n                  var route = routes[routeIndex];\r\n                  for (var i in route.stops) {\r\n                      var stopId = route.stops[i];\r\n                      if (!stopFrequencies[stopId])\r\n                          stopFrequencies[stopId] = 0;\r\n                      stopFrequencies[stopId]++;\r\n                  }\r\n              }\r\n\r\n              return stopFrequencies;\r\n          }\r\n\r\n          function findCommonStops(stopFrequencies, routesCount) {\r\n              var commonStops = {};\r\n              for (var stopId in stopFrequencies)\r\n                  if (stopFrequencies[stopId] == routesCount)\r\n                      commonStops[stopId] = true;\r\n\r\n              return commonStops;\r\n          }\r\n\r\n          function collapseStops(stops, collapsibleStops) {\r\n              var collapsed = [];\r\n              var accumulator;\r\n\r\n              for (var i in stops) {\r\n                  var stopId = stops[i];\r\n                  if (i > 0 && i < stops.length - 1 && collapsibleStops[stopId]) {\r\n                      if (!accumulator) {\r\n                          accumulator = [];\r\n                          collapsed.push(accumulator);\r\n                      }\r\n                      accumulator.push(stopId);\r\n                  } else {\r\n                      accumulator = null;\r\n                      collapsed.push(stopId);\r\n                  }\r\n              }\r\n\r\n              return collapsed;\r\n          }\r\n      }\r\n  }]);\r\n\r\n  app.controller('RouteDetailsController', ['$scope', '$route', '$http', '$location', 'LocationBinder', 'Layout',\r\n  function($scope, $route, $http, $location, LocationBinder, Layout) {\r\n      var year = $route.current.params.year;\r\n      var month = $route.current.params.month;\r\n      var routeId = $route.current.params.routeId;\r\n      var stopIds = Layout.findRoute(routeId).stops;\r\n      var statsMap = {};\r\n\r\n      $scope.loaded = false;\r\n      $scope.stopIds = stopIds;\r\n      $scope.origin = stopIds[0];\r\n      $scope.destination = stopIds[stopIds.length - 1];\r\n      $scope.year = year;\r\n      $scope.month = month;\r\n\r\n      $scope.selectedDay = null;\r\n      $scope.days = [\r\n          { abbr: 'א', title: 'ראשון', id: 1 },\r\n          { abbr: 'ב', title: 'שני', id: 2 },\r\n          { abbr: 'ג', title: 'שלישי', id: 3 },\r\n          { abbr: 'ד', title: 'רביעי', id: 4 },\r\n          { abbr: 'ה', title: 'חמישי', id: 5 },\r\n          { abbr: 'ו', title: 'שישי', id: 6 },\r\n          { abbr: 'ש', title: 'שבת', id: 7 }\r\n      ];\r\n\r\n      $scope.selectedTime = null;\r\n      $scope.times = [];\r\n\r\n      var fromDate = new Date(year, month - 1, 1);\r\n      var toDate = new Date(year, month, 1); // Date constructor wraps around so this works on December as well\r\n\r\n      $http.get('/api/route-info-full', { params: { route_id: routeId, from_date: fromDate.getTime(), to_date: toDate.getTime() } })\r\n          .success(function(data) {\r\n              loadStats(data);\r\n              $scope.loaded = true;\r\n          });\r\n\r\n      LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\r\n      LocationBinder.bind($scope, 'selectedTime', 'time');\r\n\r\n      $scope.stopStats = function(stopId) {\r\n          var stats = selectedStats();\r\n          for (var i in stats) {\r\n              if (stats[i].stop_id == stopId)\r\n                  return stats[i];\r\n          }\r\n          return null;\r\n      };\r\n\r\n      $scope.stopName = function(stopId) {\r\n          var stop = Layout.findStop(stopId);\r\n          if (!stop)\r\n              return null;\r\n\r\n              return stop.name;\r\n      };\r\n\r\n      $scope.isDayEmpty = function(day) {\r\n          var dayId = day.id;\r\n          var dayTimes = statsMap[dayId];\r\n\r\n          if (!dayTimes)\r\n              return true;\r\n\r\n          for (var time in dayTimes)\r\n              if (dayTimes[time].info.num_trips > 0)\r\n                  return false;\r\n\r\n          return true;\r\n      };\r\n\r\n      $scope.isTimeEmpty = function(time) {\r\n          var dayId = $scope.selectedDay || 'all';\r\n          var timeId = time.id;\r\n\r\n          var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\r\n          if (timeStats && timeStats.info.num_trips > 0)\r\n              return false;\r\n\r\n          return true;\r\n      };\r\n\r\n      function selectedStats() {\r\n          var dayId = $scope.selectedDay || 'all';\r\n          var timeId = $scope.selectedTime || 'all';\r\n\r\n          var stats = statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId].stops : [];\r\n          return stats;\r\n      }\r\n\r\n      function loadStats(data) {\r\n          $scope.times = [];\r\n          var timesMap = {};\r\n\r\n          for (var i in data) {\r\n              var statGroup = data[i];\r\n              var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\r\n              var dayId = statGroup.info.week_day;\r\n\r\n              if (!statsMap[dayId])\r\n                  statsMap[dayId] = {};\r\n\r\n              statsMap[dayId][timeId] = statGroup;\r\n\r\n              if (timeId != 'all' && !timesMap[timeId]) {\r\n                  var time = {\r\n                      id: timeId,\r\n                      from: formatHour(statGroup.info.hours[0]),\r\n                      to: formatHour(statGroup.info.hours[1])\r\n                  };\r\n                  timesMap[timeId] = time;\r\n                  $scope.times.push(time);\r\n              }\r\n          }\r\n\r\n          function formatHour(hour) {\r\n              return ('0' + hour % 24 + '').slice(-2) + ':00';\r\n          }\r\n      }\r\n  }]);\r\n\r\n  app.filter('duration', function() {\r\n      return function(seconds) {\r\n          var negative = false;\r\n          seconds = Math.trunc(seconds);\r\n          if (seconds < 0) {\r\n              negative = true;\r\n              seconds = -seconds;\r\n          }\r\n\r\n          var minutes = Math.trunc(seconds / 60);\r\n          seconds -= minutes * 60;\r\n          var hours = Math.trunc(minutes / 60);\r\n          minutes -= hours * 60;\r\n\r\n          if (seconds < 10) seconds = '0' + seconds;\r\n          if (minutes < 10 && hours !== 0) minutes = '0' + minutes;\r\n\r\n          var res = minutes + ':' + seconds;\r\n          if (hours !== 0)\r\n              res = hours + ':' + res;\r\n\r\n          if (negative)\r\n              res = '-' + res;\r\n\r\n          return res;\r\n      };\r\n  });\r\n\r\n  app.directive(\"rexPercentBar\", function() {\r\n      return {\r\n          restrict: 'E',\r\n          scope: {\r\n            value: '=value',\r\n            type: '=type'\r\n          },\r\n          templateUrl: baseDir + '/tpls/PercentBar.html'\r\n        };\r\n  });\r\n\r\n  app.factory('LocationBinder', function($location) {\r\n      return {\r\n          bind: function(scope, scopeProperty, locationProperty, parser, formatter) {\r\n              scope[scopeProperty] = $location.search()[locationProperty] || null;\r\n\r\n              scope.$watch(scopeProperty, function(value) {\r\n                  if (formatter)\r\n                      value = formatter(value);\r\n\r\n                  $location.search(locationProperty, value);\r\n              });\r\n\r\n              scope.$watch(function() { return $location.search()[locationProperty] || null; }, function(value) {\r\n                  if (parser)\r\n                      value = parser(value);\r\n\r\n                  scope[scopeProperty] = value;\r\n              });\r\n          }\r\n      };\r\n  });\r\n})();\r\n","(function() {\r\n  var app = angular.module('RouteExplorer');\r\n\r\n  app.factory('Layout', ['$http', '$q',\r\n  function($http, $q) {\r\n      var stops = [];\r\n      var stopsMap = {};\r\n      var routes = [];\r\n      var routesMap = {};\r\n\r\n      var loaded = $q.all([\r\n          $http.get('/api/stops')\r\n              .then(function(response) {\r\n                  stops = response.data.map(function(s) { return { id: s.stop_id, name: s.heb_stop_names[0], names: s.heb_stop_names }; });\r\n                  stops.forEach(function(s) { stopsMap[s.id] = s; });\r\n              }),\r\n\r\n          $http.get('/api/all-routes')\r\n              .then(function(response) {\r\n                  routes = response.data.map(function(r) { return {\r\n                      id: r.id,\r\n                      stops: r.stop_ids,\r\n                      count: r.count\r\n                  }; });\r\n\r\n                  routesMap = routes.reduce(function(m, r) { m[r.id] = r; return m; }, {});\r\n              })\r\n      ]);\r\n\r\n      var findStop = function(stopId) {\r\n          return stopsMap[stopId] || null;\r\n      };\r\n\r\n      var findRoutes = function(routes, originId, destinationId) {\r\n          var matchingRoutes = {};\r\n\r\n          routes.forEach(function(r) {\r\n              var originIndex = r.stops.indexOf(originId);\r\n              var destinationIndex = r.stops.indexOf(destinationId);\r\n\r\n              if (originIndex < 0 || destinationIndex < 0)\r\n                  return;\r\n\r\n              if (originIndex > destinationIndex)\r\n                  return;\r\n\r\n              var routeStops = r.stops;\r\n              var routeId = r.id;\r\n\r\n              if (routeId in matchingRoutes)\r\n                  matchingRoutes[routeId].count += r.count;\r\n              else {\r\n                  matchingRoutes[routeId] = {\r\n                      id: routeId,\r\n                      stops: routeStops,\r\n                      count: r.count\r\n                  };\r\n              }\r\n          });\r\n\r\n          matchingRoutes = Object.keys(matchingRoutes).map(function(routeId) { return matchingRoutes[routeId]; });\r\n          matchingRoutes.sort(function(r1, r2) { return r2.count - r1.count; });\r\n          return matchingRoutes;\r\n      };\r\n\r\n      var findRoutesByDate = function(origin, destination, year, month) {\r\n          var d = $q.defer();\r\n          var matchingRoutes = findRoutes(routes, origin, destination);\r\n          if (matchingRoutes.length === 0) {\r\n              d.resolve([]);\r\n          } else {\r\n              var fromDate = new Date(year, month - 1, 1);\r\n              var toDate = new Date(year, month, 1);\r\n\r\n              $http.get('/api/all-routes-by-date', {\r\n                  params: {\r\n                      from_date: fromDate.getTime(),\r\n                      to_date: toDate.getTime()\r\n                  }\r\n              }).then(function(response) {\r\n                  var routesInDate = response.data.map(function(r) {\r\n                      return {\r\n                          id: r.id,\r\n                          stops: r.stop_ids,\r\n                          count: r.count\r\n                      };\r\n                  });\r\n                  d.resolve(findRoutes(routesInDate, origin, destination));\r\n              }, function(response) { d.reject({ 'msg': 'Error fetching routes', 'response': response }); });\r\n          }\r\n\r\n          return d.promise;\r\n      };\r\n\r\n      var findRoute = function(routeId) {\r\n          return routesMap[routeId] || null;\r\n      };\r\n\r\n      return {\r\n          getStops: function() { return stops; },\r\n          getRoutes: function() { return routes; },\r\n          findRoute: findRoute,\r\n          findStop: findStop,\r\n          findRoutes: function(origin, destination) { return findRoutes(routes, origin, destination); },\r\n          findRoutesByDate: findRoutesByDate,\r\n          loaded: loaded\r\n      };\r\n  }]);\r\n})();\r\n"],"sourceRoot":"/source/"}