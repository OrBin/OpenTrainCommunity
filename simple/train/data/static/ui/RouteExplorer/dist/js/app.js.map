{"version":3,"sources":["polyfills.js","RouteExplorer.js","controllers/AppController.js","controllers/RouteDetailsController.js","controllers/SelectRoutesController.js","controllers/SelectStopsController.js","directives/PercentBar.js","filters/duration.js","services/Layout.js","services/Locale.js","services/LocationBinder.js"],"names":["String","prototype","repeat","count","this","TypeError","str","RangeError","Infinity","Math","floor","length","rpt","app","angular","module","constant","baseDir","config","$routeProvider","env","templateUrl","templateName","when","pageId","controller","resolve","Layout","reloadOnSearch","otherwise","redirectTo","$scope","$location","share","prefix","url","encodeURIComponent","window","open","$on","e","route","bodyClass","$route","$http","LocationBinder","Locale","getStats","dayId","timeId","statsMap","selectedStats","stats","selectedDay","selectedTime","stops","loadStats","data","formatHour","hour","slice","times","timesMap","i","statGroup","info","hours","week_day","time","id","from","to","push","year","current","params","month","routeId","stopIds","findRoute","loaded","origin","destination","selectedMonth","months","name","days","fromDate","Date","toDate","get","route_id","from_date","getTime","to_date","success","bind","val","Number","stopStats","stopId","stop_id","stopName","stop","findStop","isDayEmpty","day","dayTimes","num_trips","isTimeEmpty","timeStats","tripCount","collapseRoutes","routes","countStopFrequencies","stopFrequencies","routeIndex","findCommonStops","routesCount","commonStops","collapseStops","collapsibleStops","accumulator","collapsed","getStops","findRoutesByDate","then","isCollapsed","value","isArray","isOrigin","isDestination","stopText","stopTooltip","map","join","barWidth","percentWidth","routeUrl","$rootScope","generatePeriods","getFullYear","periods","getMonth","getDate","period","reverse","dateRange","getRoutesDateRange","min","max","formValid","goToRoutes","noRoutes","loading","path","dismissError","directive","restrict","scope","type","filter","seconds","negative","trunc","minutes","res","factory","$q","stopsMap","routesMap","loadedPromise","all","response","s","heb_stop_names","names","forEach","r","stop_ids","minDate","min_date","maxDate","max_date","reduce","m","findRoutes","originId","destinationId","matchingRoutes","originIndex","indexOf","destinationIndex","routeStops","Object","keys","sort","r1","r2","d","defer","routesInDate","reject","msg","promise","service","getRoutes","v","abbr","scopeProperty","locationProperty","parser","formatter","search","$watch"],"mappings":"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","file":"app.js","sourcesContent":["// String.repeat polyfill\r\n// taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Polyfill\r\nif (!String.prototype.repeat) {\r\n  String.prototype.repeat = function(count) {\r\n    'use strict';\r\n    if (this === null) {\r\n      throw new TypeError('can\\'t convert ' + this + ' to object');\r\n    }\r\n    var str = '' + this;\r\n    count = +count;\r\n    if (count != count) {\r\n      count = 0;\r\n    }\r\n    if (count < 0) {\r\n      throw new RangeError('repeat count must be non-negative');\r\n    }\r\n    if (count == Infinity) {\r\n      throw new RangeError('repeat count must be less than infinity');\r\n    }\r\n    count = Math.floor(count);\r\n    if (str.length === 0 || count === 0) {\r\n      return '';\r\n    }\r\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\r\n    // main part. But anyway, most current (August 2014) browsers can't handle\r\n    // strings 1 << 28 chars or longer, so:\r\n    if (str.length * count >= 1 << 28) {\r\n      throw new RangeError('repeat count must not overflow maximum string size');\r\n    }\r\n    var rpt = '';\r\n    for (;;) {\r\n      if ((count & 1) == 1) {\r\n        rpt += str;\r\n      }\r\n      count >>>= 1;\r\n      if (count === 0) {\r\n        break;\r\n      }\r\n      str += str;\r\n    }\r\n    return rpt;\r\n  };\r\n}\r\n","(function() {\r\n  var app = angular.module('RouteExplorer', ['ngRoute', 'ui.bootstrap', 'ui.bootstrap.buttons']);\r\n\r\n  app.constant('env', {\r\n    baseDir: '/static/ui/RouteExplorer'\r\n  });\r\n\r\n  app.config(['$routeProvider', 'env',\r\n  function($routeProvider, env) {\r\n\r\n      var templateUrl = function(templateName) {\r\n          return env.baseDir + '/tpls/' + templateName + '.html';\r\n      };\r\n\r\n      $routeProvider\r\n          .when('/', {\r\n              pageId: 'welcome',\r\n              templateUrl: templateUrl('SelectStops'),\r\n              controller: 'SelectStopsController',\r\n              resolve: { 'Layout': 'Layout' }\r\n          })\r\n          .when('/about', {\r\n              pageId: 'about',\r\n              templateUrl: templateUrl('About'),\r\n          })\r\n          .when('/:year/:month/select-route/:origin/:destination', {\r\n              pageId: 'routes',\r\n              templateUrl: templateUrl('SelectRoute'),\r\n              controller: 'SelectRouteController',\r\n              resolve: { 'Layout': 'Layout' }\r\n          })\r\n          .when('/:year/:month/routes/:routeId', {\r\n              pageId: 'route',\r\n              templateUrl: templateUrl('RouteDetails'),\r\n              controller: 'RouteDetailsController',\r\n              resolve: { 'Layout': 'Layout' },\r\n              reloadOnSearch: false\r\n          })\r\n          .otherwise({\r\n              redirectTo: '/'\r\n          });\r\n  }]);\r\n})();\r\n","angular.module('RouteExplorer').controller('AppController',\r\n['$scope', '$location',\r\nfunction($scope, $location) {\r\n    $scope.share = function(prefix) {\r\n        var url = prefix + encodeURIComponent('http://otrain.org/#' + $location.url());\r\n        window.open(url, 'sharePopup', 'width=600,height=550,top=100,left=100,location=no,scrollbar=no,status=no,menubar=no');\r\n    };\r\n\r\n    $scope.$on('$routeChangeSuccess', function(e, route) {\r\n        $scope.bodyClass = route.pageId ? 'rex-page-' + route.pageId : null;\r\n    });\r\n}]);\r\n","angular.module('RouteExplorer').controller('RouteDetailsController',\n['$scope', '$route', '$http', '$location', 'LocationBinder', 'Layout', 'Locale',\nfunction($scope, $route, $http, $location, LocationBinder, Layout, Locale) {\n    var year = $route.current.params.year;\n    var month = $route.current.params.month;\n    var routeId = $route.current.params.routeId;\n    var stopIds = Layout.findRoute(routeId).stops;\n    var statsMap = {};\n\n    $scope.loaded = false;\n    $scope.stopIds = stopIds;\n    $scope.origin = stopIds[0];\n    $scope.destination = stopIds[stopIds.length - 1];\n    $scope.selectedMonth = Locale.months[month - 1].name + ' ' + year;\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    var fromDate = new Date(year, month - 1, 1);\n    var toDate = new Date(year, month, 1); // Date constructor wraps around so this works on December as well\n\n    $http.get('/api/route-info-full', { params: { route_id: routeId, from_date: fromDate.getTime(), to_date: toDate.getTime() } })\n        .success(function(data) {\n            loadStats(data);\n            $scope.loaded = true;\n        });\n\n    LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n\n    $scope.stopStats = function(stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId)\n                return stats[i];\n        }\n        return null;\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n            return stop.name;\n    };\n\n    $scope.isDayEmpty = function(day) {\n        var dayId = day.id;\n        var dayTimes = statsMap[dayId];\n\n        if (!dayTimes)\n            return true;\n\n        for (var time in dayTimes)\n            if (dayTimes[time].info.num_trips > 0)\n                return false;\n\n        return true;\n    };\n\n    $scope.isTimeEmpty = function(time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0)\n            return false;\n\n        return true;\n    };\n\n    $scope.tripCount = function(dayId, timeId) {\n      var stats = getStats(dayId, timeId);\n      if (!stats)\n        return 0;\n\n      return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n      dayId = dayId || 'all';\n      timeId = timeId || 'all';\n      return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats)\n          return stats.stops;\n\n        return [];\n    }\n\n    function loadStats(data) {\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId])\n                statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n\n        function formatHour(hour) {\n            return ('0' + hour % 24 + '').slice(-2) + ':00';\n        }\n    }\n}]);\n","angular.module('RouteExplorer').controller('SelectRouteController',\r\n['$scope', '$location', '$route', 'Layout',\r\nfunction($scope, $location, $route, Layout) {\r\n    $scope.stops = Layout.getStops();\r\n    var year = $route.current.params.year;\r\n    var month = $route.current.params.month;\r\n    var origin = Layout.findStop($route.current.params.origin);\r\n    var destination = Layout.findStop($route.current.params.destination);\r\n\r\n    Layout.findRoutesByDate(origin.id, destination.id, year, month).then(function(routes) {\r\n        if (routes.length > 1)\r\n            collapseRoutes(routes);\r\n        $scope.routes = routes;\r\n    });\r\n\r\n    function stopName(stopId) {\r\n        var stop = Layout.findStop(stopId);\r\n        if (!stop)\r\n            return null;\r\n\r\n        return stop.name;\r\n    }\r\n\r\n    $scope.isCollapsed = function(value) {\r\n        return angular.isArray(value);\r\n    };\r\n\r\n    $scope.isOrigin = function(stopId) {\r\n        return stopId == origin.id;\r\n    };\r\n\r\n    $scope.isDestination = function(stopId) {\r\n        return stopId == destination.id;\r\n    };\r\n\r\n    $scope.stopText = function(stopId) {\r\n        if ($scope.isCollapsed(stopId))\r\n            return \"\\u2022\".repeat(stopId.length);\r\n\r\n        return stopName(stopId);\r\n    };\r\n\r\n    $scope.stopTooltip = function(stopId) {\r\n        if (!$scope.isCollapsed(stopId))\r\n            return null;\r\n\r\n        return stopId.map(stopName).join(\", \");\r\n    };\r\n\r\n    $scope.barWidth = function(route) {\r\n        var percentWidth = route.count * 100.0 / $scope.routes[0].count;\r\n\r\n        if (percentWidth < 1.0)\r\n            return \"1px\";\r\n\r\n        return percentWidth + \"%\";\r\n    };\r\n\r\n    $scope.routeUrl = function(route) {\r\n        return '/#/' + year + '/' + month + '/routes/' + route.id;\r\n    };\r\n\r\n    function collapseRoutes(routes) {\r\n        var collapsibleStops = findCommonStops(countStopFrequencies(routes), routes.length);\r\n        delete collapsibleStops[origin.id];\r\n        delete collapsibleStops[destination.id];\r\n\r\n        for (var routeIndex in routes) {\r\n            routes[routeIndex].stops = collapseStops(routes[routeIndex].stops, collapsibleStops);\r\n        }\r\n\r\n        function countStopFrequencies(routes) {\r\n            var stopFrequencies = {};\r\n            for (var routeIndex in routes) {\r\n                var route = routes[routeIndex];\r\n                for (var i in route.stops) {\r\n                    var stopId = route.stops[i];\r\n                    if (!stopFrequencies[stopId])\r\n                        stopFrequencies[stopId] = 0;\r\n                    stopFrequencies[stopId]++;\r\n                }\r\n            }\r\n\r\n            return stopFrequencies;\r\n        }\r\n\r\n        function findCommonStops(stopFrequencies, routesCount) {\r\n            var commonStops = {};\r\n            for (var stopId in stopFrequencies)\r\n                if (stopFrequencies[stopId] == routesCount)\r\n                    commonStops[stopId] = true;\r\n\r\n            return commonStops;\r\n        }\r\n\r\n        function collapseStops(stops, collapsibleStops) {\r\n            var collapsed = [];\r\n            var accumulator;\r\n\r\n            for (var i in stops) {\r\n                var stopId = stops[i];\r\n                if (i > 0 && i < stops.length - 1 && collapsibleStops[stopId]) {\r\n                    if (!accumulator) {\r\n                        accumulator = [];\r\n                        collapsed.push(accumulator);\r\n                    }\r\n                    accumulator.push(stopId);\r\n                } else {\r\n                    accumulator = null;\r\n                    collapsed.push(stopId);\r\n                }\r\n            }\r\n\r\n            return collapsed;\r\n        }\r\n    }\r\n}]);\r\n","angular.module('RouteExplorer').controller('SelectStopsController',\n['$scope', '$rootScope', '$location', 'Layout', 'Locale',\nfunction($scope, $rootScope, $location, Layout, Locale) {\n    $scope.stops = Layout.getStops();\n    $scope.origin = null;\n    $scope.destination = null;\n    $scope.months = Locale.months;\n\n    var dateRange = Layout.getRoutesDateRange();\n    $scope.periods = generatePeriods(dateRange.min, dateRange.max);\n    $scope.period = $scope.periods[0];\n\n    $scope.formValid = function() {\n        return (\n            !!$scope.origin &&\n            !!$scope.destination &&\n            $scope.origin != $scope.destination\n        );\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    };\n\n    $scope.goToRoutes = function() {\n        $scope.noRoutes = false;\n        $scope.loading = true;\n        var year = $scope.period.from.getFullYear();\n        var month = $scope.period.from.getMonth() + 1;\n        Layout.findRoutesByDate($scope.origin.id, $scope.destination.id, year, month)\n            .then(function(routes) {\n                if (routes.length === 0) {\n                    $scope.noRoutes = true;\n                } else if (routes.length == 1) {\n                    $location.path('/' + year + '/' + month + '/routes/' + routes[0].id);\n                } else {\n                    $location.path('/' + year + '/' + month + '/select-route/' + $scope.origin.id + '/' + $scope.destination.id);\n                }\n            })\n            .finally(function() {\n                $scope.loading = false;\n            });\n    };\n\n    $scope.dismissError = function() {\n        $scope.noRoutes = false;\n    };\n\n    function generatePeriods(fromDate, toDate) {\n      // fromDate=1970-1-1 due to a data bug. This is a quick temporary workaround\n      if (fromDate.getFullYear() < 2013) fromDate = new Date(2013, 0, 1);\n\n      var periods = [];\n      var from = new Date(fromDate.getFullYear(), fromDate.getMonth(), 1);\n      while (from < toDate) {\n        to = new Date(from.getFullYear(), from.getMonth() + 1, from.getDate());\n        var period = {\n          from: from,\n          to: to,\n          name: Locale.months[from.getMonth()].name + \" \" + from.getFullYear()\n        };\n        periods.push(period);\n        from = to;\n      }\n      periods.reverse();\n      return periods;\n    }\n}]);\n","angular.module('RouteExplorer').directive(\"rexPercentBar\",\r\n['env',\r\nfunction(env) {\r\n    return {\r\n        restrict: 'E',\r\n        scope: {\r\n          value: '=value',\r\n          type: '=type'\r\n        },\r\n        templateUrl: env.baseDir + '/tpls/PercentBar.html'\r\n      };\r\n}]);\r\n","angular.module('RouteExplorer').filter('duration', function() {\r\n    return function(seconds) {\r\n        var negative = false;\r\n        seconds = Math.trunc(seconds);\r\n        if (seconds < 0) {\r\n            negative = true;\r\n            seconds = -seconds;\r\n        }\r\n\r\n        var minutes = Math.trunc(seconds / 60);\r\n        seconds -= minutes * 60;\r\n        var hours = Math.trunc(minutes / 60);\r\n        minutes -= hours * 60;\r\n\r\n        if (seconds < 10) seconds = '0' + seconds;\r\n        if (minutes < 10 && hours !== 0) minutes = '0' + minutes;\r\n\r\n        var res = minutes + ':' + seconds;\r\n        if (hours !== 0)\r\n            res = hours + ':' + res;\r\n\r\n        if (negative)\r\n            res = '-' + res;\r\n\r\n        return res;\r\n    };\r\n});\r\n","angular.module('RouteExplorer').factory('Layout',\n['$http', '$q',\nfunction($http, $q) {\n    var self = this;\n    var stops = [];\n    var stopsMap = {};\n    var routes = [];\n    var routesMap = {};\n\n    var loadedPromise = $q.all([\n        $http.get('/api/stops')\n            .then(function(response) {\n                stops = response.data.map(function(s) { return { id: s.stop_id, name: s.heb_stop_names[0], names: s.heb_stop_names }; });\n                stops.forEach(function(s) { stopsMap[s.id] = s; });\n            }),\n\n        $http.get('/api/all-routes')\n            .then(function(response) {\n                routes = response.data.map(function(r) { return {\n                    id: r.id,\n                    stops: r.stop_ids,\n                    count: r.count,\n                    minDate: new Date(r.min_date),\n                    maxDate: new Date(r.max_date)\n                }; });\n\n                routesMap = routes.reduce(function(m, r) { m[r.id] = r; return m; }, {});\n            })\n    ]);\n\n    var findStop = function(stopId) {\n        return stopsMap[stopId] || null;\n    };\n\n    var findRoutes = function(routes, originId, destinationId) {\n        var matchingRoutes = {};\n\n        routes.forEach(function(r) {\n            var originIndex = r.stops.indexOf(originId);\n            var destinationIndex = r.stops.indexOf(destinationId);\n\n            if (originIndex < 0 || destinationIndex < 0)\n                return;\n\n            if (originIndex > destinationIndex)\n                return;\n\n            var routeStops = r.stops;\n            var routeId = r.id;\n\n            if (routeId in matchingRoutes)\n                matchingRoutes[routeId].count += r.count;\n            else {\n                matchingRoutes[routeId] = {\n                    id: routeId,\n                    stops: routeStops,\n                    count: r.count\n                };\n            }\n        });\n\n        matchingRoutes = Object.keys(matchingRoutes).map(function(routeId) { return matchingRoutes[routeId]; });\n        matchingRoutes.sort(function(r1, r2) { return r2.count - r1.count; });\n        return matchingRoutes;\n    };\n\n    var findRoutesByDate = function(origin, destination, year, month) {\n        // TODO use minDate and maxDate from our cached routes to avoid the http request\n\n        var d = $q.defer();\n        var matchingRoutes = findRoutes(routes, origin, destination);\n        if (matchingRoutes.length === 0) {\n            d.resolve([]);\n        } else {\n            var fromDate = new Date(year, month - 1, 1);\n            var toDate = new Date(year, month, 1);\n\n            $http.get('/api/all-routes-by-date', {\n                params: {\n                    from_date: fromDate.getTime(),\n                    to_date: toDate.getTime()\n                }\n            }).then(function(response) {\n                var routesInDate = response.data.map(function(r) {\n                    return {\n                        id: r.id,\n                        stops: r.stop_ids,\n                        count: r.count\n                    };\n                });\n                d.resolve(findRoutes(routesInDate, origin, destination));\n            }, function(response) { d.reject({ 'msg': 'Error fetching routes', 'response': response }); });\n        }\n\n        return d.promise;\n    };\n\n    var findRoute = function(routeId) {\n        return routesMap[routeId] || null;\n    };\n\n    var getRoutesDateRange = function() {\n        var max = new Date(1900, 0, 1);\n        var min = new Date(2100, 0, 1);\n\n        for (var i in routes) {\n            route = routes[i];\n            if (route.count === 0)\n              continue;\n\n            if (route.minDate && route.minDate < min) min = route.minDate;\n            if (route.maxDate && route.maxDate > max) max = route.maxDate;\n        }\n        return {\n          min: min,\n          max: max\n        };\n    };\n\n    service = {\n        getStops: function() { return stops; },\n        getRoutes: function() { return routes; },\n        findRoute: findRoute,\n        findStop: findStop,\n        findRoutes: function(origin, destination) { return findRoutes(routes, origin, destination); },\n        findRoutesByDate: findRoutesByDate,\n        getRoutesDateRange: getRoutesDateRange\n    };\n\n    return loadedPromise.then(function() { return service; });\n}]);\n","angular.module('RouteExplorer').constant('Locale', {\r\n  months: [\r\n      'ינואר',\r\n      'פברואר',\r\n      'מרץ',\r\n      'אפריל',\r\n      'מאי',\r\n      'יוני',\r\n      'יולי',\r\n      'אוגוסט',\r\n      'ספטמבר',\r\n      'אוקטובר',\r\n      'נובמבר',\r\n      'דצמבר'\r\n  ].map(function(v, i) { return { id: i + 1, name: v }; }),\r\n\r\n  days: [\r\n      { abbr: 'א', name: 'ראשון', id: 1 },\r\n      { abbr: 'ב', name: 'שני', id: 2 },\r\n      { abbr: 'ג', name: 'שלישי', id: 3 },\r\n      { abbr: 'ד', name: 'רביעי', id: 4 },\r\n      { abbr: 'ה', name: 'חמישי', id: 5 },\r\n      { abbr: 'ו', name: 'שישי', id: 6 },\r\n      { abbr: 'ש', name: 'שבת', id: 7 }\r\n  ]\r\n});\r\n","angular.module('RouteExplorer').factory('LocationBinder',\r\n['$location',\r\nfunction($location) {\r\n    return {\r\n        bind: function(scope, scopeProperty, locationProperty, parser, formatter) {\r\n            scope[scopeProperty] = $location.search()[locationProperty] || null;\r\n\r\n            scope.$watch(scopeProperty, function(value) {\r\n                if (formatter)\r\n                    value = formatter(value);\r\n\r\n                $location.search(locationProperty, value);\r\n            });\r\n\r\n            scope.$watch(function() { return $location.search()[locationProperty] || null; }, function(value) {\r\n                if (parser)\r\n                    value = parser(value);\r\n\r\n                scope[scopeProperty] = value;\r\n            });\r\n        }\r\n    };\r\n}]);\r\n"],"sourceRoot":"/source/"}