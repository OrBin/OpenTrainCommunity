try:
    import redis

    CACHE_ENABLED = True
    try:
        CLIENT = redis.StrictRedis(decode_responses=True)
        CLIENT.keys('*')
    except Exception as e:
        print('Could not connect to Redis - disabling cache {0}'.format(e))
        CACHE_ENABLED = False

    TTL = 30 * 24 * 60 * 60

except ImportError:
    CACHE_ENABLED = False

#print( '********* cache_enabled = %s' % CACHE_ENABLED)
from django.http import HttpResponse
import json

def invalidate_cache():
    if CACHE_ENABLED:
        CLIENT.flushdb()
        print( 'Flushed db')

def _build_key(req):
    return req.get_full_path()


def cachereq(func):
    """
    decorator to cache request call, returns HTTP response
    """
    def wrap(req, *args, **kwargs):
        use_cache = req.GET.get('no_cache',None) != '1' and CACHE_ENABLED
        if use_cache:
            key = _build_key(req)
            cc = CLIENT.get(key)
            if cc:
                return HttpResponse(content=cc, status=200, content_type='application/json')
        result = func(req, *args, **kwargs)
        if use_cache:
            CLIENT.setex(key, TTL, result.content)
        return result

    return wrap


