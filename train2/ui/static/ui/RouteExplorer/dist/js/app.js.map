{"version":3,"sources":["RouteExplorer.js","polyfills.js","directives/PercentBar.js","directives/TimesDetails.js","controllers/AppController.js","controllers/GraphsController.js","app.js","controllers/HeatMapController.js","controllers/HighlightsController.js","controllers/RouteDetailsController.js","controllers/RoutesController.js","controllers/SelectRoutesController.js","controllers/SelectStopsController.js","controllers/TimesDetailsController.js","controllers/TopHighlightsController.js","filters/display.js","filters/duration.js","services/Layout.js","services/Locale.js","services/LocationBinder.js","services/TimeParser.js"],"names":["app","angular","module","constant","baseDir","config","$routeProvider","env","templateUrl","templateName","when","pageId","controller","resolve","Layout","reloadOnSearch","otherwise","redirectTo","String","prototype","repeat","count","this","TypeError","str","RangeError","Infinity","Math","floor","length","rpt","directive","restrict","scope","value","type","stats","$scope","$location","share","prefix","url","encodeURIComponent","window","open","$on","e","route","bodyClass","name","values","$http","$q","$timeout","daysTable","hoursList","monthNames","wip","input","graphKind","updateSkipped","refresh","skippedCall","getSkipped","fromToStops","filter","st","skipOnly","map","id","join","startStop","endStop","startDate","endDate","search","stops","getStops","stopsById","forEach","cbs","get","params","from_date","to_date","from_stop","to_stop","skipped","undefined","then","resp","stat","data","table","push","fromToStopsIds","stopId","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","all","updateChart","getRouteTitle","from","to","initData","buildDates","s","first_date","month","year","last_date","buildDatesRange","startDates","endDates","ns","alert","computePerDaySeries","perDay","key","stop_id","week_day_local","num_trips","arrival_late_count","result","d","entry","y","numTrips","console","log","lineName","computePerHoursSeries","perHour","hoursMapping","h","hour_key","hour_local","hl","stopNames","idx","perDaySeries","perHoursSeries","tooltip","formatter","prec","round","x","point","useHTML","chartPerDay","options","chart","title","text","xAxis","reversed","categories","yAxis","opposite","series","chartPerHour","findDate","dates","i","findStop","ta","extend","defaults","scrollWheelZoom","center","lat","latlon","lng","zoom","stop","paths","heatmapData","score","latlng","g","color","message","fillColor","fillOpacity","stroke","radius","latlngs","popupOptions","className","init","highlights","fields","sortKey","v","initialDesc","week_day","hours","active","asc","mean_arrival_late_pct","disableSort","sortBy","activeField","f","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","sort","v1","v2","k1","k2","$route","LocationBinder","Locale","TimeParser","getStats","dayId","timeId","statsMap","selectedStats","selectedDay","selectedTime","loadStats","times","timesMap","statGroup","info","time","formatHour","hour","slice","formatMonth","date","months","getMonth","getFullYear","offsetMonth","offset","Date","setMonth","offsetPeriod","period","size","end","routeParams","current","parsePeriod","createRequestString","routeId","stopIds","findRoute","loaded","origin","destination","selectedPeriod","days","selectRouteUrl","previousPeriod","nextPeriod","bounds","getRoutesDateRange","day","previousPeriodUrl","min","getTime","formatPeriod","nextPeriodUrl","max","route_id","success","bind","val","Number","stopStats","stopName","isDayEmpty","dayTimes","isTimeEmpty","timeStats","tripCount","selectedYear","selectedMonth","getMonths","getYears","lastYear","years","realRoutes","m","rr","firstStop","lastStop","graphsUrlParams","graphsUrl","findRoutesByPeriod","routes","isOrigin","isDestination","stopText","barWidth","percentWidth","routeUrl","$rootScope","generatePeriods","fromDate","toDate","periods","start","getDate","toName","until","reverse","dateRange","startPeriod","endPeriod","formValid","goToRoutes","noRoutes","loading","periodStr","path","dismissError","layout","parseInt","highlightLists","kind","items","late","ontime","0","1","2","3","4","5","6","fix","h1","h0","seconds","negative","trunc","minutes","res","factory","stopsMap","routesMap","loadedPromise","response","heb_stop_names","names","r","stop_ids","minDate","min_date","maxDate","max_date","reduce","findStopName","findRoutes","originId","destinationId","matchingRoutes","originIndex","indexOf","destinationIndex","routeStops","Object","keys","r1","r2","defer","routesInDate","reject","msg","promise","service","getRoutes","abbr","scopeProperty","locationProperty","parser","$watch","sep","dd","toString","mm","yyyy","parseMonth","monthString","substr","periodString","parts","split"],"mappings":"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","file":"app.js","sourcesContent":["(function () {\n    var app = angular.module('RouteExplorer', ['ngRoute',\n        'ui.bootstrap',\n        'ui.bootstrap.buttons',\n        'leaflet-directive',\n        \"highcharts-ng\"\n    ]);\n\n    app.constant('env', {\n        baseDir: '/static/ui/RouteExplorer'\n    });\n\n    app.config(['$routeProvider','env',\n        function ($routeProvider, env) {\n\n            var templateUrl = function (templateName) {\n                return env.baseDir + '/tpls/' + templateName + '.html';\n            };\n\n            $routeProvider\n                .when('/', {\n                    pageId: 'welcome',\n                    templateUrl: templateUrl('SelectStops'),\n                    controller: 'SelectStopsController',\n                    resolve: {'Layout': 'Layout'}\n                })\n                .when('/about', {\n                    pageId: 'about',\n                    templateUrl: templateUrl('About')\n                })\n                .when('/:period/select-route/:origin/:destination', {\n                    pageId: 'routes',\n                    templateUrl: templateUrl('SelectRoute'),\n                    controller: 'SelectRouteController',\n                    resolve: {'Layout': 'Layout'},\n                    reloadOnSearch: false\n                })\n                .when('/:period/routes/:routeId', {\n                    pageId: 'route',\n                    templateUrl: templateUrl('RouteDetails'),\n                    controller: 'RouteDetailsController',\n                    resolve: {'Layout': 'Layout'},\n                    reloadOnSearch: false\n                }).when(\"/heat-map\", {\n                    pageId: 'heatMap',\n                    templateUrl: templateUrl('HeatMap'),\n                    controller: 'HeatMapController',\n                    reloadOnSearch: false,\n                    resolve: {'Layout': 'Layout'},\n                }).when(\"/graphs\", {\n                    pageId: 'graphs',\n                    templateUrl: templateUrl('Graphs'),\n                    controller: 'GraphsController',\n                    reloadOnSearch: false,\n                    resolve: {'Layout': 'Layout'},\n                })\n                .when(\"/routes\", {\n                    pageId: 'routes',\n                    templateUrl: templateUrl('RealRoutes'),\n                    controller: 'RealRoutesController',\n                    reloadOnSearch: false,\n                    resolve: {'Layout': 'Layout'},\n                })\n                .when(\"/highlights\", {\n                    pageId: 'highlights',\n                    templateUrl: templateUrl('Highlights'),\n                    controller: 'HighlightsController',\n                    reloadOnSearch: false,\n                    resolve: {'Layout': 'Layout'},\n                })\n                .when(\"/top-highlights\", {\n                    pageId: 'top_highlights',\n                    templateUrl: templateUrl('TopHighlights'),\n                    controller: 'TopHighlightsController',\n                    reloadOnSearch: false,\n                    resolve: {'Layout': 'Layout'},\n                })\n                .otherwise({\n                    redirectTo: '/'\n                });\n        }]);\n})();\n","// String.repeat polyfill\n// taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Polyfill\nif (!String.prototype.repeat) {\n  String.prototype.repeat = function(count) {\n    'use strict';\n    if (this === null) {\n      throw new TypeError('can\\'t convert ' + this + ' to object');\n    }\n    var str = '' + this;\n    count = +count;\n    if (count != count) {\n      count = 0;\n    }\n    if (count < 0) {\n      throw new RangeError('repeat count must be non-negative');\n    }\n    if (count == Infinity) {\n      throw new RangeError('repeat count must be less than infinity');\n    }\n    count = Math.floor(count);\n    if (str.length === 0 || count === 0) {\n      return '';\n    }\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\n    // main part. But anyway, most current (August 2014) browsers can't handle\n    // strings 1 << 28 chars or longer, so:\n    if (str.length * count >= 1 << 28) {\n      throw new RangeError('repeat count must not overflow maximum string size');\n    }\n    var rpt = '';\n    for (;;) {\n      if ((count & 1) == 1) {\n        rpt += str;\n      }\n      count >>>= 1;\n      if (count === 0) {\n        break;\n      }\n      str += str;\n    }\n    return rpt;\n  };\n}\n","angular.module('RouteExplorer').directive(\"rexPercentBar\",\n['env',\nfunction(env) {\n    return {\n        restrict: 'E',\n        scope: {\n          value: '=value',\n          type: '=type'\n        },\n        templateUrl: env.baseDir + '/tpls/PercentBar.html'\n      };\n}]);\n","angular.module('RouteExplorer').directive(\"timesDetails\",\n['env','Layout',\nfunction(env, Layout) {\n    return {\n        restrict: 'E',\n        scope: {\n            stats: '='\n        },\n        controller: 'TimesDetailsController',\n        templateUrl: env.baseDir + '/tpls/TimesDetails.html'\n      };\n}]);\n","angular.module('RouteExplorer').controller('AppController',\nfunction($scope, $location) {\n    'ngInject';\n    $scope.share = function(prefix) {\n        let url = prefix + encodeURIComponent('http://otrain.org/#' + $location.url());\n        window.open(url, 'sharePopup', 'width=600,height=550,top=100,left=100,location=no,scrollbar=no,status=no,menubar=no');\n    };\n\n    $scope.$on('$routeChangeSuccess', function(e, route) {\n        $scope.bodyClass = route.pageId ? 'rex-page-' + route.pageId : null;\n    });\n});\n","'use strict';\nangular.module('RouteExplorer').constant('daysTable',\n    [{\n        value: 0,\n        name: 'ראשון',\n    }, {\n        value: 1,\n        name: 'שני',\n    }, {\n        value: 2,\n        name: 'שלישי',\n    }, {\n        value: 3,\n        name: 'רביעי',\n    }, {\n        value: 4,\n        name: 'חמישי',\n    }, {\n        value: 5,\n        name: 'שישי',\n    }, {\n        value: 6,\n        name: 'שבת',\n    }])\n    //}], {\n    //    value: 'all',\n    //    name: 'שבועי'\n    //}\n    //])\n    .constant(\"monthNames\", [\n        'dummy',\n        'ינואר',\n        'פברואר',\n        'מרץ',\n        'אפריל',\n        'מאי',\n        'יוני',\n        'יולי',\n        'אוגוסט',\n        'ספטמבר',\n        'אוקטובר',\n        'נובמבר',\n        'דצמבר'\n    ]).constant(\"hoursList\", [\n    {\n        name: '4-7',\n        values: [4, 5, 6]\n    },\n    {\n        name: '7-9',\n        values: [7, 8]\n    },\n    {\n        name: '9-12',\n        values: [9,10,11],\n    },\n    {\n        name: '12-15',\n        values: [12,13,14],\n    },\n    {\n        name: '15-18',\n        values: [15,16,17],\n    },\n    {\n        name: '18-21',\n        values: [18, 19,20],\n    },\n    {\n        name: '21-24',\n        values: [21, 22,23],\n    },\n    {\n        name: '24-4',\n        values: [0, 1, 2, 3],\n    }\n]\n);\n\n\nangular.module('RouteExplorer').controller('GraphsController',\n        function ($scope,\n                  $http,\n                  $q,\n                  $timeout,\n                  $location,\n                  Layout,\n                  daysTable,\n                  hoursList,\n                  monthNames) {\n            'ngInject';\n            $scope.wip = true;\n            $scope.Layout = Layout;\n            $scope.input = {\n                graphKind: 'perDay'\n            };\n            $scope.updateSkipped = function() {\n                $scope.refresh(\n                    {'skippedCall': true}\n                );\n            };\n\n            $scope.getSkipped = function() {\n                if (!$scope.fromToStops) {\n                    return undefined;\n                }\n                return $scope.fromToStops.filter(st=>st.skipOnly).map(st=>st.id).join(\",\");\n            }\n\n            $scope.refresh = function (config) {\n                config = config || {};\n                $scope.wip = true;\n                $scope.startStop = $scope.input.startStop;\n                $scope.endStop = $scope.input.endStop;\n                $scope.startDate = $scope.input.startDate.value;\n                $scope.endDate = $scope.input.endDate.value;\n                $location.search({\n                    startStop: $scope.startStop.id,\n                    endStop: $scope.endStop.id,\n                    startDate: $scope.startDate,\n                    endDate: $scope.endDate,\n                });\n                $scope.stops = Layout.getStops();\n                $scope.stopsById = {};\n                $scope.stops.forEach(function (st) {\n                    $scope.stopsById[st.id] = st;\n                });\n                var cbs = [\n                    $http.get('/api/v1/stats/from-to-full/', {\n                        params: {\n                            from_date: $scope.startDate,\n                            to_date: $scope.endDate,\n                            from_stop: $scope.startStop.id,\n                            to_stop: $scope.endStop.id,\n                            skipped: config.skippedCall ? $scope.getSkipped() : undefined,\n                        }\n                    }).then(function (resp) {\n                        $scope.stat = resp.data.table;\n                    })\n                    ];\n                if (!config.skippedCall) {\n                    cbs.push(\n                        $http.get('/api/v1/stops/from-to/', {\n                            params: {\n                                from_stop: $scope.startStop.id,\n                                to_stop: $scope.endStop.id,\n                            }\n                        }).then(function (resp) {\n                            $scope.fromToStopsIds = resp.data;\n                            $scope.fromToStops = $scope.fromToStopsIds.map(stopId => $scope.stopsById[stopId]);\n                            for (let st of $scope.fromToStops) {\n                                st.skipOnly = false;\n                            }\n                        })\n                    );\n                }\n                $q.all(cbs).then(function () {\n                    $scope.wip = false;\n                    $scope.updateChart();\n                });\n            };\n            $scope.getRouteTitle = function (route) {\n                return 'מ' + route.from + ' ל' + route.to + ' (' + route.count + ' ' + 'נסיעות' + ')';\n            }\n\n            $scope.initData = function () {\n                return $scope.buildDates();\n            };\n\n            $scope.buildDates = function () {\n                return $http.get('/api/v1/general/dates-range').then( (resp) => {\n                    let data = resp.data;\n                    var s = [data.first_date.month, data.first_date.year];\n                    var e = [data.last_date.month, data.last_date.year];\n                    $scope.buildDatesRange(s,e);\n                });\n            };\n            $scope.buildDatesRange = function(s,e) {\n                $scope.startDates = [];\n                $scope.endDates = [];\n                while (true) {\n                    let abort = false;\n                    $scope.startDates.push({\n                        name: monthNames[s[0]] + ' ' + s[1],\n                        value: '1-' + s[0] + '-' + s[1],\n                    });\n                    var ns = s[0] == 12 ? [1, s[1] + 1] : [s[0] + 1, s[1]];\n                    $scope.endDates.push({\n                        name: monthNames[s[0]] + ' ' + s[1],\n                        value: '1-' + ns[0] + '-' + ns[1],\n                    });\n                    if ($scope.startDates.length > 100) {\n                        alert(\"error\");\n                        return;\n                    }\n                    if (s[0] == e[0] && s[1] == e[1]) {\n                        return;\n                    }\n                    s = [ns[0], ns[1]];\n                }\n            };\n            $scope.computePerDaySeries = function () {\n                var perDay = {};\n                $scope.stat.forEach(function (st) {\n                    var key = st.stop_id + '-' + st.week_day_local;\n                    perDay[key] = perDay[key] || {\n                            num_trips: 0,\n                            arrival_late_count: 0\n                        };\n                    perDay[key].num_trips += st.num_trips;\n                    perDay[key].arrival_late_count += st.arrival_late_count;\n\n                });\n                var result = [];\n                daysTable.forEach(function (d) {\n                    var data = $scope.fromToStops.map(function (st) {\n                        var entry = perDay[st.id + '-' + d.value];\n                        var result = {};\n                        if (!entry) {\n                            result.y = 0;\n                            result.numTrips = 0;\n                            console.log('no entry for ' + st.id + ' ' + d.value);\n                        } else {\n                            result.y = entry.arrival_late_count * 100.0 / entry.num_trips;\n                            result.numTrips = entry.num_trips;\n                        }\n                        result.lineName = d.name;\n                        return result;\n                    });\n                    result.push({\n                        name: d.name,\n                        data: data\n                    })\n                });\n                return result;\n            };\n            $scope.computePerHoursSeries = function () {\n                var perHour = {};\n                var hoursMapping = {}\n                hoursList.forEach(function(e) {\n                    e.values.forEach(function(h) {\n                        hoursMapping[h] = e;\n                    })\n                });\n                $scope.stat.forEach(function (st) {\n                    var hour_key = hoursMapping[st.hour_local].name;\n                    var key = st.stop_id + '-' + hour_key;\n                    perHour[key] = perHour[key] || {\n                            num_trips: 0,\n                            arrival_late_count: 0\n                        };\n                    perHour[key].num_trips += st.num_trips;\n                    perHour[key].arrival_late_count += st.arrival_late_count;\n\n                });\n                var result = [];\n                hoursList.forEach(function (hl) {\n                    var data = $scope.fromToStops.map(function (st) {\n                        var entry = perHour[st.id + '-' + hl.name];\n                        var result = {};\n                        if (!entry) {\n                            console.log('no entry for ' + st.id + ' ' + hl.name);\n                            result.y = 0;\n                            result.numTrips = 0;\n                        } else {\n                            result.y = entry.arrival_late_count * 100.0 / entry.num_trips;\n                            result.numTrips = entry.num_trips;\n                        }\n                        result.lineName = hl.name;\n                        return result;\n                    });\n                    result.push({\n                        name: hl.name,\n                        data: data\n                    })\n                });\n                return result;\n            }\n            $scope.updateChart = function () {\n                var stopNames = $scope.fromToStops.map(function (st, idx) {\n                    return st.name + ' - ' + (idx + 1);\n                });\n                $scope.perDaySeries = $scope.computePerDaySeries();\n                $scope.perHoursSeries = $scope.computePerHoursSeries();\n\n                var tooltip = {\n                    formatter: function () {\n                        var prec = Math.round(this.y * 100) / 100;\n                        return '<span dir=\"rtl\"><b>' + this.x + '</b>' + '<br/>' +\n                                '<span>' + this.point.lineName + '</span><br/>' +\n                            '<span>רכבות מאחרות:</span>' + prec + '%' + '<br/>' +\n                            '<span>מספר רכבות: </span>' + this.point.numTrips +\n                            '</span>';\n                    },\n                    useHTML: true,\n                };\n                var series = [\n                    {\n                        name: '123',\n                        data: [10, 20, 5, 5, 5, 10, 20, 30, 15, 15, 15]\n                    },\n                    {\n                        name: '456',\n                        data: [8, 8, 8, 12, 7, 20]\n                    },\n                ];\n                $scope.chartPerDay = {\n                    options: {\n                        chart: {\n                            type: 'line'\n                        },\n                        title: {\n                            text: 'איחור בחתך יומי'\n                        },\n                        tooltip: tooltip,\n                    },\n                    xAxis: {\n                        reversed: true,\n                        categories: stopNames,\n                        useHTML: true,\n                    },\n                    yAxis: {\n                        opposite: true,\n                        useHTML: true,\n                        title: {\n                            text: 'אחוזי איחור'\n                        }\n                    },\n                    series: $scope.perDaySeries,\n                };\n                $scope.chartPerHour = {\n                    options: {\n                        chart: {\n                            type: 'line'\n                        },\n                        title: {\n                            text: 'אישור בחתך שעתי'\n                        },\n                        tooltip: tooltip,\n                    },\n                    yAxis: {\n                        useHTML: true,\n                        opposite: true,\n                        title: {\n                            text: 'אחוזי איחור'\n                        }\n                    },\n                    xAxis: {\n                        useHTML: true,\n                        reversed: true,\n                        categories: stopNames,\n                    },\n                    tooltip: {\n                        useHTML: true\n                    },\n                    series: $scope.perHoursSeries,\n                };\n            };\n            $scope.findDate = function (dates, value) {\n                for (var i = 0; i < dates.length; i++) {\n                    if (dates[i].value == value) {\n                        return dates[i];\n                    }\n                }\n                return null;\n            };\n\n            $scope.initData().then(() => {\n                let params = $location.search();\n                $scope.input.startDate = $scope.findDate($scope.startDates, params.startDate) || $scope.startDates[$scope.startDates.length - 1];\n                $scope.input.endDate = $scope.findDate($scope.endDates, params.endDate) || $scope.endDates[$scope.endDates.length - 1];\n                $scope.input.startStop = Layout.findStop(params.startStop || 400);\n                $scope.input.endStop = Layout.findStop(params.endStop || 3700)\n                $scope.refresh();\n            });\n        });\n\n\n\n\n\n","'use strict';\n\n(function () {\n    var app = angular.module('RouteExplorer', ['ngRoute', 'ui.bootstrap', 'ui.bootstrap.buttons', 'leaflet-directive', \"highcharts-ng\"]);\n\n    app.constant('env', {\n        baseDir: '/static/ui/RouteExplorer'\n    });\n\n    app.config(['$routeProvider', 'env', function ($routeProvider, env) {\n\n        var templateUrl = function templateUrl(templateName) {\n            return env.baseDir + '/tpls/' + templateName + '.html';\n        };\n\n        $routeProvider.when('/', {\n            pageId: 'welcome',\n            templateUrl: templateUrl('SelectStops'),\n            controller: 'SelectStopsController',\n            resolve: { 'Layout': 'Layout' }\n        }).when('/about', {\n            pageId: 'about',\n            templateUrl: templateUrl('About')\n        }).when('/:period/select-route/:origin/:destination', {\n            pageId: 'routes',\n            templateUrl: templateUrl('SelectRoute'),\n            controller: 'SelectRouteController',\n            resolve: { 'Layout': 'Layout' },\n            reloadOnSearch: false\n        }).when('/:period/routes/:routeId', {\n            pageId: 'route',\n            templateUrl: templateUrl('RouteDetails'),\n            controller: 'RouteDetailsController',\n            resolve: { 'Layout': 'Layout' },\n            reloadOnSearch: false\n        }).when(\"/heat-map\", {\n            pageId: 'heatMap',\n            templateUrl: templateUrl('HeatMap'),\n            controller: 'HeatMapController',\n            reloadOnSearch: false,\n            resolve: { 'Layout': 'Layout' }\n        }).when(\"/graphs\", {\n            pageId: 'graphs',\n            templateUrl: templateUrl('Graphs'),\n            controller: 'GraphsController',\n            reloadOnSearch: false,\n            resolve: { 'Layout': 'Layout' }\n        }).when(\"/routes\", {\n            pageId: 'routes',\n            templateUrl: templateUrl('RealRoutes'),\n            controller: 'RealRoutesController',\n            reloadOnSearch: false,\n            resolve: { 'Layout': 'Layout' }\n        }).when(\"/highlights\", {\n            pageId: 'highlights',\n            templateUrl: templateUrl('Highlights'),\n            controller: 'HighlightsController',\n            reloadOnSearch: false,\n            resolve: { 'Layout': 'Layout' }\n        }).when(\"/top-highlights\", {\n            pageId: 'top_highlights',\n            templateUrl: templateUrl('TopHighlights'),\n            controller: 'TopHighlightsController',\n            reloadOnSearch: false,\n            resolve: { 'Layout': 'Layout' }\n        }).otherwise({\n            redirectTo: '/'\n        });\n    }]);\n})();\n'use strict';\n\n// String.repeat polyfill\n// taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Polyfill\nif (!String.prototype.repeat) {\n  String.prototype.repeat = function (count) {\n    'use strict';\n\n    if (this === null) {\n      throw new TypeError('can\\'t convert ' + this + ' to object');\n    }\n    var str = '' + this;\n    count = +count;\n    if (count != count) {\n      count = 0;\n    }\n    if (count < 0) {\n      throw new RangeError('repeat count must be non-negative');\n    }\n    if (count == Infinity) {\n      throw new RangeError('repeat count must be less than infinity');\n    }\n    count = Math.floor(count);\n    if (str.length === 0 || count === 0) {\n      return '';\n    }\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\n    // main part. But anyway, most current (August 2014) browsers can't handle\n    // strings 1 << 28 chars or longer, so:\n    if (str.length * count >= 1 << 28) {\n      throw new RangeError('repeat count must not overflow maximum string size');\n    }\n    var rpt = '';\n    for (;;) {\n      if ((count & 1) == 1) {\n        rpt += str;\n      }\n      count >>>= 1;\n      if (count === 0) {\n        break;\n      }\n      str += str;\n    }\n    return rpt;\n  };\n}\n'use strict';\n\nangular.module('RouteExplorer').directive(\"rexPercentBar\", ['env', function (env) {\n  return {\n    restrict: 'E',\n    scope: {\n      value: '=value',\n      type: '=type'\n    },\n    templateUrl: env.baseDir + '/tpls/PercentBar.html'\n  };\n}]);\n'use strict';\n\nangular.module('RouteExplorer').directive(\"timesDetails\", ['env', 'Layout', function (env, Layout) {\n    return {\n        restrict: 'E',\n        scope: {\n            stats: '='\n        },\n        controller: 'TimesDetailsController',\n        templateUrl: env.baseDir + '/tpls/TimesDetails.html'\n    };\n}]);\n'use strict';\n\nangular.module('RouteExplorer').controller('AppController', [\"$scope\", \"$location\", function ($scope, $location) {\n    'ngInject';\n\n    $scope.share = function (prefix) {\n        var url = prefix + encodeURIComponent('http://otrain.org/#' + $location.url());\n        window.open(url, 'sharePopup', 'width=600,height=550,top=100,left=100,location=no,scrollbar=no,status=no,menubar=no');\n    };\n\n    $scope.$on('$routeChangeSuccess', function (e, route) {\n        $scope.bodyClass = route.pageId ? 'rex-page-' + route.pageId : null;\n    });\n}]);\n'use strict';\n\nangular.module('RouteExplorer').constant('daysTable', [{\n    value: 0,\n    name: 'ראשון'\n}, {\n    value: 1,\n    name: 'שני'\n}, {\n    value: 2,\n    name: 'שלישי'\n}, {\n    value: 3,\n    name: 'רביעי'\n}, {\n    value: 4,\n    name: 'חמישי'\n}, {\n    value: 5,\n    name: 'שישי'\n}, {\n    value: 6,\n    name: 'שבת'\n}])\n//}], {\n//    value: 'all',\n//    name: 'שבועי'\n//}\n//])\n.constant(\"monthNames\", ['dummy', 'ינואר', 'פברואר', 'מרץ', 'אפריל', 'מאי', 'יוני', 'יולי', 'אוגוסט', 'ספטמבר', 'אוקטובר', 'נובמבר', 'דצמבר']).constant(\"hoursList\", [{\n    name: '4-7',\n    values: [4, 5, 6]\n}, {\n    name: '7-9',\n    values: [7, 8]\n}, {\n    name: '9-12',\n    values: [9, 10, 11]\n}, {\n    name: '12-15',\n    values: [12, 13, 14]\n}, {\n    name: '15-18',\n    values: [15, 16, 17]\n}, {\n    name: '18-21',\n    values: [18, 19, 20]\n}, {\n    name: '21-24',\n    values: [21, 22, 23]\n}, {\n    name: '24-4',\n    values: [0, 1, 2, 3]\n}]);\n\nangular.module('RouteExplorer').controller('GraphsController', [\"$scope\", \"$http\", \"$q\", \"$timeout\", \"$location\", \"Layout\", \"daysTable\", \"hoursList\", \"monthNames\", function ($scope, $http, $q, $timeout, $location, Layout, daysTable, hoursList, monthNames) {\n    'ngInject';\n\n    $scope.wip = true;\n    $scope.Layout = Layout;\n    $scope.input = {\n        graphKind: 'perDay'\n    };\n    $scope.updateSkipped = function () {\n        $scope.refresh({ 'skippedCall': true });\n    };\n\n    $scope.getSkipped = function () {\n        if (!$scope.fromToStops) {\n            return undefined;\n        }\n        return $scope.fromToStops.filter(function (st) {\n            return st.skipOnly;\n        }).map(function (st) {\n            return st.id;\n        }).join(\",\");\n    };\n\n    $scope.refresh = function (config) {\n        config = config || {};\n        $scope.wip = true;\n        $scope.startStop = $scope.input.startStop;\n        $scope.endStop = $scope.input.endStop;\n        $scope.startDate = $scope.input.startDate.value;\n        $scope.endDate = $scope.input.endDate.value;\n        $location.search({\n            startStop: $scope.startStop.id,\n            endStop: $scope.endStop.id,\n            startDate: $scope.startDate,\n            endDate: $scope.endDate\n        });\n        $scope.stops = Layout.getStops();\n        $scope.stopsById = {};\n        $scope.stops.forEach(function (st) {\n            $scope.stopsById[st.id] = st;\n        });\n        var cbs = [$http.get('/api/v1/stats/from-to-full/', {\n            params: {\n                from_date: $scope.startDate,\n                to_date: $scope.endDate,\n                from_stop: $scope.startStop.id,\n                to_stop: $scope.endStop.id,\n                skipped: config.skippedCall ? $scope.getSkipped() : undefined\n            }\n        }).then(function (resp) {\n            $scope.stat = resp.data.table;\n        })];\n        if (!config.skippedCall) {\n            cbs.push($http.get('/api/v1/stops/from-to/', {\n                params: {\n                    from_stop: $scope.startStop.id,\n                    to_stop: $scope.endStop.id\n                }\n            }).then(function (resp) {\n                $scope.fromToStopsIds = resp.data;\n                $scope.fromToStops = $scope.fromToStopsIds.map(function (stopId) {\n                    return $scope.stopsById[stopId];\n                });\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = $scope.fromToStops[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var st = _step.value;\n\n                        st.skipOnly = false;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }));\n        }\n        $q.all(cbs).then(function () {\n            $scope.wip = false;\n            $scope.updateChart();\n        });\n    };\n    $scope.getRouteTitle = function (route) {\n        return 'מ' + route.from + ' ל' + route.to + ' (' + route.count + ' ' + 'נסיעות' + ')';\n    };\n\n    $scope.initData = function () {\n        return $scope.buildDates();\n    };\n\n    $scope.buildDates = function () {\n        return $http.get('/api/v1/general/dates-range').then(function (resp) {\n            var data = resp.data;\n            var s = [data.first_date.month, data.first_date.year];\n            var e = [data.last_date.month, data.last_date.year];\n            $scope.buildDatesRange(s, e);\n        });\n    };\n    $scope.buildDatesRange = function (s, e) {\n        $scope.startDates = [];\n        $scope.endDates = [];\n        while (true) {\n            var abort = false;\n            $scope.startDates.push({\n                name: monthNames[s[0]] + ' ' + s[1],\n                value: '1-' + s[0] + '-' + s[1]\n            });\n            var ns = s[0] == 12 ? [1, s[1] + 1] : [s[0] + 1, s[1]];\n            $scope.endDates.push({\n                name: monthNames[s[0]] + ' ' + s[1],\n                value: '1-' + ns[0] + '-' + ns[1]\n            });\n            if ($scope.startDates.length > 100) {\n                alert(\"error\");\n                return;\n            }\n            if (s[0] == e[0] && s[1] == e[1]) {\n                return;\n            }\n            s = [ns[0], ns[1]];\n        }\n    };\n    $scope.computePerDaySeries = function () {\n        var perDay = {};\n        $scope.stat.forEach(function (st) {\n            var key = st.stop_id + '-' + st.week_day_local;\n            perDay[key] = perDay[key] || {\n                num_trips: 0,\n                arrival_late_count: 0\n            };\n            perDay[key].num_trips += st.num_trips;\n            perDay[key].arrival_late_count += st.arrival_late_count;\n        });\n        var result = [];\n        daysTable.forEach(function (d) {\n            var data = $scope.fromToStops.map(function (st) {\n                var entry = perDay[st.id + '-' + d.value];\n                var result = {};\n                if (!entry) {\n                    result.y = 0;\n                    result.numTrips = 0;\n                    console.log('no entry for ' + st.id + ' ' + d.value);\n                } else {\n                    result.y = entry.arrival_late_count * 100.0 / entry.num_trips;\n                    result.numTrips = entry.num_trips;\n                }\n                result.lineName = d.name;\n                return result;\n            });\n            result.push({\n                name: d.name,\n                data: data\n            });\n        });\n        return result;\n    };\n    $scope.computePerHoursSeries = function () {\n        var perHour = {};\n        var hoursMapping = {};\n        hoursList.forEach(function (e) {\n            e.values.forEach(function (h) {\n                hoursMapping[h] = e;\n            });\n        });\n        $scope.stat.forEach(function (st) {\n            var hour_key = hoursMapping[st.hour_local].name;\n            var key = st.stop_id + '-' + hour_key;\n            perHour[key] = perHour[key] || {\n                num_trips: 0,\n                arrival_late_count: 0\n            };\n            perHour[key].num_trips += st.num_trips;\n            perHour[key].arrival_late_count += st.arrival_late_count;\n        });\n        var result = [];\n        hoursList.forEach(function (hl) {\n            var data = $scope.fromToStops.map(function (st) {\n                var entry = perHour[st.id + '-' + hl.name];\n                var result = {};\n                if (!entry) {\n                    console.log('no entry for ' + st.id + ' ' + hl.name);\n                    result.y = 0;\n                    result.numTrips = 0;\n                } else {\n                    result.y = entry.arrival_late_count * 100.0 / entry.num_trips;\n                    result.numTrips = entry.num_trips;\n                }\n                result.lineName = hl.name;\n                return result;\n            });\n            result.push({\n                name: hl.name,\n                data: data\n            });\n        });\n        return result;\n    };\n    $scope.updateChart = function () {\n        var stopNames = $scope.fromToStops.map(function (st, idx) {\n            return st.name + ' - ' + (idx + 1);\n        });\n        $scope.perDaySeries = $scope.computePerDaySeries();\n        $scope.perHoursSeries = $scope.computePerHoursSeries();\n\n        var tooltip = {\n            formatter: function formatter() {\n                var prec = Math.round(this.y * 100) / 100;\n                return '<span dir=\"rtl\"><b>' + this.x + '</b>' + '<br/>' + '<span>' + this.point.lineName + '</span><br/>' + '<span>רכבות מאחרות:</span>' + prec + '%' + '<br/>' + '<span>מספר רכבות: </span>' + this.point.numTrips + '</span>';\n            },\n            useHTML: true\n        };\n        var series = [{\n            name: '123',\n            data: [10, 20, 5, 5, 5, 10, 20, 30, 15, 15, 15]\n        }, {\n            name: '456',\n            data: [8, 8, 8, 12, 7, 20]\n        }];\n        $scope.chartPerDay = {\n            options: {\n                chart: {\n                    type: 'line'\n                },\n                title: {\n                    text: 'איחור בחתך יומי'\n                },\n                tooltip: tooltip\n            },\n            xAxis: {\n                reversed: true,\n                categories: stopNames,\n                useHTML: true\n            },\n            yAxis: {\n                opposite: true,\n                useHTML: true,\n                title: {\n                    text: 'אחוזי איחור'\n                }\n            },\n            series: $scope.perDaySeries\n        };\n        $scope.chartPerHour = {\n            options: {\n                chart: {\n                    type: 'line'\n                },\n                title: {\n                    text: 'אישור בחתך שעתי'\n                },\n                tooltip: tooltip\n            },\n            yAxis: {\n                useHTML: true,\n                opposite: true,\n                title: {\n                    text: 'אחוזי איחור'\n                }\n            },\n            xAxis: {\n                useHTML: true,\n                reversed: true,\n                categories: stopNames\n            },\n            tooltip: {\n                useHTML: true\n            },\n            series: $scope.perHoursSeries\n        };\n    };\n    $scope.findDate = function (dates, value) {\n        for (var i = 0; i < dates.length; i++) {\n            if (dates[i].value == value) {\n                return dates[i];\n            }\n        }\n        return null;\n    };\n\n    $scope.initData().then(function () {\n        var params = $location.search();\n        $scope.input.startDate = $scope.findDate($scope.startDates, params.startDate) || $scope.startDates[$scope.startDates.length - 1];\n        $scope.input.endDate = $scope.findDate($scope.endDates, params.endDate) || $scope.endDates[$scope.endDates.length - 1];\n        $scope.input.startStop = Layout.findStop(params.startStop || 400);\n        $scope.input.endStop = Layout.findStop(params.endStop || 3700);\n        $scope.refresh();\n    });\n}]);\n'use strict';\n\nangular.module('RouteExplorer').controller('HeatMapController', [\"$scope\", \"$http\", \"Layout\", function ($scope, $http, Layout) {\n    \"ngInject\";\n\n    $scope.Layout = Layout;\n    var ta = $scope.Layout.findStop(4600); // TA HASHALOM\n    console.log(ta);\n    angular.extend($scope, {\n        defaults: {\n            scrollWheelZoom: false\n        },\n        center: {\n            lat: ta.latlon[0],\n            lng: ta.latlon[1],\n            zoom: 10\n        }\n    });\n    $scope.stops = Layout.getStops();\n    $scope.input = {\n        stop: $scope.stops[0]\n    };\n    $scope.paths = [];\n    $http.get('/api/v1/heat-map/').then(function (resp) {\n        $scope.heatmapData = resp.data;\n        //var maxScore = 0;\n        //var minScore = 1;\n\n        //$scope.heatmapData.forEach(function(score) {\n        //    maxScore = Math.max(score.score, maxScore);\n        //    minScore = Math.min(score.score, minScore);\n        //});\n\n        $scope.heatmapData.forEach(function (score) {\n            var latlng = $scope.Layout.findStop(score.stop_id).latlon;\n            var g = 255 - Math.floor(255 * score.score);\n            var color = 'rgb(255,' + g + ',0)';\n            var message = $scope.Layout.findStop(score.stop_id).name + '<br/>' + Math.floor(score.score * 100) / 100;\n            $scope.paths.push({\n                color: color,\n                fillColor: color,\n                fillOpacity: 1,\n                type: \"circleMarker\",\n                stroke: false,\n                radius: 10,\n                latlngs: latlng,\n                message: message,\n                popupOptions: {\n                    className: 'ot-popup'\n                }\n            });\n        });\n    });\n}]);\n'use strict';\n\nangular.module('RouteExplorer').controller('HighlightsController', [\"$scope\", \"$http\", \"$q\", \"$timeout\", \"$location\", \"Layout\", \"daysTable\", \"hoursList\", \"monthNames\", function ($scope, $http, $q, $timeout, $location, Layout, daysTable, hoursList, monthNames) {\n    'ngInject';\n\n    $scope.init = function () {\n        $http.get(\"/api/v1/highlights/\").then(function (resp) {\n            $scope.highlights = resp.data.highlights;\n            $scope.url = resp.data.url;\n            $scope.fields = [{\n                name: 'תאריך',\n                sortKey: function sortKey(v) {\n                    return v.year * 100 + v.month;\n                }\n            }, {\n                name: 'מספר נסיעות',\n                sortKey: function sortKey(v) {\n                    return v.num_trips;\n                },\n                initialDesc: true\n            }, {\n                name: 'יום בשבוע',\n                sortKey: function sortKey(v) {\n                    if (v.week_day == 'all') {\n                        return -1;\n                    }\n                    return v.week_day;\n                }\n            }, {\n                name: 'שעות',\n                sortKey: function sortKey(v) {\n                    if (v.hours == 'all') {\n                        return -1;\n                    }\n                    return v.hours[1];\n                }\n            }, {\n                name: '% איחורים מעל 5 דקות',\n                active: true,\n                asc: false,\n                initialDesc: true,\n                sortKey: function sortKey(v) {\n                    return v.mean_arrival_late_pct;\n                }\n            }, {\n                name: 'קישור',\n                disableSort: true\n            }];\n            $scope.refresh();\n        });\n    };\n    $scope.sortBy = function (activeField) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = $scope.fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var f = _step.value;\n\n                if (f != activeField) {\n                    f.active = false;\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        if (activeField.active) {\n            activeField.asc = !activeField.asc;\n        } else {\n            activeField.active = true;\n            activeField.asc = !activeField.initialDesc;\n        }\n        $scope.refresh();\n    };\n    $scope.refresh = function () {\n        var activeField = null;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n            for (var _iterator2 = $scope.fields[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var f = _step2.value;\n\n                if (f.active) {\n                    activeField = f;\n                }\n            }\n        } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                    _iterator2.return();\n                }\n            } finally {\n                if (_didIteratorError2) {\n                    throw _iteratorError2;\n                }\n            }\n        }\n\n        if (!activeField) {\n            return;\n        }\n        $scope.highlights.sort(function (v1, v2) {\n            var k1 = activeField.sortKey(v1);\n            var k2 = activeField.sortKey(v2);\n            var asc = activeField.asc ? 1 : -1;\n            if (k1 > k2) {\n                return 1 * asc;\n            }\n            if (k1 < k2) {\n                return -1 * asc;\n            }\n            return 0;\n        });\n    };\n    $scope.init();\n}]);\n'use strict';\n\nangular.module('RouteExplorer').controller('RouteDetailsController', [\"$scope\", \"$route\", \"$http\", \"$location\", \"LocationBinder\", \"Layout\", \"Locale\", \"TimeParser\", function ($scope, $route, $http, $location, LocationBinder, Layout, Locale, TimeParser) {\n    \"ngInject\";\n\n    var routeParams = $route.current.params;\n\n    var period = TimeParser.parsePeriod(routeParams.period);\n    var startDate = TimeParser.createRequestString(period.from);\n    var endDate = TimeParser.createRequestString(period.end);\n\n    var routeId = routeParams.routeId;\n    var stopIds = Layout.findRoute(routeId).stops;\n    var statsMap = {};\n\n    $scope.loaded = false;\n    $scope.stopIds = stopIds;\n    $scope.origin = stopIds[0];\n    $scope.destination = stopIds[stopIds.length - 1];\n\n    $scope.selectedPeriod = formatMonth(period.from);\n    if (period.to > period.from) {\n        $scope.selectedPeriod += ' \\u2014 ' + formatMonth(period.to);\n    }\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    $scope.selectRouteUrl = '#/' + routeParams.period + '/select-route/' + $scope.origin + '/' + $scope.destination;\n\n    var previousPeriod = offsetPeriod(period, -1);\n    var nextPeriod = offsetPeriod(period, +1);\n    var bounds = Layout.getRoutesDateRange();\n    var day = 10 * 24 * 60 * 60 * 1000;\n    $scope.previousPeriodUrl = bounds.min.getTime() - day < previousPeriod.from.getTime() ? '#/' + TimeParser.formatPeriod(previousPeriod) + '/routes/' + routeId : null;\n    $scope.nextPeriodUrl = bounds.max > nextPeriod.to ? '#/' + TimeParser.formatPeriod(nextPeriod) + '/routes/' + routeId : null;\n\n    $http.get('/api/v1/stats/route-info-full', { params: { route_id: routeId, from_date: startDate, to_date: endDate } }).success(function (data) {\n        loadStats(data);\n        $scope.loaded = true;\n    });\n\n    LocationBinder.bind($scope, 'selectedDay', 'day', function (val) {\n        return val ? Number(val) : null;\n    });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n\n    $scope.stopStats = function (stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId) return stats[i];\n        }\n        return null;\n    };\n\n    $scope.stopName = function (stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop) return null;\n\n        return stop.name;\n    };\n\n    $scope.isDayEmpty = function (day) {\n        var dayId = day.id;\n        var dayTimes = statsMap[dayId];\n\n        if (!dayTimes) return true;\n\n        for (var time in dayTimes) {\n            if (dayTimes[time].info.num_trips > 0) return false;\n        }return true;\n    };\n\n    $scope.isTimeEmpty = function (time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0) return false;\n\n        return true;\n    };\n\n    $scope.tripCount = function (dayId, timeId) {\n        var stats = getStats(dayId, timeId);\n        if (!stats) return 0;\n\n        return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n        dayId = dayId || 'all';\n        timeId = timeId || 'all';\n        return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats) return stats.stops;\n\n        return [];\n    }\n\n    function loadStats(data) {\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId]) statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n    }\n\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear();\n    }\n\n    function offsetMonth(date, offset) {\n        var d = new Date(date);\n        d.setMonth(d.getMonth() + offset);\n        return d;\n    }\n\n    function offsetPeriod(period, offset) {\n        var size = (period.to.getFullYear() - period.from.getFullYear()) * 12 + period.to.getMonth() - period.from.getMonth() + 1;\n\n        return {\n            from: offsetMonth(period.from, size * offset),\n            to: offsetMonth(period.to, size * offset),\n            end: offsetMonth(period.end, size * offset)\n        };\n    }\n}]);\n'use strict';\n\nangular.module('RouteExplorer').controller('RealRoutesController', [\"$scope\", \"$http\", \"$q\", \"$timeout\", \"$location\", \"Layout\", \"daysTable\", \"hoursList\", \"monthNames\", function ($scope, $http, $q, $timeout, $location, Layout, daysTable, hoursList, monthNames) {\n    'ngInject';\n\n    $scope.selectedYear = 2017;\n    $scope.selectedMonth = 9;\n    $scope.getMonths = function () {\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n    };\n    $scope.getYears = function () {\n        var result = [];\n        var lastYear = new Date().getFullYear();\n        var y = 2015;\n        while (y <= lastYear) {\n            result.push(y);\n            y++;\n        }\n        return result;\n    };\n    $scope.init = function () {\n        $scope.months = $scope.getMonths();\n        $scope.years = $scope.getYears();\n    };\n    $scope.refresh = function () {\n        $scope.realRoutes = null;\n        var y = $scope.selectedYear;\n        var m = $scope.selectedMonth;\n        $http.get('/api/v1/real-routes/' + y + '/' + m + '/').then(function (resp) {\n            $scope.realRoutes = resp.data;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = $scope.realRoutes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var rr = _step.value;\n\n                    console.log(rr);\n                    rr.firstStop = rr.stops[0];\n                    rr.lastStop = rr.stops[rr.stops.length - 1];\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        });\n    };\n    $scope.init();\n}]);\n'use strict';\n\nangular.module('RouteExplorer').controller('SelectRouteController', [\"$scope\", \"$http\", \"$location\", \"$route\", \"Layout\", \"TimeParser\", function ($scope, $http, $location, $route, Layout, TimeParser) {\n    'ngInject';\n\n    $scope.stops = Layout.getStops();\n    var period = TimeParser.parsePeriod($route.current.params.period);\n    var origin = Layout.findStop($route.current.params.origin);\n    var destination = Layout.findStop($route.current.params.destination);\n\n    var graphsUrlParams = ['startStop=' + origin.id, 'endStop=' + destination.id, 'startDate=' + TimeParser.createRequestString(period.from, '-'), 'endDate=' + TimeParser.createRequestString(period.end, '-')];\n    $scope.graphsUrl = \"#/graphs?\" + graphsUrlParams.join(\"&\");\n\n    $http.get('/api/v1/stats/path-info-full/', { params: {\n            origin: origin.id,\n            destination: destination.id,\n            from_date: TimeParser.createRequestString(period.from),\n            to_date: TimeParser.createRequestString(period.end) }\n    }).success(function (data) {\n        loadStats(data);\n        $scope.loaded = true;\n    });\n\n    var statsMap = {};\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear();\n    }\n\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n    function loadStats(data) {\n        $scope.stats = data;\n    }\n\n    Layout.findRoutesByPeriod(origin.id, destination.id, period.from, period.end).then(function (routes) {\n        $scope.routes = routes;\n    });\n\n    function stopName(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop) return null;\n\n        return stop.name;\n    }\n\n    $scope.isOrigin = function (stopId) {\n        return stopId == origin.id;\n    };\n\n    $scope.isDestination = function (stopId) {\n        return stopId == destination.id;\n    };\n\n    $scope.stopText = function (stopId) {\n        return stopName(stopId);\n    };\n\n    $scope.barWidth = function (route) {\n        var percentWidth = route.count * 100.0 / $scope.routes[0].count;\n\n        if (percentWidth < 1.0) return \"1px\";\n\n        return percentWidth + \"%\";\n    };\n\n    $scope.routeUrl = function (route) {\n        return '/#/' + $route.current.params.period + '/routes/' + route.id;\n    };\n}]);\n'use strict';\n\nangular.module('RouteExplorer').controller('SelectStopsController', ['$scope', '$rootScope', '$location', 'Layout', 'Locale', 'TimeParser', function ($scope, $rootScope, $location, Layout, Locale, TimeParser) {\n    'ngInject';\n\n    $scope.stops = Layout.getStops();\n    $scope.origin = null;\n    $scope.destination = null;\n    $scope.months = Locale.months;\n\n    var dateRange = Layout.getRoutesDateRange();\n    $scope.periods = generatePeriods(dateRange.min, dateRange.max);\n    $scope.startPeriod = $scope.periods[0];\n    $scope.endPeriod = $scope.periods[0];\n\n    $scope.formValid = function () {\n        return !!$scope.origin && !!$scope.destination && $scope.origin != $scope.destination && $scope.startPeriod.from <= $scope.endPeriod.to;\n    };\n\n    $scope.stopName = function (stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop) return null;\n\n        return stop.name;\n    };\n\n    $scope.goToRoutes = function () {\n        $scope.noRoutes = false;\n        $scope.loading = true;\n        var period = {\n            from: $scope.startPeriod.from,\n            to: $scope.endPeriod.to,\n            end: $scope.endPeriod.end\n        };\n        var fromDate = period.from;\n        var toDate = period.end;\n        var periodStr = TimeParser.formatPeriod(period);\n        Layout.findRoutesByPeriod($scope.origin.id, $scope.destination.id, fromDate, toDate).then(function (routes) {\n            if (routes.length === 0) {\n                $scope.noRoutes = true;\n            } else if (routes.length == 1) {\n                $location.path('/' + periodStr + '/routes/' + routes[0].id);\n            } else {\n                $location.path('/' + periodStr + '/select-route/' + $scope.origin.id + '/' + $scope.destination.id);\n            }\n        }).finally(function () {\n            $scope.loading = false;\n        });\n    };\n\n    $scope.dismissError = function () {\n        $scope.noRoutes = false;\n    };\n\n    function generatePeriods(fromDate, toDate) {\n        // fromDate=1970-1-1 due to a data bug. This is a quick temporary workaround\n        if (fromDate.getFullYear() < 2013) fromDate = new Date(2013, 0, 1);\n\n        var periods = [];\n        var start = new Date(fromDate.getFullYear(), fromDate.getMonth(), 1);\n        while (start < toDate) {\n            var end = new Date(start.getFullYear(), start.getMonth() + 1, start.getDate());\n            var period = {\n                from: start,\n                to: start,\n                end: end,\n                name: Locale.months[start.getMonth()].name + \" \" + start.getFullYear()\n            };\n            period.toName = Locale.until + period.name;\n            periods.push(period);\n            start = end;\n        }\n        periods.reverse();\n        return periods;\n    }\n}]);\n'use strict';\n\nangular.module('RouteExplorer').controller('TimesDetailsController', [\"$scope\", \"$route\", \"Locale\", \"LocationBinder\", \"Layout\", function ($scope, $route, Locale, LocationBinder, Layout) {\n    'ngInject';\n\n    Layout.then(function (Layout) {\n        $scope.layout = Layout;\n    });\n    $scope.layout = null;\n\n    var statsMap = {};\n    var routeParams = $route.current.params;\n    $scope.stopIds = [parseInt(routeParams.origin), parseInt(routeParams.destination)];\n    LocationBinder.bind($scope, 'selectedDay', 'day', function (val) {\n        return val ? Number(val) : null;\n    });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear();\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats) return stats.stops;\n\n        return [];\n    }\n\n    $scope.stopName = function (stopId) {\n        if ($scope.layout) {\n            var stop = $scope.layout.findStop(stopId);\n            if (!stop) return null;\n\n            return stop.name;\n        } else {\n            return null;\n        }\n    };\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    $scope.loadStats = function () {\n        var data = $scope.stats;\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId]) statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n    };\n    $scope.tripCount = function (dayId, timeId) {\n        var stats = getStats(dayId, timeId);\n        if (!stats) return 0;\n\n        return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n        dayId = dayId || 'all';\n        timeId = timeId || 'all';\n        return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    $scope.isTimeEmpty = function (time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0) return false;\n\n        return true;\n    };\n\n    $scope.stopStats = function (stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId) return stats[i];\n        }\n        return null;\n    };\n\n    $scope.loadStats();\n}]);\n'use strict';\n\nangular.module('RouteExplorer').controller('TopHighlightsController', [\"$scope\", \"$http\", \"$q\", \"$timeout\", \"$location\", \"Layout\", \"daysTable\", \"hoursList\", \"monthNames\", function ($scope, $http, $q, $timeout, $location, Layout, daysTable, hoursList, monthNames) {\n    'ngInject';\n\n    $scope.init = function () {\n        $http.get(\"/api/v1/highlights/top/\").then(function (resp) {\n            var data = resp.data.highlights;\n            $scope.highlightLists = [{\n                'kind': 'late',\n                'title': 'נסיעה באיחור',\n                'items': data.late,\n                'color': 'danger'\n            }, {\n                'kind': 'ontime',\n                'title': 'נסיעה בזמן',\n                'items': data.ontime,\n                'color': 'success'\n            }];\n        });\n    };\n    $scope.init();\n}]);\n'use strict';\n\nvar daysTable = {\n    0: 'ראשון',\n    1: 'שני',\n    2: 'שלישי',\n    3: 'רביעי',\n    4: 'חמישי',\n    5: 'שישי',\n    6: 'שבת'\n};\n\nangular.module('RouteExplorer').filter('week_day1', function () {\n    return function (day) {\n        if (day == 'all') {\n            return 'כל הימים';\n        }\n        return daysTable[day - 1] || '??? ' + day;\n    };\n}).filter('week_day0', function () {\n    return function (day) {\n        if (day == 'all') {\n            return 'כל הימים';\n        }\n        return daysTable[day] || '??? ' + day;\n    };\n}).filter('hours', function () {\n    return function (hours) {\n        var fix = function fix(h) {\n            return h >= 24 ? h % 24 : h;\n        };\n        if (hours == 'all') {\n            return 'כל היום';\n        }\n        var h1 = fix(hours[1]);\n        var h0 = fix(hours[0]);\n        return h1 + ' - ' + h0;\n    };\n}).filter('month_name', function () {\n    var months = ['ינואר', 'פברואר', 'מרץ', 'אפריל', 'מאי', 'יוני', 'יולי', 'אוגוסט', 'ספטמבר', 'אוקטובר', 'נובמבר', 'דצמבר'];\n    return function (m) {\n        return months[m - 1];\n    };\n});\n'use strict';\n\nangular.module('RouteExplorer').filter('duration', function () {\n    return function (seconds) {\n        var negative = false;\n        seconds = Math.trunc(seconds);\n        if (seconds < 0) {\n            negative = true;\n            seconds = -seconds;\n        }\n\n        var minutes = Math.trunc(seconds / 60);\n        seconds -= minutes * 60;\n        var hours = Math.trunc(minutes / 60);\n        minutes -= hours * 60;\n\n        if (seconds < 10) seconds = '0' + seconds;\n        if (minutes < 10 && hours !== 0) minutes = '0' + minutes;\n\n        var res = minutes + ':' + seconds;\n        if (hours !== 0) res = hours + ':' + res;\n\n        if (negative) res = '-' + res;\n\n        return res;\n    };\n});\n'use strict';\n\nangular.module('RouteExplorer').factory('Layout', ['$http', '$q', 'TimeParser', function ($http, $q, TimeParser) {\n    var self = this;\n    var stops = [];\n    var stopsMap = {};\n    var routes = [];\n    var routesMap = {};\n\n    var loadedPromise = $q.all([$http.get('/api/v1/stops/').then(function (response) {\n        stops = response.data.map(function (s) {\n            return {\n                id: s.stop_id,\n                name: s.heb_stop_names[0],\n                names: s.heb_stop_names,\n                latlon: s.latlon\n            };\n        });\n        stops.forEach(function (s) {\n            stopsMap[s.id] = s;\n        });\n    }), $http.get('/api/v1/routes/all/').then(function (response) {\n        routes = response.data.map(function (r) {\n            return {\n                id: r.id,\n                stops: r.stop_ids,\n                count: r.count,\n                minDate: new Date(r.min_date),\n                maxDate: new Date(r.max_date)\n            };\n        });\n\n        routesMap = routes.reduce(function (m, r) {\n            m[r.id] = r;return m;\n        }, {});\n    })]);\n\n    var findStop = function findStop(stopId) {\n        return stopsMap[stopId] || null;\n    };\n\n    var findStopName = function findStopName(stopId) {\n        return findStop(stopId).name;\n    };\n\n    var _findRoutes = function _findRoutes(routes, originId, destinationId) {\n        var matchingRoutes = {};\n\n        routes.forEach(function (r) {\n            var originIndex = r.stops.indexOf(originId);\n            var destinationIndex = r.stops.indexOf(destinationId);\n\n            if (originIndex < 0 || destinationIndex < 0) return;\n\n            if (originIndex > destinationIndex) return;\n\n            var routeStops = r.stops;\n            var routeId = r.id;\n\n            if (routeId in matchingRoutes) matchingRoutes[routeId].count += r.count;else {\n                matchingRoutes[routeId] = {\n                    id: routeId,\n                    stops: routeStops,\n                    count: r.count\n                };\n            }\n        });\n\n        matchingRoutes = Object.keys(matchingRoutes).map(function (routeId) {\n            return matchingRoutes[routeId];\n        });\n        matchingRoutes.sort(function (r1, r2) {\n            return r2.count - r1.count;\n        });\n        return matchingRoutes;\n    };\n\n    var findRoutesByPeriod = function findRoutesByPeriod(origin, destination, from, to) {\n        // TODO use minDate and maxDate from our cached routes to avoid the http request\n\n        var d = $q.defer();\n        var matchingRoutes = _findRoutes(routes, origin, destination);\n        if (matchingRoutes.length === 0) {\n            d.resolve([]);\n        } else {\n            var fromDate = from;\n            var toDate = to;\n\n            $http.get('/api/v1/routes/all-by-date/', {\n                params: {\n                    from_date: TimeParser.createRequestString(fromDate),\n                    to_date: TimeParser.createRequestString(toDate)\n                }\n            }).then(function (response) {\n                var routesInDate = response.data.map(function (r) {\n                    return {\n                        id: r.id,\n                        stops: r.stop_ids,\n                        count: r.count\n                    };\n                });\n                d.resolve(_findRoutes(routesInDate, origin, destination));\n            }, function (response) {\n                d.reject({ 'msg': 'Error fetching routes', 'response': response });\n            });\n        }\n\n        return d.promise;\n    };\n\n    var findRoute = function findRoute(routeId) {\n        return routesMap[routeId] || null;\n    };\n\n    var getRoutesDateRange = function getRoutesDateRange() {\n        var max = new Date(1900, 0, 1);\n        var min = new Date(2100, 0, 1);\n\n        for (var i in routes) {\n            var route = routes[i];\n            if (route.count === 0) continue;\n\n            if (route.minDate && route.minDate < min) min = route.minDate;\n            if (route.maxDate && route.maxDate > max) max = route.maxDate;\n        }\n        return {\n            min: min,\n            max: max\n        };\n    };\n\n    var service = {\n        getStops: function getStops() {\n            return stops;\n        },\n        getRoutes: function getRoutes() {\n            return routes;\n        },\n        findRoute: findRoute,\n        findStop: findStop,\n        findStopName: findStopName,\n        findRoutes: function findRoutes(origin, destination) {\n            return _findRoutes(routes, origin, destination);\n        },\n        findRoutesByPeriod: findRoutesByPeriod,\n        getRoutesDateRange: getRoutesDateRange\n    };\n\n    return loadedPromise.then(function () {\n        return service;\n    });\n}]);\n'use strict';\n\nangular.module('RouteExplorer').constant('Locale', {\n    months: ['ינואר', 'פברואר', 'מרץ', 'אפריל', 'מאי', 'יוני', 'יולי', 'אוגוסט', 'ספטמבר', 'אוקטובר', 'נובמבר', 'דצמבר'].map(function (v, i) {\n        return { id: i + 1, name: v };\n    }),\n\n    days: [{ abbr: 'א', name: 'ראשון', id: 1 }, { abbr: 'ב', name: 'שני', id: 2 }, { abbr: 'ג', name: 'שלישי', id: 3 }, { abbr: 'ד', name: 'רביעי', id: 4 }, { abbr: 'ה', name: 'חמישי', id: 5 }, { abbr: 'ו', name: 'שישי', id: 6 }, { abbr: 'ש', name: 'שבת', id: 7 }],\n    until: 'עד ל'\n});\n'use strict';\n\nangular.module('RouteExplorer').factory('LocationBinder', ['$location', function ($location) {\n    return {\n        bind: function bind(scope, scopeProperty, locationProperty, parser, formatter) {\n            scope[scopeProperty] = $location.search()[locationProperty] || null;\n\n            scope.$watch(scopeProperty, function (value) {\n                if (formatter) value = formatter(value);\n\n                $location.search(locationProperty, value);\n            });\n\n            scope.$watch(function () {\n                return $location.search()[locationProperty] || null;\n            }, function (value) {\n                if (parser) value = parser(value);\n\n                scope[scopeProperty] = value;\n            });\n        }\n    };\n}]);\n'use strict';\n\nangular.module('RouteExplorer').factory('TimeParser', [function () {\n    function createRequestString(date, sep) {\n        sep = sep || '/';\n        var dd = date.getDate().toString();\n        var mm = (date.getMonth() + 1).toString();\n        var yyyy = date.getFullYear().toString();\n        return dd + sep + mm + sep + yyyy;\n    }\n\n    function parseMonth(monthString) {\n        var year = Number(monthString.substr(0, 4));\n        var month = Number(monthString.substr(4, 2));\n        return new Date(year, month - 1, 1);\n    }\n\n    function parsePeriod(periodString) {\n        var parts = periodString.split('-', 2);\n        var from = parseMonth(parts[0]);\n        var to = parts.length > 1 ? parseMonth(parts[1]) : from;\n        var end = new Date(to.getFullYear(), to.getMonth() + 1, 1);\n        return { from: from, to: to, end: end };\n    }\n\n    function formatMonth(date) {\n        return date.getFullYear() + ('0' + (date.getMonth() + 1)).slice(-2);\n    }\n\n    function formatPeriod(period) {\n        var f = formatMonth(period.from);\n        if (period.from < period.to) f += '-' + formatMonth(period.to);\n\n        return f;\n    }\n\n    return {\n        createRequestString: createRequestString,\n        parseMonth: parseMonth,\n        parsePeriod: parsePeriod,\n        formatMonth: formatMonth,\n        formatPeriod: formatPeriod\n    };\n}]);","angular.module('RouteExplorer').controller('HeatMapController',\n    function ($scope, $http, Layout) {\n        \"ngInject\";\n        $scope.Layout = Layout;\n        var ta = $scope.Layout.findStop(4600); // TA HASHALOM\n        console.log(ta);\n        angular.extend($scope, {\n            defaults: {\n                scrollWheelZoom: false\n            },\n            center: {\n                lat: ta.latlon[0],\n                lng: ta.latlon[1],\n                zoom: 10,\n            }\n        });\n        $scope.stops = Layout.getStops();\n        $scope.input = {\n            stop: $scope.stops[0]\n        }\n        $scope.paths = [];\n        $http.get('/api/v1/heat-map/').then(function (resp) {\n            $scope.heatmapData = resp.data;\n            //var maxScore = 0;\n            //var minScore = 1;\n\n            //$scope.heatmapData.forEach(function(score) {\n            //    maxScore = Math.max(score.score, maxScore);\n            //    minScore = Math.min(score.score, minScore);\n            //});\n\n            $scope.heatmapData.forEach(function (score) {\n                var latlng = $scope.Layout.findStop(score.stop_id).latlon;\n                var g = 255-Math.floor(255 * score.score);\n                var color = 'rgb(255,' + g + ',0)';\n                var message = $scope.Layout.findStop(score.stop_id).name + '<br/>' + Math.floor(score.score * 100) / 100;\n                $scope.paths.push({\n                    color: color,\n                    fillColor: color,\n                    fillOpacity: 1,\n                    type: \"circleMarker\",\n                    stroke: false,\n                    radius: 10,\n                    latlngs: latlng,\n                    message: message,\n                    popupOptions: {\n                        className: 'ot-popup'\n                    }\n                });\n            });\n        });\n\n    });\n\n\n","'use strict';\n\nangular.module('RouteExplorer').controller('HighlightsController',\n        function ($scope,\n                  $http,\n                  $q,\n                  $timeout,\n                  $location,\n                  Layout,\n                  daysTable,\n                  hoursList,\n                  monthNames) {\n            'ngInject';\n            $scope.init = () => {\n                $http.get(\"/api/v1/highlights/\").then(resp => {\n                    $scope.highlights = resp.data.highlights;\n                    $scope.url = resp.data.url;\n                    $scope.fields = [\n                        {\n                            name: 'תאריך',\n                            sortKey: v => {\n                                return v.year * 100 +  v.month;\n                            }\n                        },\n                        {\n                            name: 'מספר נסיעות',\n                            sortKey: v => {\n                                return v.num_trips;\n                            },\n                            initialDesc: true,\n                        },\n                        {\n                            name: 'יום בשבוע',\n                            sortKey: v => {\n                                if (v.week_day == 'all') {\n                                    return -1;\n                                }\n                                return v.week_day;\n                            }\n                        },\n                        {\n                            name: 'שעות',\n                            sortKey: v => {\n                                if (v.hours == 'all') {\n                                    return -1;\n                                }\n                                return v.hours[1];\n                            }\n                        },\n                        {\n                            name: '% איחורים מעל 5 דקות',\n                            active: true,\n                            asc: false,\n                            initialDesc: true,\n                            sortKey: v => {\n                                return v.mean_arrival_late_pct;\n                            }\n                        },\n                        {\n                            name: 'קישור',\n                            disableSort: true,\n                        }\n                    ];\n                    $scope.refresh();\n                });\n\n            };\n            $scope.sortBy = function(activeField) {\n                for (let f of $scope.fields) {\n                    if (f != activeField) {\n                        f.active = false;\n                    }\n                }\n                if (activeField.active) {\n                    activeField.asc = !activeField.asc;\n                } else {\n                    activeField.active = true;\n                    activeField.asc = !activeField.initialDesc;\n                }\n                $scope.refresh();\n            };\n            $scope.refresh = function() {\n                let activeField = null;\n                for (let f of $scope.fields) {\n                    if (f.active) {\n                        activeField = f;\n                    }\n                }\n                if (!activeField) {\n                    return;\n                }\n                $scope.highlights.sort((v1, v2) => {\n                    let k1 = activeField.sortKey(v1);\n                    let k2 = activeField.sortKey(v2);\n                    let asc = activeField.asc ? 1 : -1;\n                    if (k1 > k2) {\n                        return 1*asc;\n                    }\n                    if (k1 < k2) {\n                        return -1*asc;\n                    }\n                    return 0;\n                });\n            };\n            $scope.init();\n        });\n\n\n\n\n\n\n","angular.module('RouteExplorer').controller('RouteDetailsController',\nfunction($scope, $route, $http, $location, LocationBinder, Layout, Locale, TimeParser) {\n    \"ngInject\";\n    var routeParams = $route.current.params;\n\n    var period = TimeParser.parsePeriod(routeParams.period);\n    var startDate = TimeParser.createRequestString(period.from);\n    var endDate = TimeParser.createRequestString(period.end);\n\n    var routeId = routeParams.routeId;\n    var stopIds = Layout.findRoute(routeId).stops;\n    var statsMap = {};\n\n    $scope.loaded = false;\n    $scope.stopIds = stopIds;\n    $scope.origin = stopIds[0];\n    $scope.destination = stopIds[stopIds.length - 1];\n\n    $scope.selectedPeriod = formatMonth(period.from);\n    if (period.to > period.from) {\n        $scope.selectedPeriod += \" \\u2014 \" + formatMonth(period.to)\n    }\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    $scope.selectRouteUrl = '#/' + routeParams.period + '/select-route/' + $scope.origin + '/' + $scope.destination;\n\n    var previousPeriod = offsetPeriod(period, -1);\n    var nextPeriod = offsetPeriod(period, +1);\n    var bounds = Layout.getRoutesDateRange();\n    var day = 10 * 24 * 60 * 60 * 1000;\n    $scope.previousPeriodUrl = bounds.min.getTime() - day < previousPeriod.from.getTime() ? '#/' + TimeParser.formatPeriod(previousPeriod) + '/routes/' + routeId : null;\n    $scope.nextPeriodUrl = bounds.max > nextPeriod.to ? '#/' + TimeParser.formatPeriod(nextPeriod) + '/routes/' + routeId : null;\n\n    $http.get('/api/v1/stats/route-info-full', { params: { route_id: routeId, from_date: startDate, to_date: endDate } })\n        .success(function(data) {\n            loadStats(data);\n            $scope.loaded = true;\n        });\n\n    LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n\n    $scope.stopStats = function(stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId)\n                return stats[i];\n        }\n        return null;\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n            return stop.name;\n    };\n\n    $scope.isDayEmpty = function(day) {\n        var dayId = day.id;\n        var dayTimes = statsMap[dayId];\n\n        if (!dayTimes)\n            return true;\n\n        for (var time in dayTimes)\n            if (dayTimes[time].info.num_trips > 0)\n                return false;\n\n        return true;\n    };\n\n    $scope.isTimeEmpty = function(time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0)\n            return false;\n\n        return true;\n    };\n\n    $scope.tripCount = function(dayId, timeId) {\n      var stats = getStats(dayId, timeId);\n      if (!stats)\n        return 0;\n\n      return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n      dayId = dayId || 'all';\n      timeId = timeId || 'all';\n      return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats)\n          return stats.stops;\n\n        return [];\n    }\n\n    function loadStats(data) {\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId])\n                statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n    }\n\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n\n    function offsetMonth(date, offset) {\n        var d = new Date(date);\n        d.setMonth(d.getMonth() + offset);\n        return d;\n    }\n\n    function offsetPeriod(period, offset) {\n        var size =\n            (period.to.getFullYear() - period.from.getFullYear()) * 12 +\n            period.to.getMonth() - period.from.getMonth() + 1;\n\n        return {\n            from: offsetMonth(period.from, size * offset),\n            to: offsetMonth(period.to, size * offset),\n            end: offsetMonth(period.end, size * offset)\n        };\n    }\n});\n","'use strict';\n\nangular.module('RouteExplorer').controller('RealRoutesController',\n        function ($scope,\n                  $http,\n                  $q,\n                  $timeout,\n                  $location,\n                  Layout,\n                  daysTable,\n                  hoursList,\n                  monthNames) {\n            'ngInject';\n            $scope.selectedYear = 2017;\n            $scope.selectedMonth = 9;\n            $scope.getMonths = () => {\n                return [1,2,3,4,5,6,7,8,9,10,11,12];\n            };\n            $scope.getYears = () => {\n                let result = [];\n                let lastYear = new Date().getFullYear();\n                let y = 2015;\n                while (y <= lastYear) {\n                    result.push(y);\n                    y++;\n                }\n                return result;\n            };\n            $scope.init = () => {\n                $scope.months = $scope.getMonths();\n                $scope.years = $scope.getYears();\n            };\n            $scope.refresh = () => {\n                $scope.realRoutes = null;\n                let y = $scope.selectedYear;\n                let m = $scope.selectedMonth;\n                $http.get(`/api/v1/real-routes/${y}/${m}/`).then(resp => {\n                    $scope.realRoutes = resp.data;\n                    for (let rr of $scope.realRoutes) {\n                        console.log(rr);\n                        rr.firstStop = rr.stops[0];\n                        rr.lastStop = rr.stops[rr.stops.length-1];\n                    }\n                });\n            }\n            $scope.init();\n        });\n\n\n\n\n\n\n","angular.module('RouteExplorer').controller('SelectRouteController',\nfunction($scope, $http, $location, $route, Layout, TimeParser) {\n    'ngInject';\n    $scope.stops = Layout.getStops();\n    var period = TimeParser.parsePeriod($route.current.params.period);\n    var origin = Layout.findStop($route.current.params.origin);\n    var destination = Layout.findStop($route.current.params.destination);\n\n    var graphsUrlParams = [\n        'startStop=' + origin.id,\n        'endStop=' + destination.id,\n        'startDate='+TimeParser.createRequestString(period.from,'-'),\n        'endDate='+TimeParser.createRequestString(period.end,'-'),\n    ];\n    $scope.graphsUrl = \"#/graphs?\" + graphsUrlParams.join(\"&\");\n\n    $http.get('/api/v1/stats/path-info-full/', { params: {\n        origin: origin.id,\n        destination: destination.id,\n        from_date: TimeParser.createRequestString(period.from),\n        to_date: TimeParser.createRequestString(period.end) }\n    }).success(function(data) {\n            loadStats(data);\n            $scope.loaded = true;\n    });\n\n    var statsMap = {};\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n\n    function loadStats(data) {\n        $scope.stats = data;\n    }\n\n    Layout.findRoutesByPeriod(origin.id, destination.id, period.from, period.end).then(function(routes) {\n        $scope.routes = routes;\n    });\n\n    function stopName(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    }\n\n    $scope.isOrigin = function(stopId) {\n        return stopId == origin.id;\n    };\n\n    $scope.isDestination = function(stopId) {\n        return stopId == destination.id;\n    };\n\n    $scope.stopText = function(stopId) {\n        return stopName(stopId);\n    };\n\n\n    $scope.barWidth = function(route) {\n        var percentWidth = route.count * 100.0 / $scope.routes[0].count;\n\n        if (percentWidth < 1.0)\n            return \"1px\";\n\n        return percentWidth + \"%\";\n    };\n\n    $scope.routeUrl = function(route) {\n        return '/#/' + $route.current.params.period + '/routes/' + route.id;\n    };\n\n});\n","angular.module('RouteExplorer').controller('SelectStopsController',\n['$scope', '$rootScope', '$location', 'Layout', 'Locale', 'TimeParser',\nfunction($scope, $rootScope, $location, Layout, Locale, TimeParser) {\n    'ngInject';\n    $scope.stops = Layout.getStops();\n    $scope.origin = null;\n    $scope.destination = null;\n    $scope.months = Locale.months;\n\n    var dateRange = Layout.getRoutesDateRange();\n    $scope.periods = generatePeriods(dateRange.min, dateRange.max);\n    $scope.startPeriod = $scope.periods[0];\n    $scope.endPeriod = $scope.periods[0];\n\n    $scope.formValid = function() {\n        return (\n            !!$scope.origin &&\n            !!$scope.destination &&\n            $scope.origin != $scope.destination &&\n            $scope.startPeriod.from <= $scope.endPeriod.to\n        );\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    };\n\n    $scope.goToRoutes = function() {\n        $scope.noRoutes = false;\n        $scope.loading = true;\n        var period = {\n            from: $scope.startPeriod.from,\n            to: $scope.endPeriod.to,\n            end: $scope.endPeriod.end,\n        };\n        var fromDate = period.from;\n        var toDate = period.end;\n        var periodStr = TimeParser.formatPeriod(period);\n        Layout.findRoutesByPeriod($scope.origin.id, $scope.destination.id, fromDate, toDate)\n            .then(function(routes) {\n                if (routes.length === 0) {\n                    $scope.noRoutes = true;\n                } else if (routes.length == 1) {\n                    $location.path('/' + periodStr + '/routes/' + routes[0].id);\n                } else {\n                    $location.path('/' + periodStr + '/select-route/' + $scope.origin.id + '/' + $scope.destination.id);\n                }\n            })\n            .finally(function() {\n                $scope.loading = false;\n            });\n    };\n\n    $scope.dismissError = function() {\n        $scope.noRoutes = false;\n    };\n\n    function generatePeriods(fromDate, toDate) {\n      // fromDate=1970-1-1 due to a data bug. This is a quick temporary workaround\n      if (fromDate.getFullYear() < 2013) fromDate = new Date(2013, 0, 1);\n\n      var periods = [];\n      var start = new Date(fromDate.getFullYear(), fromDate.getMonth(), 1);\n      while (start < toDate) {\n        let end = new Date(start.getFullYear(), start.getMonth() + 1, start.getDate());\n        var period = {\n          from: start,\n          to: start,\n          end: end,\n          name: Locale.months[start.getMonth()].name + \" \" + start.getFullYear()\n        };\n        period.toName = Locale.until + period.name;\n        periods.push(period);\n        start = end;\n      }\n      periods.reverse();\n      return periods;\n    }\n}]);\n","angular.module('RouteExplorer').controller('TimesDetailsController',\nfunction($scope, $route, Locale, LocationBinder, Layout) {\n    'ngInject';\n    Layout.then(function(Layout) {\n        $scope.layout = Layout;\n    });\n    $scope.layout = null;\n\n    var statsMap = {};\n    var routeParams = $route.current.params;\n    $scope.stopIds = [parseInt(routeParams.origin), parseInt(routeParams.destination)];\n    LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats)\n          return stats.stops;\n\n        return [];\n    }\n\n    $scope.stopName = function(stopId) {\n        if ($scope.layout) {\n            var stop = $scope.layout.findStop(stopId);\n            if (!stop)\n                return null;\n\n            return stop.name;\n        } else {\n            return null;\n        }\n    };\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    $scope.loadStats = function() {\n        var data = $scope.stats;\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId])\n                statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n    };\n    $scope.tripCount = function(dayId, timeId) {\n      var stats = getStats(dayId, timeId);\n      if (!stats)\n        return 0;\n\n      return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n      dayId = dayId || 'all';\n      timeId = timeId || 'all';\n      return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    $scope.isTimeEmpty = function(time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0)\n            return false;\n\n        return true;\n    };\n\n    $scope.stopStats = function(stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId)\n                return stats[i];\n        }\n        return null;\n    };\n\n    $scope.loadStats();\n});\n\n","'use strict';\n\nangular.module('RouteExplorer').controller('TopHighlightsController',\n        function ($scope,\n                  $http,\n                  $q,\n                  $timeout,\n                  $location,\n                  Layout,\n                  daysTable,\n                  hoursList,\n                  monthNames) {\n            'ngInject';\n            $scope.init = () => {\n                $http.get(\"/api/v1/highlights/top/\").then(resp => {\n                    let data = resp.data.highlights;\n                    $scope.highlightLists =  [\n                        {\n                            'kind': 'late',\n                            'title': 'נסיעה באיחור',\n                            'items': data.late,\n                            'color': 'danger',\n                        },\n                        {\n                            'kind': 'ontime',\n                            'title': 'נסיעה בזמן',\n                            'items': data.ontime,\n                            'color': 'success',\n                        }\n                    ];\n                });\n            };\n            $scope.init();\n        });\n\n\n\n\n\n\n","let daysTable = {\n            0: 'ראשון',\n            1: 'שני',\n            2: 'שלישי',\n            3: 'רביעי',\n            4: 'חמישי',\n            5: 'שישי',\n            6: 'שבת',\n        };\n\nangular.module('RouteExplorer')\n    .filter('week_day1', function () {\n        return function (day) {\n            if (day == 'all') {\n                return 'כל הימים';\n            }\n            return daysTable[day-1] || `??? ${day}`;\n        }\n    }).filter('week_day0', function () {\n        return function (day) {\n            if (day == 'all') {\n                return 'כל הימים';\n            }\n            return daysTable[day] || `??? ${day}`;\n        }\n    }).filter('hours', function () {\n        return function(hours) {\n            let fix = h => h >= 24 ? h % 24 : h;\n            if (hours == 'all') {\n                return 'כל היום'\n            }\n            let h1 = fix(hours[1]);\n            let h0 = fix(hours[0]);\n            return `${h1} - ${h0}`;\n        }\n    }).filter('month_name', function() {\n        let months = [\n          'ינואר',\n          'פברואר',\n          'מרץ',\n          'אפריל',\n          'מאי',\n          'יוני',\n          'יולי',\n          'אוגוסט',\n          'ספטמבר',\n          'אוקטובר',\n          'נובמבר',\n          'דצמבר'\n        ]\n        return function(m) {\n            return months[m-1];\n        }\n    });\n\n\n","angular.module('RouteExplorer').filter('duration', function() {\n    return function(seconds) {\n        var negative = false;\n        seconds = Math.trunc(seconds);\n        if (seconds < 0) {\n            negative = true;\n            seconds = -seconds;\n        }\n\n        var minutes = Math.trunc(seconds / 60);\n        seconds -= minutes * 60;\n        var hours = Math.trunc(minutes / 60);\n        minutes -= hours * 60;\n\n        if (seconds < 10) seconds = '0' + seconds;\n        if (minutes < 10 && hours !== 0) minutes = '0' + minutes;\n\n        var res = minutes + ':' + seconds;\n        if (hours !== 0)\n            res = hours + ':' + res;\n\n        if (negative)\n            res = '-' + res;\n\n        return res;\n    };\n});\n","angular.module('RouteExplorer').factory('Layout',\n['$http', '$q', 'TimeParser',\nfunction($http, $q, TimeParser) {\n    var self = this;\n    var stops = [];\n    var stopsMap = {};\n    var routes = [];\n    var routesMap = {};\n\n    var loadedPromise = $q.all([\n        $http.get('/api/v1/stops/')\n            .then(function(response) {\n                stops = response.data.map(function(s) { return {\n                    id: s.stop_id,\n                    name: s.heb_stop_names[0],\n                    names: s.heb_stop_names,\n                    latlon: s.latlon,\n                }; });\n                stops.forEach(function(s) { stopsMap[s.id] = s; });\n            }),\n\n        $http.get('/api/v1/routes/all/')\n            .then(function(response) {\n                routes = response.data.map(function(r) { return {\n                    id: r.id,\n                    stops: r.stop_ids,\n                    count: r.count,\n                    minDate: new Date(r.min_date),\n                    maxDate: new Date(r.max_date)\n                }; });\n\n                routesMap = routes.reduce(function(m, r) { m[r.id] = r; return m; }, {});\n            })\n    ]);\n\n    var findStop = function(stopId) {\n        return stopsMap[stopId] || null;\n    };\n\n    var findStopName = function(stopId) {\n        return findStop(stopId).name;\n    };\n\n    var findRoutes = function(routes, originId, destinationId) {\n        var matchingRoutes = {};\n\n        routes.forEach(function(r) {\n            var originIndex = r.stops.indexOf(originId);\n            var destinationIndex = r.stops.indexOf(destinationId);\n\n            if (originIndex < 0 || destinationIndex < 0)\n                return;\n\n            if (originIndex > destinationIndex)\n                return;\n\n            var routeStops = r.stops;\n            var routeId = r.id;\n\n            if (routeId in matchingRoutes)\n                matchingRoutes[routeId].count += r.count;\n            else {\n                matchingRoutes[routeId] = {\n                    id: routeId,\n                    stops: routeStops,\n                    count: r.count\n                };\n            }\n        });\n\n        matchingRoutes = Object.keys(matchingRoutes).map(function(routeId) { return matchingRoutes[routeId]; });\n        matchingRoutes.sort(function(r1, r2) { return r2.count - r1.count; });\n        return matchingRoutes;\n    };\n\n    var findRoutesByPeriod = function(origin, destination, from, to) {\n        // TODO use minDate and maxDate from our cached routes to avoid the http request\n\n        var d = $q.defer();\n        var matchingRoutes = findRoutes(routes, origin, destination);\n        if (matchingRoutes.length === 0) {\n            d.resolve([]);\n        } else {\n            var fromDate = from;\n            var toDate = to;\n\n            $http.get('/api/v1/routes/all-by-date/', {\n                params: {\n                    from_date: TimeParser.createRequestString(fromDate),\n                    to_date: TimeParser.createRequestString(toDate)\n                }\n            }).then(function(response) {\n                var routesInDate = response.data.map(function(r) {\n                    return {\n                        id: r.id,\n                        stops: r.stop_ids,\n                        count: r.count\n                    };\n                });\n                d.resolve(findRoutes(routesInDate, origin, destination));\n            }, function(response) { d.reject({ 'msg': 'Error fetching routes', 'response': response }); });\n        }\n\n        return d.promise;\n    };\n\n    var findRoute = function(routeId) {\n        return routesMap[routeId] || null;\n    };\n\n    var getRoutesDateRange = function() {\n        var max = new Date(1900, 0, 1);\n        var min = new Date(2100, 0, 1);\n\n        for (var i in routes) {\n            var route = routes[i];\n            if (route.count === 0)\n              continue;\n\n            if (route.minDate && route.minDate < min) min = route.minDate;\n            if (route.maxDate && route.maxDate > max) max = route.maxDate;\n        }\n        return {\n          min: min,\n          max: max\n        };\n    };\n\n    let service = {\n        getStops: function() { return stops; },\n        getRoutes: function() { return routes; },\n        findRoute: findRoute,\n        findStop: findStop,\n        findStopName: findStopName,\n        findRoutes: function(origin, destination) { return findRoutes(routes, origin, destination); },\n        findRoutesByPeriod: findRoutesByPeriod,\n        getRoutesDateRange: getRoutesDateRange\n    };\n\n    return loadedPromise.then(function() { return service; });\n}]);\n","angular.module('RouteExplorer').constant('Locale', {\n  months: [\n      'ינואר',\n      'פברואר',\n      'מרץ',\n      'אפריל',\n      'מאי',\n      'יוני',\n      'יולי',\n      'אוגוסט',\n      'ספטמבר',\n      'אוקטובר',\n      'נובמבר',\n      'דצמבר'\n  ].map(function(v, i) { return { id: i + 1, name: v }; }),\n\n  days: [\n      { abbr: 'א', name: 'ראשון', id: 1 },\n      { abbr: 'ב', name: 'שני', id: 2 },\n      { abbr: 'ג', name: 'שלישי', id: 3 },\n      { abbr: 'ד', name: 'רביעי', id: 4 },\n      { abbr: 'ה', name: 'חמישי', id: 5 },\n      { abbr: 'ו', name: 'שישי', id: 6 },\n      { abbr: 'ש', name: 'שבת', id: 7 }\n  ],\n  until: 'עד ל'\n});\n","angular.module('RouteExplorer').factory('LocationBinder',\n['$location',\nfunction($location) {\n    return {\n        bind: function(scope, scopeProperty, locationProperty, parser, formatter) {\n            scope[scopeProperty] = $location.search()[locationProperty] || null;\n\n            scope.$watch(scopeProperty, function(value) {\n                if (formatter)\n                    value = formatter(value);\n\n                $location.search(locationProperty, value);\n            });\n\n            scope.$watch(function() { return $location.search()[locationProperty] || null; }, function(value) {\n                if (parser)\n                    value = parser(value);\n\n                scope[scopeProperty] = value;\n            });\n        }\n    };\n}]);\n","angular.module('RouteExplorer').factory('TimeParser',\n[\nfunction() {\n    function createRequestString(date, sep) {\n        sep = sep || '/';\n        var dd = date.getDate().toString();\n        var mm = (date.getMonth()+1).toString();\n        var yyyy = date.getFullYear().toString();\n        return dd + sep + mm + sep + yyyy;\n    }\n\n    function parseMonth(monthString) {\n        var year = Number(monthString.substr(0, 4));\n        var month = Number(monthString.substr(4, 2));\n        return new Date(year, month - 1, 1);\n    }\n\n    function parsePeriod(periodString) {\n        var parts = periodString.split('-', 2);\n        var from = parseMonth(parts[0]);\n        var to = parts.length > 1 ? parseMonth(parts[1]) : from;\n        var end = new Date(to.getFullYear(), to.getMonth() + 1, 1);\n        return { from: from, to: to, end: end };\n    }\n\n    function formatMonth(date) {\n        return date.getFullYear() + ('0' + (date.getMonth() + 1)).slice(-2);\n    }\n\n    function formatPeriod(period) {\n        var f = formatMonth(period.from);\n        if (period.from < period.to)\n            f += '-' + formatMonth(period.to);\n\n        return f;\n    }\n\n    return {\n        createRequestString: createRequestString,\n        parseMonth: parseMonth,\n        parsePeriod: parsePeriod,\n        formatMonth: formatMonth,\n        formatPeriod: formatPeriod\n    }\n}]);\n"]}