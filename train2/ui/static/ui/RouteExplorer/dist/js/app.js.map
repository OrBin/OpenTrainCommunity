{"version":3,"sources":["RouteExplorer.js","polyfills.js","controllers/AppController.js","controllers/GraphsController.js","controllers/HeatMapController.js","controllers/RouteDetailsController.js","controllers/SelectRoutesController.js","controllers/SelectStopsController.js","controllers/TimesDetailsController.js","directives/PercentBar.js","directives/TimesDetails.js","filters/duration.js","services/Layout.js","services/Locale.js","services/LocationBinder.js","services/TimeParser.js"],"names":["app","angular","module","constant","baseDir","config","$routeProvider","env","templateUrl","templateName","when","pageId","controller","resolve","reloadOnSearch","otherwise","redirectTo","String","prototype","repeat","count","TypeError","str","RangeError","Infinity","Math","floor","length","rpt","$scope","$location","share","prefix","url","encodeURIComponent","window","open","$on","e","route","bodyClass","value","name","values","$http","$q","$timeout","Layout","daysTable","hoursList","monthNames","scope","wip","input","graphKind","refresh","startStop","endStop","startDate","endDate","search","id","stops","getStops","stopsById","forEach","st","cbs","get","params","from_date","to_date","from_stop","to_stop","then","resp","stat","data","table","fromToStopsIds","fromToStops","map","stop_id","all","updateChart","getRouteTitle","from","to","initData","buildDates","s","startDates","endDates","push","ns","computePerDaySeries","perDay","key","week_day_local","num_trips","arrival_late_count","result","d","entry","y","numTrips","console","log","lineName","computePerHoursSeries","perHour","hoursMapping","h","hour_key","hour_local","hl","stopNames","idx","perDaySeries","perHoursSeries","tooltip","formatter","prec","round","x","point","useHTML","series","chartPerDay","options","chart","type","title","text","xAxis","reversed","categories","yAxis","opposite","chartPerHour","findDate","dates","i","findStop","ta","extend","defaults","scrollWheelZoom","center","lat","latlon","lng","zoom","stop","paths","heatmapData","score","latlng","g","color","message","fillColor","fillOpacity","stroke","radius","latlngs","popupOptions","className","$route","LocationBinder","Locale","TimeParser","routeParams","current","period","parsePeriod","createRequestString","end","routeId","stopIds","findRoute","statsMap","loaded","origin","destination","selectedPeriod","formatMonth","selectedDay","days","selectedTime","times","selectRouteUrl","previousPeriod","offsetPeriod","nextPeriod","bounds","getRoutesDateRange","day","previousPeriodUrl","min","getTime","formatPeriod","nextPeriodUrl","max","route_id","success","loadStats","bind","val","Number","stopStats","stopId","stats","selectedStats","stopName","isDayEmpty","dayId","dayTimes","time","info","isTimeEmpty","timeId","timeStats","tripCount","getStats","timesMap","statGroup","hours","week_day","formatHour","hour","slice","date","months","getMonth","getFullYear","offsetMonth","offset","Date","setMonth","size","graphsUrlParams","graphsUrl","join","findRoutesByPeriod","routes","collapseRoutes","isCollapsed","isArray","isOrigin","isDestination","stopText","stopTooltip","barWidth","percentWidth","routeUrl","collapsibleStops","findCommonStops","countStopFrequencies","routeIndex","collapseStops","stopFrequencies","routesCount","commonStops","collapsed","accumulator","$rootScope","dateRange","periods","generatePeriods","startPeriod","endPeriod","formValid","goToRoutes","noRoutes","loading","fromDate","toDate","periodStr","path","finally","dismissError","start","getDate","toName","until","reverse","layout","parseInt","directive","restrict","filter","seconds","negative","trunc","minutes","res","factory","self","stopsMap","routesMap","loadedPromise","response","heb_stop_names","names","r","stop_ids","minDate","min_date","maxDate","max_date","reduce","m","findStopName","findRoutes","originId","destinationId","matchingRoutes","originIndex","indexOf","destinationIndex","routeStops","Object","keys","sort","r1","r2","defer","routesInDate","reject","promise","service","getRoutes","v","abbr","scopeProperty","locationProperty","parser","$watch","sep","dd","toString","mm","yyyy","parseMonth","monthString","year","substr","month","periodString","parts","split","f"],"mappings":"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","file":"app.js","sourcesContent":["(function () {\n    var app = angular.module('RouteExplorer', ['ngRoute',\n        'ui.bootstrap',\n        'ui.bootstrap.buttons',\n        'leaflet-directive',\n        \"highcharts-ng\"\n    ]);\n\n    app.constant('env', {\n        baseDir: '/static/ui/RouteExplorer'\n    });\n\n    app.config(['$routeProvider','env',\n        function ($routeProvider, env) {\n\n            var templateUrl = function (templateName) {\n                return env.baseDir + '/tpls/' + templateName + '.html';\n            };\n\n            $routeProvider\n                .when('/', {\n                    pageId: 'welcome',\n                    templateUrl: templateUrl('SelectStops'),\n                    controller: 'SelectStopsController',\n                    resolve: {'Layout': 'Layout'}\n                })\n                .when('/about', {\n                    pageId: 'about',\n                    templateUrl: templateUrl('About')\n                })\n                .when('/:period/select-route/:origin/:destination', {\n                    pageId: 'routes',\n                    templateUrl: templateUrl('SelectRoute'),\n                    controller: 'SelectRouteController',\n                    resolve: {'Layout': 'Layout'},\n                    reloadOnSearch: false\n                })\n                .when('/:period/routes/:routeId', {\n                    pageId: 'route',\n                    templateUrl: templateUrl('RouteDetails'),\n                    controller: 'RouteDetailsController',\n                    resolve: {'Layout': 'Layout'},\n                    reloadOnSearch: false\n                }).when(\"/heat-map\", {\n                    pageId: 'heatMap',\n                    templateUrl: templateUrl('HeatMap'),\n                    controller: 'HeatMapController',\n                    reloadOnSearch: false,\n                    resolve: {'Layout': 'Layout'},\n                }).when(\"/graphs\", {\n                    pageId: 'graphs',\n                    templateUrl: templateUrl('Graphs'),\n                    controller: 'GraphsController',\n                    reloadOnSearch: false,\n                    resolve: {'Layout': 'Layout'},\n                })\n                .otherwise({\n                    redirectTo: '/'\n                });\n        }]);\n})();\n","// String.repeat polyfill\n// taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Polyfill\nif (!String.prototype.repeat) {\n  String.prototype.repeat = function(count) {\n    'use strict';\n    if (this === null) {\n      throw new TypeError('can\\'t convert ' + this + ' to object');\n    }\n    var str = '' + this;\n    count = +count;\n    if (count != count) {\n      count = 0;\n    }\n    if (count < 0) {\n      throw new RangeError('repeat count must be non-negative');\n    }\n    if (count == Infinity) {\n      throw new RangeError('repeat count must be less than infinity');\n    }\n    count = Math.floor(count);\n    if (str.length === 0 || count === 0) {\n      return '';\n    }\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\n    // main part. But anyway, most current (August 2014) browsers can't handle\n    // strings 1 << 28 chars or longer, so:\n    if (str.length * count >= 1 << 28) {\n      throw new RangeError('repeat count must not overflow maximum string size');\n    }\n    var rpt = '';\n    for (;;) {\n      if ((count & 1) == 1) {\n        rpt += str;\n      }\n      count >>>= 1;\n      if (count === 0) {\n        break;\n      }\n      str += str;\n    }\n    return rpt;\n  };\n}\n","angular.module('RouteExplorer').controller('AppController',\nfunction($scope, $location) {\n    'ngInject';\n    $scope.share = function(prefix) {\n        var url = prefix + encodeURIComponent('http://otrain.org/#' + $location.url());\n        window.open(url, 'sharePopup', 'width=600,height=550,top=100,left=100,location=no,scrollbar=no,status=no,menubar=no');\n    };\n\n    $scope.$on('$routeChangeSuccess', function(e, route) {\n        $scope.bodyClass = route.pageId ? 'rex-page-' + route.pageId : null;\n    });\n});\n","'use strict';\nangular.module('RouteExplorer').constant('daysTable',\n    [{\n        value: 0,\n        name: 'ראשון',\n    }, {\n        value: 1,\n        name: 'שני',\n    }, {\n        value: 2,\n        name: 'שלישי',\n    }, {\n        value: 3,\n        name: 'רביעי',\n    }, {\n        value: 4,\n        name: 'חמישי',\n    }, {\n        value: 5,\n        name: 'שישי',\n    }, {\n        value: 6,\n        name: 'שבת',\n    }])\n    //}], {\n    //    value: 'all',\n    //    name: 'שבועי'\n    //}\n    //])\n    .constant(\"monthNames\", [\n        'dummy',\n        'ינואר',\n        'פברואר',\n        'מרץ',\n        'אפריל',\n        'מאי',\n        'יוני',\n        'יולי',\n        'אוגוסט',\n        'ספטמבר',\n        'אוקטובר',\n        'נובמבר',\n        'דצמבר'\n    ]).constant(\"hoursList\", [\n    {\n        name: '4-7',\n        values: [4, 5, 6]\n    },\n    {\n        name: '7-9',\n        values: [7, 8]\n    },\n    {\n        name: '9-12',\n        values: [9,10,11],\n    },\n    {\n        name: '12-15',\n        values: [12,13,14],\n    },\n    {\n        name: '15-18',\n        values: [15,16,17],\n    },\n    {\n        name: '18-21',\n        values: [18, 19,20],\n    },\n    {\n        name: '21-24',\n        values: [21, 22,23],\n    },\n    {\n        name: '24-4',\n        values: [0, 1, 2, 3],\n    }\n]\n);\n\n\nangular.module('RouteExplorer').controller('GraphsController',\n    ['$scope', '$http', '$q', '$timeout', '$location', 'Layout', 'daysTable', 'hoursList', 'monthNames',\n        function ($scope,\n                  $http,\n                  $q,\n                  $timeout,\n                  $location,\n                  Layout,\n                  daysTable,\n                  hoursList,\n                  monthNames) {\n            window.scope = $scope;\n            $scope.wip = true;\n            $scope.Layout = Layout;\n            $scope.input = {\n                graphKind: 'perDay'\n            };\n            $scope.refresh = function () {\n                $scope.wip = true;\n                $scope.startStop = $scope.input.startStop;\n                $scope.endStop = $scope.input.endStop;\n                $scope.startDate = $scope.input.startDate.value;\n                $scope.endDate = $scope.input.endDate.value;\n                $location.search({\n                    startStop: $scope.startStop.id,\n                    endStop: $scope.endStop.id,\n                    startDate: $scope.startDate,\n                    endDate: $scope.endDate,\n                });\n                $scope.stops = Layout.getStops();\n                $scope.stopsById = {};\n                $scope.stops.forEach(function (st) {\n                    $scope.stopsById[st.id] = st;\n                });\n                var cbs = [\n                    $http.get('/api/v1/stats/from-to-full/', {\n                        params: {\n                            from_date: $scope.startDate,\n                            to_date: $scope.endDate,\n                            from_stop: $scope.startStop.id,\n                            to_stop: $scope.endStop.id,\n                        }\n                    }).then(function (resp) {\n                        $scope.stat = resp.data.table;\n                    }),\n                    $http.get('/api/v1/stops/from-to/', {\n                        params: {\n                            from_stop: $scope.startStop.id,\n                            to_stop: $scope.endStop.id,\n                        }\n                    }).then(function (resp) {\n                        $scope.fromToStopsIds = resp.data;\n                        $scope.fromToStops = $scope.fromToStopsIds.map(function (stop_id) {\n                            return $scope.stopsById[stop_id];\n                        });\n                    })\n                ];\n                $q.all(cbs).then(function () {\n                    $scope.wip = false;\n                    $scope.updateChart();\n                });\n            };\n            $scope.getRouteTitle = function (route) {\n                return 'מ' + route.from + ' ל' + route.to + ' (' + route.count + ' ' + 'נסיעות' + ')';\n            }\n\n            $scope.initData = function () {\n                $scope.buildDates();\n            };\n\n            $scope.buildDates = function () {\n                var s = [1, 2015];\n                var e = [5, 2016];\n                $scope.startDates = [];\n                $scope.endDates = [];\n                while (s[0] != e[0] || s[1] != e[1]) {\n                    $scope.startDates.push({\n                        name: monthNames[s[0]] + ' ' + s[1],\n                        value: '1-' + s[0] + '-' + s[1],\n                    });\n                    var ns = s[0] == 12 ? [1, s[1] + 1] : [s[0] + 1, s[1]];\n                    $scope.endDates.push({\n                        name: monthNames[s[0]] + ' ' + s[1],\n                        value: '1-' + ns[0] + '-' + ns[1],\n                    });\n                    s[0] = s[0] + 1;\n                    if (s[0] > 12) {\n                        s[0] = 1;\n                        s[1]++;\n                    }\n                }\n            };\n            $scope.computePerDaySeries = function () {\n                var perDay = {};\n                $scope.stat.forEach(function (st) {\n                    var key = st.stop_id + '-' + st.week_day_local;\n                    perDay[key] = perDay[key] || {\n                            num_trips: 0,\n                            arrival_late_count: 0\n                        };\n                    perDay[key].num_trips += st.num_trips;\n                    perDay[key].arrival_late_count += st.arrival_late_count;\n\n                });\n                var result = [];\n                daysTable.forEach(function (d) {\n                    var data = $scope.fromToStops.map(function (st) {\n                        var entry = perDay[st.id + '-' + d.value];\n                        var result = {};\n                        if (!entry) {\n                            result.y = 0;\n                            result.numTrips = 0;\n                            console.log('no entry for ' + st.id + ' ' + d.value);\n                        } else {\n                            result.y = entry.arrival_late_count * 100.0 / entry.num_trips;\n                            result.numTrips = entry.num_trips;\n                        }\n                        result.lineName = d.name;\n                        return result;\n                    });\n                    result.push({\n                        name: d.name,\n                        data: data\n                    })\n                });\n                return result;\n            };\n            $scope.computePerHoursSeries = function () {\n                var perHour = {};\n                var hoursMapping = {}\n                hoursList.forEach(function(e) {\n                    e.values.forEach(function(h) {\n                        hoursMapping[h] = e;\n                    })\n                });\n                $scope.stat.forEach(function (st) {\n                    var hour_key = hoursMapping[st.hour_local].name;\n                    var key = st.stop_id + '-' + hour_key;\n                    perHour[key] = perHour[key] || {\n                            num_trips: 0,\n                            arrival_late_count: 0\n                        };\n                    perHour[key].num_trips += st.num_trips;\n                    perHour[key].arrival_late_count += st.arrival_late_count;\n\n                });\n                var result = [];\n                hoursList.forEach(function (hl) {\n                    var data = $scope.fromToStops.map(function (st) {\n                        var entry = perHour[st.id + '-' + hl.name];\n                        var result = {};\n                        if (!entry) {\n                            console.log('no entry for ' + st.id + ' ' + hl.name);\n                            result.y = 0;\n                            result.numTrips = 0;\n                        } else {\n                            result.y = entry.arrival_late_count * 100.0 / entry.num_trips;\n                            result.numTrips = entry.num_trips;\n                        }\n                        result.lineName = hl.name;\n                        return result;\n                    });\n                    result.push({\n                        name: hl.name,\n                        data: data\n                    })\n                });\n                return result;\n            }\n            $scope.updateChart = function () {\n                var stopNames = $scope.fromToStops.map(function (st, idx) {\n                    return st.name + ' - ' + (idx + 1);\n                });\n                $scope.perDaySeries = $scope.computePerDaySeries();\n                $scope.perHoursSeries = $scope.computePerHoursSeries();\n\n                var tooltip = {\n                    formatter: function () {\n                        var prec = Math.round(this.y * 100) / 100;\n                        console.log(this);\n                        return '<span dir=\"rtl\"><b>' + this.x + '</b>' + '<br/>' +\n                                '<span>' + this.point.lineName + '</span><br/>' +\n                            '<span>רכבות מאחרות:</span>' + prec + '%' + '<br/>' +\n                            '<span>מספר רכבות: </span>' + this.point.numTrips +\n                            '</span>';\n                    },\n                    useHTML: true,\n                };\n                var series = [\n                    {\n                        name: '123',\n                        data: [10, 20, 5, 5, 5, 10, 20, 30, 15, 15, 15]\n                    },\n                    {\n                        name: '456',\n                        data: [8, 8, 8, 12, 7, 20]\n                    },\n                ]\n                $scope.chartPerDay = {\n                    options: {\n                        chart: {\n                            type: 'line'\n                        },\n                        title: {\n                            text: 'איחור בחתך יומי'\n                        },\n                        tooltip: tooltip,\n                    },\n                    xAxis: {\n                        reversed: true,\n                        categories: stopNames,\n                        useHTML: true,\n                    },\n                    yAxis: {\n                        opposite: true,\n                        useHTML: true,\n                        title: {\n                            text: 'אחוזי איחור'\n                        }\n                    },\n                    series: $scope.perDaySeries,\n                };\n                $scope.chartPerHour = {\n                    options: {\n                        chart: {\n                            type: 'line'\n                        },\n                        title: {\n                            text: 'אישור בחתך שעתי'\n                        },\n                        tooltip: tooltip,\n                    },\n                    yAxis: {\n                        useHTML: true,\n                        opposite: true,\n                        title: {\n                            text: 'אחוזי איחור'\n                        }\n                    },\n                    xAxis: {\n                        useHTML: true,\n                        reversed: true,\n                        categories: stopNames,\n                    },\n                    tooltip: {\n                        useHTML: true\n                    },\n                    series: $scope.perHoursSeries,\n                };\n            };\n            $scope.findDate = function (dates, value) {\n                for (var i = 0; i < dates.length; i++) {\n                    if (dates[i].value == value) {\n                        return dates[i];\n                    }\n                }\n                return null;\n            };\n\n            $scope.initData();\n\n            var params = $location.search();\n            $scope.input.startDate = $scope.findDate($scope.startDates, params.startDate) || $scope.startDates[$scope.startDates.length - 1];\n            $scope.input.endDate = $scope.findDate($scope.endDates, params.endDate) || $scope.endDates[$scope.endDates.length - 1];\n            $scope.input.startStop = Layout.findStop(params.startStop || 400);\n            $scope.input.endStop = Layout.findStop(params.endStop|| 3700)\n            $scope.refresh();\n        }]);\n\n\n\n\n\n","angular.module('RouteExplorer').controller('HeatMapController',\n    ['$scope', '$http', 'Layout', function ($scope, $http, Layout) {\n        $scope.Layout = Layout;\n        var ta = $scope.Layout.findStop(4600); // TA HASHALOM\n        console.log(ta);\n        angular.extend($scope, {\n            defaults: {\n                scrollWheelZoom: false\n            },\n            center: {\n                lat: ta.latlon[0],\n                lng: ta.latlon[1],\n                zoom: 10,\n            }\n        });\n        $scope.stops = Layout.getStops();\n        $scope.input = {\n            stop: $scope.stops[0]\n        }\n        $scope.paths = [];\n        $http.get('/api/v1/heat-map/').then(function (resp) {\n            $scope.heatmapData = resp.data;\n            //var maxScore = 0;\n            //var minScore = 1;\n\n            //$scope.heatmapData.forEach(function(score) {\n            //    maxScore = Math.max(score.score, maxScore);\n            //    minScore = Math.min(score.score, minScore);\n            //});\n\n            $scope.heatmapData.forEach(function (score) {\n                var latlng = $scope.Layout.findStop(score.stop_id).latlon;\n                var g = 255-Math.floor(255 * score.score);\n                var color = 'rgb(255,' + g + ',0)';\n                var message = $scope.Layout.findStop(score.stop_id).name + '<br/>' + Math.floor(score.score * 100) / 100;\n                $scope.paths.push({\n                    color: color,\n                    fillColor: color,\n                    fillOpacity: 1,\n                    type: \"circleMarker\",\n                    stroke: false,\n                    radius: 10,\n                    latlngs: latlng,\n                    message: message,\n                    popupOptions: {\n                        className: 'ot-popup'\n                    }\n                });\n            });\n        });\n\n    }]);\n\n\n","angular.module('RouteExplorer').controller('RouteDetailsController',\n['$scope', '$route', '$http', '$location', 'LocationBinder', 'Layout', 'Locale', 'TimeParser',\nfunction($scope, $route, $http, $location, LocationBinder, Layout, Locale, TimeParser) {\n    var routeParams = $route.current.params;\n\n    var period = TimeParser.parsePeriod(routeParams.period);\n    var startDate = TimeParser.createRequestString(period.from);\n    var endDate = TimeParser.createRequestString(period.end);\n\n    var routeId = routeParams.routeId;\n    var stopIds = Layout.findRoute(routeId).stops;\n    var statsMap = {};\n\n    $scope.loaded = false;\n    $scope.stopIds = stopIds;\n    $scope.origin = stopIds[0];\n    $scope.destination = stopIds[stopIds.length - 1];\n\n    $scope.selectedPeriod = formatMonth(period.from);\n    if (period.to > period.from) {\n        $scope.selectedPeriod += \" \\u2014 \" + formatMonth(period.to)\n    }\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    $scope.selectRouteUrl = '#/' + routeParams.period + '/select-route/' + $scope.origin + '/' + $scope.destination;\n\n    var previousPeriod = offsetPeriod(period, -1);\n    var nextPeriod = offsetPeriod(period, +1);\n    var bounds = Layout.getRoutesDateRange();\n    var day = 10 * 24 * 60 * 60 * 1000;\n    $scope.previousPeriodUrl = bounds.min.getTime() - day < previousPeriod.from.getTime() ? '#/' + TimeParser.formatPeriod(previousPeriod) + '/routes/' + routeId : null;\n    $scope.nextPeriodUrl = bounds.max > nextPeriod.to ? '#/' + TimeParser.formatPeriod(nextPeriod) + '/routes/' + routeId : null;\n\n    $http.get('/api/v1/stats/route-info-full', { params: { route_id: routeId, from_date: startDate, to_date: endDate } })\n        .success(function(data) {\n            loadStats(data);\n            $scope.loaded = true;\n        });\n\n    LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n\n    $scope.stopStats = function(stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId)\n                return stats[i];\n        }\n        return null;\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n            return stop.name;\n    };\n\n    $scope.isDayEmpty = function(day) {\n        var dayId = day.id;\n        var dayTimes = statsMap[dayId];\n\n        if (!dayTimes)\n            return true;\n\n        for (var time in dayTimes)\n            if (dayTimes[time].info.num_trips > 0)\n                return false;\n\n        return true;\n    };\n\n    $scope.isTimeEmpty = function(time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0)\n            return false;\n\n        return true;\n    };\n\n    $scope.tripCount = function(dayId, timeId) {\n      var stats = getStats(dayId, timeId);\n      if (!stats)\n        return 0;\n\n      return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n      dayId = dayId || 'all';\n      timeId = timeId || 'all';\n      return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats)\n          return stats.stops;\n\n        return [];\n    }\n\n    function loadStats(data) {\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId])\n                statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n    }\n\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n\n    function offsetMonth(date, offset) {\n        var d = new Date(date);\n        d.setMonth(d.getMonth() + offset);\n        return d;\n    }\n\n    function offsetPeriod(period, offset) {\n        var size =\n            (period.to.getFullYear() - period.from.getFullYear()) * 12 +\n            period.to.getMonth() - period.from.getMonth() + 1;\n\n        return {\n            from: offsetMonth(period.from, size * offset),\n            to: offsetMonth(period.to, size * offset),\n            end: offsetMonth(period.end, size * offset)\n        };\n    }\n}]);\n","angular.module('RouteExplorer').controller('SelectRouteController',\n['$scope', '$http', '$location', '$route', 'Layout', 'TimeParser',\nfunction($scope, $http, $location, $route, Layout, TimeParser) {\n    $scope.stops = Layout.getStops();\n    var period = TimeParser.parsePeriod($route.current.params.period);\n    var origin = Layout.findStop($route.current.params.origin);\n    var destination = Layout.findStop($route.current.params.destination);\n\n    var graphsUrlParams = [\n        'startStop=' + origin.id,\n        'endStop=' + destination.id,\n        'startDate='+TimeParser.createRequestString(period.from,'-'),\n        'endDate='+TimeParser.createRequestString(period.end,'-'),\n    ];\n    $scope.graphsUrl = \"#/graphs?\" + graphsUrlParams.join(\"&\");\n\n    $http.get('/api/v1/stats/path-info-full/', { params: {\n        origin: origin.id,\n        destination: destination.id,\n        from_date: TimeParser.createRequestString(period.from),\n        to_date: TimeParser.createRequestString(period.end) }\n    }).success(function(data) {\n            loadStats(data);\n            $scope.loaded = true;\n    });\n\n    var statsMap = {};\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n\n    function loadStats(data) {\n        $scope.stats = data;\n    }\n\n    Layout.findRoutesByPeriod(origin.id, destination.id, period.from, period.end).then(function(routes) {\n        if (routes.length > 1)\n            collapseRoutes(routes);\n        $scope.routes = routes;\n\n    });\n\n    function stopName(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    }\n\n    $scope.isCollapsed = function(value) {\n        return angular.isArray(value);\n    };\n\n    $scope.isOrigin = function(stopId) {\n        return stopId == origin.id;\n    };\n\n    $scope.isDestination = function(stopId) {\n        return stopId == destination.id;\n    };\n\n    $scope.stopText = function(stopId) {\n        if ($scope.isCollapsed(stopId))\n            return \"\\u2022\".repeat(stopId.length);\n\n        return stopName(stopId);\n    };\n\n    $scope.stopTooltip = function(stopId) {\n        if (!$scope.isCollapsed(stopId))\n            return null;\n\n        return stopId.map(stopName).join(\", \");\n    };\n\n    $scope.barWidth = function(route) {\n        var percentWidth = route.count * 100.0 / $scope.routes[0].count;\n\n        if (percentWidth < 1.0)\n            return \"1px\";\n\n        return percentWidth + \"%\";\n    };\n\n    $scope.routeUrl = function(route) {\n        return '/#/' + $route.current.params.period + '/routes/' + route.id;\n    };\n\n    function collapseRoutes(routes) {\n        var collapsibleStops = findCommonStops(countStopFrequencies(routes), routes.length);\n        delete collapsibleStops[origin.id];\n        delete collapsibleStops[destination.id];\n\n        for (var routeIndex in routes) {\n            routes[routeIndex].stops = collapseStops(routes[routeIndex].stops, collapsibleStops);\n        }\n\n        function countStopFrequencies(routes) {\n            var stopFrequencies = {};\n            for (var routeIndex in routes) {\n                var route = routes[routeIndex];\n                for (var i in route.stops) {\n                    var stopId = route.stops[i];\n                    if (!stopFrequencies[stopId])\n                        stopFrequencies[stopId] = 0;\n                    stopFrequencies[stopId]++;\n                }\n            }\n\n            return stopFrequencies;\n        }\n\n        function findCommonStops(stopFrequencies, routesCount) {\n            var commonStops = {};\n            for (var stopId in stopFrequencies)\n                if (stopFrequencies[stopId] == routesCount)\n                    commonStops[stopId] = true;\n\n            return commonStops;\n        }\n\n        function collapseStops(stops, collapsibleStops) {\n            var collapsed = [];\n            var accumulator;\n\n            for (var i in stops) {\n                var stopId = stops[i];\n                if (i > 0 && i < stops.length - 1 && collapsibleStops[stopId]) {\n                    if (!accumulator) {\n                        accumulator = [];\n                        collapsed.push(accumulator);\n                    }\n                    accumulator.push(stopId);\n                } else {\n                    accumulator = null;\n                    collapsed.push(stopId);\n                }\n            }\n\n            return collapsed;\n        }\n    }\n}]);\n","angular.module('RouteExplorer').controller('SelectStopsController',\n['$scope', '$rootScope', '$location', 'Layout', 'Locale', 'TimeParser',\nfunction($scope, $rootScope, $location, Layout, Locale, TimeParser) {\n    $scope.stops = Layout.getStops();\n    $scope.origin = null;\n    $scope.destination = null;\n    $scope.months = Locale.months;\n\n    var dateRange = Layout.getRoutesDateRange();\n    $scope.periods = generatePeriods(dateRange.min, dateRange.max);\n    $scope.startPeriod = $scope.periods[0];\n    $scope.endPeriod = $scope.periods[0];\n\n    $scope.formValid = function() {\n        return (\n            !!$scope.origin &&\n            !!$scope.destination &&\n            $scope.origin != $scope.destination &&\n            $scope.startPeriod.from <= $scope.endPeriod.to\n        );\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    };\n\n    $scope.goToRoutes = function() {\n        $scope.noRoutes = false;\n        $scope.loading = true;\n        var period = {\n            from: $scope.startPeriod.from,\n            to: $scope.endPeriod.to,\n            end: $scope.endPeriod.end,\n        };\n        var fromDate = period.from;\n        var toDate = period.end;\n        var periodStr = TimeParser.formatPeriod(period);\n        Layout.findRoutesByPeriod($scope.origin.id, $scope.destination.id, fromDate, toDate)\n            .then(function(routes) {\n                if (routes.length === 0) {\n                    $scope.noRoutes = true;\n                } else if (routes.length == 1) {\n                    $location.path('/' + periodStr + '/routes/' + routes[0].id);\n                } else {\n                    $location.path('/' + periodStr + '/select-route/' + $scope.origin.id + '/' + $scope.destination.id);\n                }\n            })\n            .finally(function() {\n                $scope.loading = false;\n            });\n    };\n\n    $scope.dismissError = function() {\n        $scope.noRoutes = false;\n    };\n\n    function generatePeriods(fromDate, toDate) {\n      // fromDate=1970-1-1 due to a data bug. This is a quick temporary workaround\n      if (fromDate.getFullYear() < 2013) fromDate = new Date(2013, 0, 1);\n\n      var periods = [];\n      var start = new Date(fromDate.getFullYear(), fromDate.getMonth(), 1);\n      while (start < toDate) {\n        let end = new Date(start.getFullYear(), start.getMonth() + 1, start.getDate());\n        var period = {\n          from: start,\n          to: start,\n          end: end,\n          name: Locale.months[start.getMonth()].name + \" \" + start.getFullYear()\n        };\n        period.toName = Locale.until + period.name;\n        periods.push(period);\n        start = end;\n      }\n      periods.reverse();\n      return periods;\n    }\n}]);\n","angular.module('RouteExplorer').controller('TimesDetailsController',\n    ['$scope', '$route', 'Locale','LocationBinder','Layout',\nfunction($scope, $route, Locale, LocationBinder, Layout) {\n    Layout.then(function(Layout) {\n        $scope.layout = Layout;\n    });\n    $scope.layout = null;\n\n    var statsMap = {};\n    var routeParams = $route.current.params;\n    $scope.stopIds = [parseInt(routeParams.origin), parseInt(routeParams.destination)];\n    LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats)\n          return stats.stops;\n\n        return [];\n    }\n\n    $scope.stopName = function(stopId) {\n        if ($scope.layout) {\n            var stop = $scope.layout.findStop(stopId);\n            if (!stop)\n                return null;\n\n            return stop.name;\n        } else {\n            return null;\n        }\n    };\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    $scope.loadStats = function() {\n        var data = $scope.stats;\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId])\n                statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n    };\n    $scope.tripCount = function(dayId, timeId) {\n      var stats = getStats(dayId, timeId);\n      if (!stats)\n        return 0;\n\n      return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n      dayId = dayId || 'all';\n      timeId = timeId || 'all';\n      return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    $scope.isTimeEmpty = function(time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0)\n            return false;\n\n        return true;\n    };\n\n    $scope.stopStats = function(stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId)\n                return stats[i];\n        }\n        return null;\n    };\n\n    $scope.loadStats();\n}]);\n\n","angular.module('RouteExplorer').directive(\"rexPercentBar\",\n['env',\nfunction(env) {\n    return {\n        restrict: 'E',\n        scope: {\n          value: '=value',\n          type: '=type'\n        },\n        templateUrl: env.baseDir + '/tpls/PercentBar.html'\n      };\n}]);\n","angular.module('RouteExplorer').directive(\"timesDetails\",\n['env','Layout',\nfunction(env, Layout) {\n    return {\n        restrict: 'E',\n        scope: {\n            stats: '='\n        },\n        controller: 'TimesDetailsController',\n        templateUrl: env.baseDir + '/tpls/TimesDetails.html'\n      };\n}]);\n","angular.module('RouteExplorer').filter('duration', function() {\n    return function(seconds) {\n        var negative = false;\n        seconds = Math.trunc(seconds);\n        if (seconds < 0) {\n            negative = true;\n            seconds = -seconds;\n        }\n\n        var minutes = Math.trunc(seconds / 60);\n        seconds -= minutes * 60;\n        var hours = Math.trunc(minutes / 60);\n        minutes -= hours * 60;\n\n        if (seconds < 10) seconds = '0' + seconds;\n        if (minutes < 10 && hours !== 0) minutes = '0' + minutes;\n\n        var res = minutes + ':' + seconds;\n        if (hours !== 0)\n            res = hours + ':' + res;\n\n        if (negative)\n            res = '-' + res;\n\n        return res;\n    };\n});\n","angular.module('RouteExplorer').factory('Layout',\n['$http', '$q', 'TimeParser',\nfunction($http, $q, TimeParser) {\n    var self = this;\n    var stops = [];\n    var stopsMap = {};\n    var routes = [];\n    var routesMap = {};\n\n    var loadedPromise = $q.all([\n        $http.get('/api/v1/stops/')\n            .then(function(response) {\n                stops = response.data.map(function(s) { return {\n                    id: s.stop_id,\n                    name: s.heb_stop_names[0],\n                    names: s.heb_stop_names,\n                    latlon: s.latlon,\n                }; });\n                stops.forEach(function(s) { stopsMap[s.id] = s; });\n            }),\n\n        $http.get('/api/v1/routes/all/')\n            .then(function(response) {\n                routes = response.data.map(function(r) { return {\n                    id: r.id,\n                    stops: r.stop_ids,\n                    count: r.count,\n                    minDate: new Date(r.min_date),\n                    maxDate: new Date(r.max_date)\n                }; });\n\n                routesMap = routes.reduce(function(m, r) { m[r.id] = r; return m; }, {});\n            })\n    ]);\n\n    var findStop = function(stopId) {\n        return stopsMap[stopId] || null;\n    };\n\n    var findStopName = function(stopId) {\n        return findStop(stopId).name;\n    };\n\n    var findRoutes = function(routes, originId, destinationId) {\n        var matchingRoutes = {};\n\n        routes.forEach(function(r) {\n            var originIndex = r.stops.indexOf(originId);\n            var destinationIndex = r.stops.indexOf(destinationId);\n\n            if (originIndex < 0 || destinationIndex < 0)\n                return;\n\n            if (originIndex > destinationIndex)\n                return;\n\n            var routeStops = r.stops;\n            var routeId = r.id;\n\n            if (routeId in matchingRoutes)\n                matchingRoutes[routeId].count += r.count;\n            else {\n                matchingRoutes[routeId] = {\n                    id: routeId,\n                    stops: routeStops,\n                    count: r.count\n                };\n            }\n        });\n\n        matchingRoutes = Object.keys(matchingRoutes).map(function(routeId) { return matchingRoutes[routeId]; });\n        matchingRoutes.sort(function(r1, r2) { return r2.count - r1.count; });\n        return matchingRoutes;\n    };\n\n    var findRoutesByPeriod = function(origin, destination, from, to) {\n        // TODO use minDate and maxDate from our cached routes to avoid the http request\n\n        var d = $q.defer();\n        var matchingRoutes = findRoutes(routes, origin, destination);\n        if (matchingRoutes.length === 0) {\n            d.resolve([]);\n        } else {\n            var fromDate = from;\n            var toDate = to;\n\n            $http.get('/api/v1/routes/all-by-date/', {\n                params: {\n                    from_date: TimeParser.createRequestString(fromDate),\n                    to_date: TimeParser.createRequestString(toDate)\n                }\n            }).then(function(response) {\n                var routesInDate = response.data.map(function(r) {\n                    return {\n                        id: r.id,\n                        stops: r.stop_ids,\n                        count: r.count\n                    };\n                });\n                d.resolve(findRoutes(routesInDate, origin, destination));\n            }, function(response) { d.reject({ 'msg': 'Error fetching routes', 'response': response }); });\n        }\n\n        return d.promise;\n    };\n\n    var findRoute = function(routeId) {\n        return routesMap[routeId] || null;\n    };\n\n    var getRoutesDateRange = function() {\n        var max = new Date(1900, 0, 1);\n        var min = new Date(2100, 0, 1);\n\n        for (var i in routes) {\n            var route = routes[i];\n            if (route.count === 0)\n              continue;\n\n            if (route.minDate && route.minDate < min) min = route.minDate;\n            if (route.maxDate && route.maxDate > max) max = route.maxDate;\n        }\n        return {\n          min: min,\n          max: max\n        };\n    };\n\n    let service = {\n        getStops: function() { return stops; },\n        getRoutes: function() { return routes; },\n        findRoute: findRoute,\n        findStop: findStop,\n        findStopName: findStopName,\n        findRoutes: function(origin, destination) { return findRoutes(routes, origin, destination); },\n        findRoutesByPeriod: findRoutesByPeriod,\n        getRoutesDateRange: getRoutesDateRange\n    };\n\n    return loadedPromise.then(function() { return service; });\n}]);\n","angular.module('RouteExplorer').constant('Locale', {\n  months: [\n      'ינואר',\n      'פברואר',\n      'מרץ',\n      'אפריל',\n      'מאי',\n      'יוני',\n      'יולי',\n      'אוגוסט',\n      'ספטמבר',\n      'אוקטובר',\n      'נובמבר',\n      'דצמבר'\n  ].map(function(v, i) { return { id: i + 1, name: v }; }),\n\n  days: [\n      { abbr: 'א', name: 'ראשון', id: 1 },\n      { abbr: 'ב', name: 'שני', id: 2 },\n      { abbr: 'ג', name: 'שלישי', id: 3 },\n      { abbr: 'ד', name: 'רביעי', id: 4 },\n      { abbr: 'ה', name: 'חמישי', id: 5 },\n      { abbr: 'ו', name: 'שישי', id: 6 },\n      { abbr: 'ש', name: 'שבת', id: 7 }\n  ],\n  until: 'עד ל'\n});\n","angular.module('RouteExplorer').factory('LocationBinder',\n['$location',\nfunction($location) {\n    return {\n        bind: function(scope, scopeProperty, locationProperty, parser, formatter) {\n            scope[scopeProperty] = $location.search()[locationProperty] || null;\n\n            scope.$watch(scopeProperty, function(value) {\n                if (formatter)\n                    value = formatter(value);\n\n                $location.search(locationProperty, value);\n            });\n\n            scope.$watch(function() { return $location.search()[locationProperty] || null; }, function(value) {\n                if (parser)\n                    value = parser(value);\n\n                scope[scopeProperty] = value;\n            });\n        }\n    };\n}]);\n","angular.module('RouteExplorer').factory('TimeParser',\n[\nfunction() {\n    function createRequestString(date, sep) {\n        sep = sep || '/';\n        var dd = date.getDate().toString();\n        var mm = (date.getMonth()+1).toString();\n        var yyyy = date.getFullYear().toString();\n        return dd + sep + mm + sep + yyyy;\n    }\n\n    function parseMonth(monthString) {\n        var year = Number(monthString.substr(0, 4));\n        var month = Number(monthString.substr(4, 2));\n        return new Date(year, month - 1, 1);\n    }\n\n    function parsePeriod(periodString) {\n        var parts = periodString.split('-', 2);\n        var from = parseMonth(parts[0]);\n        var to = parts.length > 1 ? parseMonth(parts[1]) : from;\n        var end = new Date(to.getFullYear(), to.getMonth() + 1, 1);\n        return { from: from, to: to, end: end };\n    }\n\n    function formatMonth(date) {\n        return date.getFullYear() + ('0' + (date.getMonth() + 1)).slice(-2);\n    }\n\n    function formatPeriod(period) {\n        var f = formatMonth(period.from);\n        if (period.from < period.to)\n            f += '-' + formatMonth(period.to);\n\n        return f;\n    }\n\n    return {\n        createRequestString: createRequestString,\n        parseMonth: parseMonth,\n        parsePeriod: parsePeriod,\n        formatMonth: formatMonth,\n        formatPeriod: formatPeriod\n    }\n}]);\n"],"sourceRoot":"/source/"}