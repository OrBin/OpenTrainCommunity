{"version":3,"sources":["RouteExplorer.js","polyfills.js","controllers/AppController.js","controllers/GraphsController.js","controllers/HeatMapController.js","controllers/RouteDetailsController.js","controllers/SelectRoutesController.js","controllers/SelectStopsController.js","controllers/TimesDetailsController.js","directives/PercentBar.js","directives/TimesDetails.js","filters/duration.js","services/Layout.js","services/Locale.js","services/LocationBinder.js","services/TimeParser.js"],"names":["app","angular","module","constant","baseDir","config","$routeProvider","env","templateUrl","templateName","when","pageId","controller","resolve","Layout","reloadOnSearch","otherwise","redirectTo","String","prototype","repeat","count","this","TypeError","str","RangeError","Infinity","Math","floor","length","rpt","$scope","$location","share","prefix","url","encodeURIComponent","window","open","$on","e","route","bodyClass","value","name","values","$http","$q","$timeout","daysTable","hoursList","monthNames","wip","input","graphKind","refresh","startStop","endStop","startDate","endDate","search","id","stops","getStops","stopsById","forEach","st","cbs","get","params","from_date","to_date","from_stop","to_stop","then","resp","stat","data","table","fromToStopsIds","fromToStops","map","stop_id","all","updateChart","getRouteTitle","from","to","initData","buildDates","s","first_date","month","year","last_date","buildDatesRange","startDates","endDates","push","ns","alert","computePerDaySeries","perDay","key","week_day_local","num_trips","arrival_late_count","result","d","entry","y","numTrips","console","log","lineName","computePerHoursSeries","perHour","hoursMapping","h","hour_key","hour_local","hl","stopNames","idx","perDaySeries","perHoursSeries","tooltip","formatter","prec","round","x","point","useHTML","chartPerDay","options","chart","type","title","text","xAxis","reversed","categories","yAxis","opposite","series","chartPerHour","findDate","dates","i","findStop","ta","extend","defaults","scrollWheelZoom","center","lat","latlon","lng","zoom","stop","paths","heatmapData","score","latlng","g","color","message","fillColor","fillOpacity","stroke","radius","latlngs","popupOptions","className","$route","LocationBinder","Locale","TimeParser","getStats","dayId","timeId","statsMap","selectedStats","stats","selectedDay","selectedTime","loadStats","times","timesMap","statGroup","info","hours","week_day","time","formatHour","hour","slice","formatMonth","date","months","getMonth","getFullYear","offsetMonth","offset","Date","setMonth","offsetPeriod","period","size","end","routeParams","current","parsePeriod","createRequestString","routeId","stopIds","findRoute","loaded","origin","destination","selectedPeriod","days","selectRouteUrl","previousPeriod","nextPeriod","bounds","getRoutesDateRange","day","previousPeriodUrl","min","getTime","formatPeriod","nextPeriodUrl","max","route_id","success","bind","val","Number","stopStats","stopId","stopName","isDayEmpty","dayTimes","isTimeEmpty","timeStats","tripCount","collapseRoutes","routes","countStopFrequencies","stopFrequencies","routeIndex","findCommonStops","routesCount","commonStops","collapseStops","collapsibleStops","accumulator","collapsed","graphsUrlParams","graphsUrl","join","findRoutesByPeriod","isCollapsed","isArray","isOrigin","isDestination","stopText","stopTooltip","barWidth","percentWidth","routeUrl","$rootScope","generatePeriods","fromDate","toDate","periods","start","getDate","toName","until","reverse","dateRange","startPeriod","endPeriod","formValid","goToRoutes","noRoutes","loading","periodStr","path","dismissError","layout","parseInt","directive","restrict","scope","filter","seconds","negative","trunc","minutes","res","factory","stopsMap","routesMap","loadedPromise","response","heb_stop_names","names","r","stop_ids","minDate","min_date","maxDate","max_date","reduce","m","findStopName","findRoutes","originId","destinationId","matchingRoutes","originIndex","indexOf","destinationIndex","routeStops","Object","keys","sort","r1","r2","defer","routesInDate","reject","msg","promise","service","getRoutes","v","abbr","scopeProperty","locationProperty","parser","$watch","sep","dd","toString","mm","yyyy","parseMonth","monthString","substr","periodString","parts","split","f"],"mappings":"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","file":"app.js","sourcesContent":["(function () {\n    var app = angular.module('RouteExplorer', ['ngRoute',\n        'ui.bootstrap',\n        'ui.bootstrap.buttons',\n        'leaflet-directive',\n        \"highcharts-ng\"\n    ]);\n\n    app.constant('env', {\n        baseDir: '/static/ui/RouteExplorer'\n    });\n\n    app.config(['$routeProvider','env',\n        function ($routeProvider, env) {\n\n            var templateUrl = function (templateName) {\n                return env.baseDir + '/tpls/' + templateName + '.html';\n            };\n\n            $routeProvider\n                .when('/', {\n                    pageId: 'welcome',\n                    templateUrl: templateUrl('SelectStops'),\n                    controller: 'SelectStopsController',\n                    resolve: {'Layout': 'Layout'}\n                })\n                .when('/about', {\n                    pageId: 'about',\n                    templateUrl: templateUrl('About')\n                })\n                .when('/:period/select-route/:origin/:destination', {\n                    pageId: 'routes',\n                    templateUrl: templateUrl('SelectRoute'),\n                    controller: 'SelectRouteController',\n                    resolve: {'Layout': 'Layout'},\n                    reloadOnSearch: false\n                })\n                .when('/:period/routes/:routeId', {\n                    pageId: 'route',\n                    templateUrl: templateUrl('RouteDetails'),\n                    controller: 'RouteDetailsController',\n                    resolve: {'Layout': 'Layout'},\n                    reloadOnSearch: false\n                }).when(\"/heat-map\", {\n                    pageId: 'heatMap',\n                    templateUrl: templateUrl('HeatMap'),\n                    controller: 'HeatMapController',\n                    reloadOnSearch: false,\n                    resolve: {'Layout': 'Layout'},\n                }).when(\"/graphs\", {\n                    pageId: 'graphs',\n                    templateUrl: templateUrl('Graphs'),\n                    controller: 'GraphsController',\n                    reloadOnSearch: false,\n                    resolve: {'Layout': 'Layout'},\n                })\n                .otherwise({\n                    redirectTo: '/'\n                });\n        }]);\n})();\n","// String.repeat polyfill\n// taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#Polyfill\nif (!String.prototype.repeat) {\n  String.prototype.repeat = function(count) {\n    'use strict';\n    if (this === null) {\n      throw new TypeError('can\\'t convert ' + this + ' to object');\n    }\n    var str = '' + this;\n    count = +count;\n    if (count != count) {\n      count = 0;\n    }\n    if (count < 0) {\n      throw new RangeError('repeat count must be non-negative');\n    }\n    if (count == Infinity) {\n      throw new RangeError('repeat count must be less than infinity');\n    }\n    count = Math.floor(count);\n    if (str.length === 0 || count === 0) {\n      return '';\n    }\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\n    // main part. But anyway, most current (August 2014) browsers can't handle\n    // strings 1 << 28 chars or longer, so:\n    if (str.length * count >= 1 << 28) {\n      throw new RangeError('repeat count must not overflow maximum string size');\n    }\n    var rpt = '';\n    for (;;) {\n      if ((count & 1) == 1) {\n        rpt += str;\n      }\n      count >>>= 1;\n      if (count === 0) {\n        break;\n      }\n      str += str;\n    }\n    return rpt;\n  };\n}\n","angular.module('RouteExplorer').controller('AppController',\nfunction($scope, $location) {\n    'ngInject';\n    $scope.share = function(prefix) {\n        let url = prefix + encodeURIComponent('http://otrain.org/#' + $location.url());\n        window.open(url, 'sharePopup', 'width=600,height=550,top=100,left=100,location=no,scrollbar=no,status=no,menubar=no');\n    };\n\n    $scope.$on('$routeChangeSuccess', function(e, route) {\n        $scope.bodyClass = route.pageId ? 'rex-page-' + route.pageId : null;\n    });\n});\n","'use strict';\nangular.module('RouteExplorer').constant('daysTable',\n    [{\n        value: 0,\n        name: 'ראשון',\n    }, {\n        value: 1,\n        name: 'שני',\n    }, {\n        value: 2,\n        name: 'שלישי',\n    }, {\n        value: 3,\n        name: 'רביעי',\n    }, {\n        value: 4,\n        name: 'חמישי',\n    }, {\n        value: 5,\n        name: 'שישי',\n    }, {\n        value: 6,\n        name: 'שבת',\n    }])\n    //}], {\n    //    value: 'all',\n    //    name: 'שבועי'\n    //}\n    //])\n    .constant(\"monthNames\", [\n        'dummy',\n        'ינואר',\n        'פברואר',\n        'מרץ',\n        'אפריל',\n        'מאי',\n        'יוני',\n        'יולי',\n        'אוגוסט',\n        'ספטמבר',\n        'אוקטובר',\n        'נובמבר',\n        'דצמבר'\n    ]).constant(\"hoursList\", [\n    {\n        name: '4-7',\n        values: [4, 5, 6]\n    },\n    {\n        name: '7-9',\n        values: [7, 8]\n    },\n    {\n        name: '9-12',\n        values: [9,10,11],\n    },\n    {\n        name: '12-15',\n        values: [12,13,14],\n    },\n    {\n        name: '15-18',\n        values: [15,16,17],\n    },\n    {\n        name: '18-21',\n        values: [18, 19,20],\n    },\n    {\n        name: '21-24',\n        values: [21, 22,23],\n    },\n    {\n        name: '24-4',\n        values: [0, 1, 2, 3],\n    }\n]\n);\n\n\nangular.module('RouteExplorer').controller('GraphsController',\n        function ($scope,\n                  $http,\n                  $q,\n                  $timeout,\n                  $location,\n                  Layout,\n                  daysTable,\n                  hoursList,\n                  monthNames) {\n            'ngInject';\n            $scope.wip = true;\n            $scope.Layout = Layout;\n            $scope.input = {\n                graphKind: 'perDay'\n            };\n            $scope.refresh = function () {\n                $scope.wip = true;\n                $scope.startStop = $scope.input.startStop;\n                $scope.endStop = $scope.input.endStop;\n                $scope.startDate = $scope.input.startDate.value;\n                $scope.endDate = $scope.input.endDate.value;\n                $location.search({\n                    startStop: $scope.startStop.id,\n                    endStop: $scope.endStop.id,\n                    startDate: $scope.startDate,\n                    endDate: $scope.endDate,\n                });\n                $scope.stops = Layout.getStops();\n                $scope.stopsById = {};\n                $scope.stops.forEach(function (st) {\n                    $scope.stopsById[st.id] = st;\n                });\n                var cbs = [\n                    $http.get('/api/v1/stats/from-to-full/', {\n                        params: {\n                            from_date: $scope.startDate,\n                            to_date: $scope.endDate,\n                            from_stop: $scope.startStop.id,\n                            to_stop: $scope.endStop.id,\n                        }\n                    }).then(function (resp) {\n                        $scope.stat = resp.data.table;\n                    }),\n                    $http.get('/api/v1/stops/from-to/', {\n                        params: {\n                            from_stop: $scope.startStop.id,\n                            to_stop: $scope.endStop.id,\n                        }\n                    }).then(function (resp) {\n                        $scope.fromToStopsIds = resp.data;\n                        $scope.fromToStops = $scope.fromToStopsIds.map(function (stop_id) {\n                            return $scope.stopsById[stop_id];\n                        });\n                    })\n                ];\n                $q.all(cbs).then(function () {\n                    $scope.wip = false;\n                    $scope.updateChart();\n                });\n            };\n            $scope.getRouteTitle = function (route) {\n                return 'מ' + route.from + ' ל' + route.to + ' (' + route.count + ' ' + 'נסיעות' + ')';\n            }\n\n            $scope.initData = function () {\n                return $scope.buildDates();\n            };\n\n            $scope.buildDates = function () {\n                return $http.get('/api/v1/general/dates-range').then( (resp) => {\n                    let data = resp.data;\n                    var s = [data.first_date.month, data.first_date.year];\n                    var e = [data.last_date.month, data.last_date.year];\n                    $scope.buildDatesRange(s,e);\n                });\n            };\n            $scope.buildDatesRange = function(s,e) {\n                $scope.startDates = [];\n                $scope.endDates = [];\n                while (true) {\n                    let abort = false;\n                    $scope.startDates.push({\n                        name: monthNames[s[0]] + ' ' + s[1],\n                        value: '1-' + s[0] + '-' + s[1],\n                    });\n                    var ns = s[0] == 12 ? [1, s[1] + 1] : [s[0] + 1, s[1]];\n                    $scope.endDates.push({\n                        name: monthNames[s[0]] + ' ' + s[1],\n                        value: '1-' + ns[0] + '-' + ns[1],\n                    });\n                    if ($scope.startDates.length > 100) {\n                        alert(\"error\");\n                        return;\n                    }\n                    if (s[0] == e[0] && s[1] == e[1]) {\n                        return;\n                    }\n                    s = [ns[0], ns[1]];\n                }\n            };\n            $scope.computePerDaySeries = function () {\n                var perDay = {};\n                $scope.stat.forEach(function (st) {\n                    var key = st.stop_id + '-' + st.week_day_local;\n                    perDay[key] = perDay[key] || {\n                            num_trips: 0,\n                            arrival_late_count: 0\n                        };\n                    perDay[key].num_trips += st.num_trips;\n                    perDay[key].arrival_late_count += st.arrival_late_count;\n\n                });\n                var result = [];\n                daysTable.forEach(function (d) {\n                    var data = $scope.fromToStops.map(function (st) {\n                        var entry = perDay[st.id + '-' + d.value];\n                        var result = {};\n                        if (!entry) {\n                            result.y = 0;\n                            result.numTrips = 0;\n                            console.log('no entry for ' + st.id + ' ' + d.value);\n                        } else {\n                            result.y = entry.arrival_late_count * 100.0 / entry.num_trips;\n                            result.numTrips = entry.num_trips;\n                        }\n                        result.lineName = d.name;\n                        return result;\n                    });\n                    result.push({\n                        name: d.name,\n                        data: data\n                    })\n                });\n                return result;\n            };\n            $scope.computePerHoursSeries = function () {\n                var perHour = {};\n                var hoursMapping = {}\n                hoursList.forEach(function(e) {\n                    e.values.forEach(function(h) {\n                        hoursMapping[h] = e;\n                    })\n                });\n                $scope.stat.forEach(function (st) {\n                    var hour_key = hoursMapping[st.hour_local].name;\n                    var key = st.stop_id + '-' + hour_key;\n                    perHour[key] = perHour[key] || {\n                            num_trips: 0,\n                            arrival_late_count: 0\n                        };\n                    perHour[key].num_trips += st.num_trips;\n                    perHour[key].arrival_late_count += st.arrival_late_count;\n\n                });\n                var result = [];\n                hoursList.forEach(function (hl) {\n                    var data = $scope.fromToStops.map(function (st) {\n                        var entry = perHour[st.id + '-' + hl.name];\n                        var result = {};\n                        if (!entry) {\n                            console.log('no entry for ' + st.id + ' ' + hl.name);\n                            result.y = 0;\n                            result.numTrips = 0;\n                        } else {\n                            result.y = entry.arrival_late_count * 100.0 / entry.num_trips;\n                            result.numTrips = entry.num_trips;\n                        }\n                        result.lineName = hl.name;\n                        return result;\n                    });\n                    result.push({\n                        name: hl.name,\n                        data: data\n                    })\n                });\n                return result;\n            }\n            $scope.updateChart = function () {\n                var stopNames = $scope.fromToStops.map(function (st, idx) {\n                    return st.name + ' - ' + (idx + 1);\n                });\n                $scope.perDaySeries = $scope.computePerDaySeries();\n                $scope.perHoursSeries = $scope.computePerHoursSeries();\n\n                var tooltip = {\n                    formatter: function () {\n                        var prec = Math.round(this.y * 100) / 100;\n                        return '<span dir=\"rtl\"><b>' + this.x + '</b>' + '<br/>' +\n                                '<span>' + this.point.lineName + '</span><br/>' +\n                            '<span>רכבות מאחרות:</span>' + prec + '%' + '<br/>' +\n                            '<span>מספר רכבות: </span>' + this.point.numTrips +\n                            '</span>';\n                    },\n                    useHTML: true,\n                };\n                var series = [\n                    {\n                        name: '123',\n                        data: [10, 20, 5, 5, 5, 10, 20, 30, 15, 15, 15]\n                    },\n                    {\n                        name: '456',\n                        data: [8, 8, 8, 12, 7, 20]\n                    },\n                ];\n                $scope.chartPerDay = {\n                    options: {\n                        chart: {\n                            type: 'line'\n                        },\n                        title: {\n                            text: 'איחור בחתך יומי'\n                        },\n                        tooltip: tooltip,\n                    },\n                    xAxis: {\n                        reversed: true,\n                        categories: stopNames,\n                        useHTML: true,\n                    },\n                    yAxis: {\n                        opposite: true,\n                        useHTML: true,\n                        title: {\n                            text: 'אחוזי איחור'\n                        }\n                    },\n                    series: $scope.perDaySeries,\n                };\n                $scope.chartPerHour = {\n                    options: {\n                        chart: {\n                            type: 'line'\n                        },\n                        title: {\n                            text: 'אישור בחתך שעתי'\n                        },\n                        tooltip: tooltip,\n                    },\n                    yAxis: {\n                        useHTML: true,\n                        opposite: true,\n                        title: {\n                            text: 'אחוזי איחור'\n                        }\n                    },\n                    xAxis: {\n                        useHTML: true,\n                        reversed: true,\n                        categories: stopNames,\n                    },\n                    tooltip: {\n                        useHTML: true\n                    },\n                    series: $scope.perHoursSeries,\n                };\n            };\n            $scope.findDate = function (dates, value) {\n                for (var i = 0; i < dates.length; i++) {\n                    if (dates[i].value == value) {\n                        return dates[i];\n                    }\n                }\n                return null;\n            };\n\n            $scope.initData().then(() => {\n                let params = $location.search();\n                $scope.input.startDate = $scope.findDate($scope.startDates, params.startDate) || $scope.startDates[$scope.startDates.length - 1];\n                $scope.input.endDate = $scope.findDate($scope.endDates, params.endDate) || $scope.endDates[$scope.endDates.length - 1];\n                $scope.input.startStop = Layout.findStop(params.startStop || 400);\n                $scope.input.endStop = Layout.findStop(params.endStop || 3700)\n                $scope.refresh();\n            });\n        });\n\n\n\n\n\n","angular.module('RouteExplorer').controller('HeatMapController',\n    function ($scope, $http, Layout) {\n        \"ngInject\";\n        $scope.Layout = Layout;\n        var ta = $scope.Layout.findStop(4600); // TA HASHALOM\n        console.log(ta);\n        angular.extend($scope, {\n            defaults: {\n                scrollWheelZoom: false\n            },\n            center: {\n                lat: ta.latlon[0],\n                lng: ta.latlon[1],\n                zoom: 10,\n            }\n        });\n        $scope.stops = Layout.getStops();\n        $scope.input = {\n            stop: $scope.stops[0]\n        }\n        $scope.paths = [];\n        $http.get('/api/v1/heat-map/').then(function (resp) {\n            $scope.heatmapData = resp.data;\n            //var maxScore = 0;\n            //var minScore = 1;\n\n            //$scope.heatmapData.forEach(function(score) {\n            //    maxScore = Math.max(score.score, maxScore);\n            //    minScore = Math.min(score.score, minScore);\n            //});\n\n            $scope.heatmapData.forEach(function (score) {\n                var latlng = $scope.Layout.findStop(score.stop_id).latlon;\n                var g = 255-Math.floor(255 * score.score);\n                var color = 'rgb(255,' + g + ',0)';\n                var message = $scope.Layout.findStop(score.stop_id).name + '<br/>' + Math.floor(score.score * 100) / 100;\n                $scope.paths.push({\n                    color: color,\n                    fillColor: color,\n                    fillOpacity: 1,\n                    type: \"circleMarker\",\n                    stroke: false,\n                    radius: 10,\n                    latlngs: latlng,\n                    message: message,\n                    popupOptions: {\n                        className: 'ot-popup'\n                    }\n                });\n            });\n        });\n\n    });\n\n\n","angular.module('RouteExplorer').controller('RouteDetailsController',\nfunction($scope, $route, $http, $location, LocationBinder, Layout, Locale, TimeParser) {\n    \"ngInject\";\n    var routeParams = $route.current.params;\n\n    var period = TimeParser.parsePeriod(routeParams.period);\n    var startDate = TimeParser.createRequestString(period.from);\n    var endDate = TimeParser.createRequestString(period.end);\n\n    var routeId = routeParams.routeId;\n    var stopIds = Layout.findRoute(routeId).stops;\n    var statsMap = {};\n\n    $scope.loaded = false;\n    $scope.stopIds = stopIds;\n    $scope.origin = stopIds[0];\n    $scope.destination = stopIds[stopIds.length - 1];\n\n    $scope.selectedPeriod = formatMonth(period.from);\n    if (period.to > period.from) {\n        $scope.selectedPeriod += \" \\u2014 \" + formatMonth(period.to)\n    }\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    $scope.selectRouteUrl = '#/' + routeParams.period + '/select-route/' + $scope.origin + '/' + $scope.destination;\n\n    var previousPeriod = offsetPeriod(period, -1);\n    var nextPeriod = offsetPeriod(period, +1);\n    var bounds = Layout.getRoutesDateRange();\n    var day = 10 * 24 * 60 * 60 * 1000;\n    $scope.previousPeriodUrl = bounds.min.getTime() - day < previousPeriod.from.getTime() ? '#/' + TimeParser.formatPeriod(previousPeriod) + '/routes/' + routeId : null;\n    $scope.nextPeriodUrl = bounds.max > nextPeriod.to ? '#/' + TimeParser.formatPeriod(nextPeriod) + '/routes/' + routeId : null;\n\n    $http.get('/api/v1/stats/route-info-full', { params: { route_id: routeId, from_date: startDate, to_date: endDate } })\n        .success(function(data) {\n            loadStats(data);\n            $scope.loaded = true;\n        });\n\n    LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n\n    $scope.stopStats = function(stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId)\n                return stats[i];\n        }\n        return null;\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n            return stop.name;\n    };\n\n    $scope.isDayEmpty = function(day) {\n        var dayId = day.id;\n        var dayTimes = statsMap[dayId];\n\n        if (!dayTimes)\n            return true;\n\n        for (var time in dayTimes)\n            if (dayTimes[time].info.num_trips > 0)\n                return false;\n\n        return true;\n    };\n\n    $scope.isTimeEmpty = function(time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0)\n            return false;\n\n        return true;\n    };\n\n    $scope.tripCount = function(dayId, timeId) {\n      var stats = getStats(dayId, timeId);\n      if (!stats)\n        return 0;\n\n      return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n      dayId = dayId || 'all';\n      timeId = timeId || 'all';\n      return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats)\n          return stats.stops;\n\n        return [];\n    }\n\n    function loadStats(data) {\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId])\n                statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n    }\n\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n\n    function offsetMonth(date, offset) {\n        var d = new Date(date);\n        d.setMonth(d.getMonth() + offset);\n        return d;\n    }\n\n    function offsetPeriod(period, offset) {\n        var size =\n            (period.to.getFullYear() - period.from.getFullYear()) * 12 +\n            period.to.getMonth() - period.from.getMonth() + 1;\n\n        return {\n            from: offsetMonth(period.from, size * offset),\n            to: offsetMonth(period.to, size * offset),\n            end: offsetMonth(period.end, size * offset)\n        };\n    }\n});\n","angular.module('RouteExplorer').controller('SelectRouteController',\nfunction($scope, $http, $location, $route, Layout, TimeParser) {\n    'ngInject';\n    $scope.stops = Layout.getStops();\n    var period = TimeParser.parsePeriod($route.current.params.period);\n    var origin = Layout.findStop($route.current.params.origin);\n    var destination = Layout.findStop($route.current.params.destination);\n\n    var graphsUrlParams = [\n        'startStop=' + origin.id,\n        'endStop=' + destination.id,\n        'startDate='+TimeParser.createRequestString(period.from,'-'),\n        'endDate='+TimeParser.createRequestString(period.end,'-'),\n    ];\n    $scope.graphsUrl = \"#/graphs?\" + graphsUrlParams.join(\"&\");\n\n    $http.get('/api/v1/stats/path-info-full/', { params: {\n        origin: origin.id,\n        destination: destination.id,\n        from_date: TimeParser.createRequestString(period.from),\n        to_date: TimeParser.createRequestString(period.end) }\n    }).success(function(data) {\n            loadStats(data);\n            $scope.loaded = true;\n    });\n\n    var statsMap = {};\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n\n    function loadStats(data) {\n        $scope.stats = data;\n    }\n\n    Layout.findRoutesByPeriod(origin.id, destination.id, period.from, period.end).then(function(routes) {\n        if (routes.length > 1)\n            collapseRoutes(routes);\n        $scope.routes = routes;\n\n    });\n\n    function stopName(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    }\n\n    $scope.isCollapsed = function(value) {\n        return angular.isArray(value);\n    };\n\n    $scope.isOrigin = function(stopId) {\n        return stopId == origin.id;\n    };\n\n    $scope.isDestination = function(stopId) {\n        return stopId == destination.id;\n    };\n\n    $scope.stopText = function(stopId) {\n        if ($scope.isCollapsed(stopId))\n            return \"\\u2022\".repeat(stopId.length);\n\n        return stopName(stopId);\n    };\n\n    $scope.stopTooltip = function(stopId) {\n        if (!$scope.isCollapsed(stopId))\n            return null;\n\n        return stopId.map(stopName).join(\", \");\n    };\n\n    $scope.barWidth = function(route) {\n        var percentWidth = route.count * 100.0 / $scope.routes[0].count;\n\n        if (percentWidth < 1.0)\n            return \"1px\";\n\n        return percentWidth + \"%\";\n    };\n\n    $scope.routeUrl = function(route) {\n        return '/#/' + $route.current.params.period + '/routes/' + route.id;\n    };\n\n    function collapseRoutes(routes) {\n        var collapsibleStops = findCommonStops(countStopFrequencies(routes), routes.length);\n        delete collapsibleStops[origin.id];\n        delete collapsibleStops[destination.id];\n\n        for (var routeIndex in routes) {\n            routes[routeIndex].stops = collapseStops(routes[routeIndex].stops, collapsibleStops);\n        }\n\n        function countStopFrequencies(routes) {\n            var stopFrequencies = {};\n            for (var routeIndex in routes) {\n                var route = routes[routeIndex];\n                for (var i in route.stops) {\n                    var stopId = route.stops[i];\n                    if (!stopFrequencies[stopId])\n                        stopFrequencies[stopId] = 0;\n                    stopFrequencies[stopId]++;\n                }\n            }\n\n            return stopFrequencies;\n        }\n\n        function findCommonStops(stopFrequencies, routesCount) {\n            var commonStops = {};\n            for (var stopId in stopFrequencies)\n                if (stopFrequencies[stopId] == routesCount)\n                    commonStops[stopId] = true;\n\n            return commonStops;\n        }\n\n        function collapseStops(stops, collapsibleStops) {\n            var collapsed = [];\n            var accumulator;\n\n            for (var i in stops) {\n                var stopId = stops[i];\n                if (i > 0 && i < stops.length - 1 && collapsibleStops[stopId]) {\n                    if (!accumulator) {\n                        accumulator = [];\n                        collapsed.push(accumulator);\n                    }\n                    accumulator.push(stopId);\n                } else {\n                    accumulator = null;\n                    collapsed.push(stopId);\n                }\n            }\n\n            return collapsed;\n        }\n    }\n});\n","angular.module('RouteExplorer').controller('SelectStopsController',\n['$scope', '$rootScope', '$location', 'Layout', 'Locale', 'TimeParser',\nfunction($scope, $rootScope, $location, Layout, Locale, TimeParser) {\n    'ngInject';\n    $scope.stops = Layout.getStops();\n    $scope.origin = null;\n    $scope.destination = null;\n    $scope.months = Locale.months;\n\n    var dateRange = Layout.getRoutesDateRange();\n    $scope.periods = generatePeriods(dateRange.min, dateRange.max);\n    $scope.startPeriod = $scope.periods[0];\n    $scope.endPeriod = $scope.periods[0];\n\n    $scope.formValid = function() {\n        return (\n            !!$scope.origin &&\n            !!$scope.destination &&\n            $scope.origin != $scope.destination &&\n            $scope.startPeriod.from <= $scope.endPeriod.to\n        );\n    };\n\n    $scope.stopName = function(stopId) {\n        var stop = Layout.findStop(stopId);\n        if (!stop)\n            return null;\n\n        return stop.name;\n    };\n\n    $scope.goToRoutes = function() {\n        $scope.noRoutes = false;\n        $scope.loading = true;\n        var period = {\n            from: $scope.startPeriod.from,\n            to: $scope.endPeriod.to,\n            end: $scope.endPeriod.end,\n        };\n        var fromDate = period.from;\n        var toDate = period.end;\n        var periodStr = TimeParser.formatPeriod(period);\n        Layout.findRoutesByPeriod($scope.origin.id, $scope.destination.id, fromDate, toDate)\n            .then(function(routes) {\n                if (routes.length === 0) {\n                    $scope.noRoutes = true;\n                } else if (routes.length == 1) {\n                    $location.path('/' + periodStr + '/routes/' + routes[0].id);\n                } else {\n                    $location.path('/' + periodStr + '/select-route/' + $scope.origin.id + '/' + $scope.destination.id);\n                }\n            })\n            .finally(function() {\n                $scope.loading = false;\n            });\n    };\n\n    $scope.dismissError = function() {\n        $scope.noRoutes = false;\n    };\n\n    function generatePeriods(fromDate, toDate) {\n      // fromDate=1970-1-1 due to a data bug. This is a quick temporary workaround\n      if (fromDate.getFullYear() < 2013) fromDate = new Date(2013, 0, 1);\n\n      var periods = [];\n      var start = new Date(fromDate.getFullYear(), fromDate.getMonth(), 1);\n      while (start < toDate) {\n        let end = new Date(start.getFullYear(), start.getMonth() + 1, start.getDate());\n        var period = {\n          from: start,\n          to: start,\n          end: end,\n          name: Locale.months[start.getMonth()].name + \" \" + start.getFullYear()\n        };\n        period.toName = Locale.until + period.name;\n        periods.push(period);\n        start = end;\n      }\n      periods.reverse();\n      return periods;\n    }\n}]);\n","angular.module('RouteExplorer').controller('TimesDetailsController',\nfunction($scope, $route, Locale, LocationBinder, Layout) {\n    'ngInject';\n    Layout.then(function(Layout) {\n        $scope.layout = Layout;\n    });\n    $scope.layout = null;\n\n    var statsMap = {};\n    var routeParams = $route.current.params;\n    $scope.stopIds = [parseInt(routeParams.origin), parseInt(routeParams.destination)];\n    LocationBinder.bind($scope, 'selectedDay', 'day', function(val) { return val ? Number(val) : null; });\n    LocationBinder.bind($scope, 'selectedTime', 'time');\n    function formatHour(hour) {\n        return ('0' + hour % 24 + '').slice(-2) + ':00';\n    }\n\n    function formatMonth(date) {\n        return Locale.months[date.getMonth()].name + ' ' + date.getFullYear()\n    }\n\n    function selectedStats() {\n        var stats = getStats($scope.selectedDay, $scope.selectedTime);\n        if (stats)\n          return stats.stops;\n\n        return [];\n    }\n\n    $scope.stopName = function(stopId) {\n        if ($scope.layout) {\n            var stop = $scope.layout.findStop(stopId);\n            if (!stop)\n                return null;\n\n            return stop.name;\n        } else {\n            return null;\n        }\n    };\n\n    $scope.selectedDay = null;\n    $scope.days = Locale.days;\n\n    $scope.selectedTime = null;\n    $scope.times = [];\n\n    $scope.loadStats = function() {\n        var data = $scope.stats;\n        $scope.times = [];\n        var timesMap = {};\n\n        for (var i in data) {\n            var statGroup = data[i];\n            var timeId = statGroup.info.hours == 'all' ? 'all' : statGroup.info.hours[0] + '-' + statGroup.info.hours[1];\n            var dayId = statGroup.info.week_day;\n\n            if (!statsMap[dayId])\n                statsMap[dayId] = {};\n\n            statsMap[dayId][timeId] = statGroup;\n\n            if (timeId != 'all' && !timesMap[timeId]) {\n                var time = {\n                    id: timeId,\n                    from: formatHour(statGroup.info.hours[0]),\n                    to: formatHour(statGroup.info.hours[1])\n                };\n                timesMap[timeId] = time;\n                $scope.times.push(time);\n            }\n        }\n    };\n    $scope.tripCount = function(dayId, timeId) {\n      var stats = getStats(dayId, timeId);\n      if (!stats)\n        return 0;\n\n      return stats.info.num_trips;\n    };\n\n    function getStats(dayId, timeId) {\n      dayId = dayId || 'all';\n      timeId = timeId || 'all';\n      return statsMap[dayId] && statsMap[dayId][timeId] ? statsMap[dayId][timeId] : null;\n    }\n\n    $scope.isTimeEmpty = function(time) {\n        var dayId = $scope.selectedDay || 'all';\n        var timeId = time.id;\n\n        var timeStats = statsMap[dayId] && statsMap[dayId][timeId];\n        if (timeStats && timeStats.info.num_trips > 0)\n            return false;\n\n        return true;\n    };\n\n    $scope.stopStats = function(stopId) {\n        var stats = selectedStats();\n        for (var i in stats) {\n            if (stats[i].stop_id == stopId)\n                return stats[i];\n        }\n        return null;\n    };\n\n    $scope.loadStats();\n});\n\n","angular.module('RouteExplorer').directive(\"rexPercentBar\",\n['env',\nfunction(env) {\n    return {\n        restrict: 'E',\n        scope: {\n          value: '=value',\n          type: '=type'\n        },\n        templateUrl: env.baseDir + '/tpls/PercentBar.html'\n      };\n}]);\n","angular.module('RouteExplorer').directive(\"timesDetails\",\n['env','Layout',\nfunction(env, Layout) {\n    return {\n        restrict: 'E',\n        scope: {\n            stats: '='\n        },\n        controller: 'TimesDetailsController',\n        templateUrl: env.baseDir + '/tpls/TimesDetails.html'\n      };\n}]);\n","angular.module('RouteExplorer').filter('duration', function() {\n    return function(seconds) {\n        var negative = false;\n        seconds = Math.trunc(seconds);\n        if (seconds < 0) {\n            negative = true;\n            seconds = -seconds;\n        }\n\n        var minutes = Math.trunc(seconds / 60);\n        seconds -= minutes * 60;\n        var hours = Math.trunc(minutes / 60);\n        minutes -= hours * 60;\n\n        if (seconds < 10) seconds = '0' + seconds;\n        if (minutes < 10 && hours !== 0) minutes = '0' + minutes;\n\n        var res = minutes + ':' + seconds;\n        if (hours !== 0)\n            res = hours + ':' + res;\n\n        if (negative)\n            res = '-' + res;\n\n        return res;\n    };\n});\n","angular.module('RouteExplorer').factory('Layout',\n['$http', '$q', 'TimeParser',\nfunction($http, $q, TimeParser) {\n    var self = this;\n    var stops = [];\n    var stopsMap = {};\n    var routes = [];\n    var routesMap = {};\n\n    var loadedPromise = $q.all([\n        $http.get('/api/v1/stops/')\n            .then(function(response) {\n                stops = response.data.map(function(s) { return {\n                    id: s.stop_id,\n                    name: s.heb_stop_names[0],\n                    names: s.heb_stop_names,\n                    latlon: s.latlon,\n                }; });\n                stops.forEach(function(s) { stopsMap[s.id] = s; });\n            }),\n\n        $http.get('/api/v1/routes/all/')\n            .then(function(response) {\n                routes = response.data.map(function(r) { return {\n                    id: r.id,\n                    stops: r.stop_ids,\n                    count: r.count,\n                    minDate: new Date(r.min_date),\n                    maxDate: new Date(r.max_date)\n                }; });\n\n                routesMap = routes.reduce(function(m, r) { m[r.id] = r; return m; }, {});\n            })\n    ]);\n\n    var findStop = function(stopId) {\n        return stopsMap[stopId] || null;\n    };\n\n    var findStopName = function(stopId) {\n        return findStop(stopId).name;\n    };\n\n    var findRoutes = function(routes, originId, destinationId) {\n        var matchingRoutes = {};\n\n        routes.forEach(function(r) {\n            var originIndex = r.stops.indexOf(originId);\n            var destinationIndex = r.stops.indexOf(destinationId);\n\n            if (originIndex < 0 || destinationIndex < 0)\n                return;\n\n            if (originIndex > destinationIndex)\n                return;\n\n            var routeStops = r.stops;\n            var routeId = r.id;\n\n            if (routeId in matchingRoutes)\n                matchingRoutes[routeId].count += r.count;\n            else {\n                matchingRoutes[routeId] = {\n                    id: routeId,\n                    stops: routeStops,\n                    count: r.count\n                };\n            }\n        });\n\n        matchingRoutes = Object.keys(matchingRoutes).map(function(routeId) { return matchingRoutes[routeId]; });\n        matchingRoutes.sort(function(r1, r2) { return r2.count - r1.count; });\n        return matchingRoutes;\n    };\n\n    var findRoutesByPeriod = function(origin, destination, from, to) {\n        // TODO use minDate and maxDate from our cached routes to avoid the http request\n\n        var d = $q.defer();\n        var matchingRoutes = findRoutes(routes, origin, destination);\n        if (matchingRoutes.length === 0) {\n            d.resolve([]);\n        } else {\n            var fromDate = from;\n            var toDate = to;\n\n            $http.get('/api/v1/routes/all-by-date/', {\n                params: {\n                    from_date: TimeParser.createRequestString(fromDate),\n                    to_date: TimeParser.createRequestString(toDate)\n                }\n            }).then(function(response) {\n                var routesInDate = response.data.map(function(r) {\n                    return {\n                        id: r.id,\n                        stops: r.stop_ids,\n                        count: r.count\n                    };\n                });\n                d.resolve(findRoutes(routesInDate, origin, destination));\n            }, function(response) { d.reject({ 'msg': 'Error fetching routes', 'response': response }); });\n        }\n\n        return d.promise;\n    };\n\n    var findRoute = function(routeId) {\n        return routesMap[routeId] || null;\n    };\n\n    var getRoutesDateRange = function() {\n        var max = new Date(1900, 0, 1);\n        var min = new Date(2100, 0, 1);\n\n        for (var i in routes) {\n            var route = routes[i];\n            if (route.count === 0)\n              continue;\n\n            if (route.minDate && route.minDate < min) min = route.minDate;\n            if (route.maxDate && route.maxDate > max) max = route.maxDate;\n        }\n        return {\n          min: min,\n          max: max\n        };\n    };\n\n    let service = {\n        getStops: function() { return stops; },\n        getRoutes: function() { return routes; },\n        findRoute: findRoute,\n        findStop: findStop,\n        findStopName: findStopName,\n        findRoutes: function(origin, destination) { return findRoutes(routes, origin, destination); },\n        findRoutesByPeriod: findRoutesByPeriod,\n        getRoutesDateRange: getRoutesDateRange\n    };\n\n    return loadedPromise.then(function() { return service; });\n}]);\n","angular.module('RouteExplorer').constant('Locale', {\n  months: [\n      'ינואר',\n      'פברואר',\n      'מרץ',\n      'אפריל',\n      'מאי',\n      'יוני',\n      'יולי',\n      'אוגוסט',\n      'ספטמבר',\n      'אוקטובר',\n      'נובמבר',\n      'דצמבר'\n  ].map(function(v, i) { return { id: i + 1, name: v }; }),\n\n  days: [\n      { abbr: 'א', name: 'ראשון', id: 1 },\n      { abbr: 'ב', name: 'שני', id: 2 },\n      { abbr: 'ג', name: 'שלישי', id: 3 },\n      { abbr: 'ד', name: 'רביעי', id: 4 },\n      { abbr: 'ה', name: 'חמישי', id: 5 },\n      { abbr: 'ו', name: 'שישי', id: 6 },\n      { abbr: 'ש', name: 'שבת', id: 7 }\n  ],\n  until: 'עד ל'\n});\n","angular.module('RouteExplorer').factory('LocationBinder',\n['$location',\nfunction($location) {\n    return {\n        bind: function(scope, scopeProperty, locationProperty, parser, formatter) {\n            scope[scopeProperty] = $location.search()[locationProperty] || null;\n\n            scope.$watch(scopeProperty, function(value) {\n                if (formatter)\n                    value = formatter(value);\n\n                $location.search(locationProperty, value);\n            });\n\n            scope.$watch(function() { return $location.search()[locationProperty] || null; }, function(value) {\n                if (parser)\n                    value = parser(value);\n\n                scope[scopeProperty] = value;\n            });\n        }\n    };\n}]);\n","angular.module('RouteExplorer').factory('TimeParser',\n[\nfunction() {\n    function createRequestString(date, sep) {\n        sep = sep || '/';\n        var dd = date.getDate().toString();\n        var mm = (date.getMonth()+1).toString();\n        var yyyy = date.getFullYear().toString();\n        return dd + sep + mm + sep + yyyy;\n    }\n\n    function parseMonth(monthString) {\n        var year = Number(monthString.substr(0, 4));\n        var month = Number(monthString.substr(4, 2));\n        return new Date(year, month - 1, 1);\n    }\n\n    function parsePeriod(periodString) {\n        var parts = periodString.split('-', 2);\n        var from = parseMonth(parts[0]);\n        var to = parts.length > 1 ? parseMonth(parts[1]) : from;\n        var end = new Date(to.getFullYear(), to.getMonth() + 1, 1);\n        return { from: from, to: to, end: end };\n    }\n\n    function formatMonth(date) {\n        return date.getFullYear() + ('0' + (date.getMonth() + 1)).slice(-2);\n    }\n\n    function formatPeriod(period) {\n        var f = formatMonth(period.from);\n        if (period.from < period.to)\n            f += '-' + formatMonth(period.to);\n\n        return f;\n    }\n\n    return {\n        createRequestString: createRequestString,\n        parseMonth: parseMonth,\n        parsePeriod: parsePeriod,\n        formatMonth: formatMonth,\n        formatPeriod: formatPeriod\n    }\n}]);\n"],"sourceRoot":"/source/"}